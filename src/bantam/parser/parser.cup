/* Bantam Java Compiler and Language Toolset.

   Copyright (C) 2009 by Marc Corliss (corliss@hws.edu) and
                         David Furcy (furcyd@uwosh.edu) and
                         E Christopher Lewis (lewis@vmware.com).
   ALL RIGHTS RESERVED.

   The Bantam Java toolset is distributed under the following
   conditions:

     You may make copies of the toolset for your own use and
     modify those copies.

     All copies of the toolset must retain the author names and
     copyright notice.

     You may not sell the toolset or distribute it in
     conjunction with a commerical product or service without
     the expressed written consent of the authors.

   THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS
   OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
   PARTICULAR PURPOSE.
*/

/* code below is copied to the file containing the bantam.parser */

package bantam.parser;

/* import the AST and utility class files */
import bantam.lexer.*;
import bantam.ast.*;
import bantam.util.ErrorHandler;
/* import Symbol class, which represents the type of token passed
   from the bantam.lexer to the bantam.parser.  Note: in the bantam.lexer package there is
   a file Token.java that  defines a subclass of Symbol called Token,
   which is what is actually passed to the bantam.parser */
import java_cup.runtime.Symbol;

/* the code below is copied to the class containing the context-free
   grammar productions */
action code {:
    /** object for error handling */
    private ErrorHandler errorHandler = new ErrorHandler();

    /* sets the error handler */
    public ErrorHandler getErrorHandler() {
	return errorHandler;
    }

    /* returns the current line number from the scanner */
    public int getCurrLineNum() {
	return ((Lexer)parser.getScanner()).getCurrLineNum();
    }

    /* returns the current file name from the scanner */
    public String getCurrFilename() {
	return ((Lexer)parser.getScanner()).getCurrFilename();
    }
:}

/* code below is copied to the Parser class, which drives parsing */
parser code {:
    /**
     * @return the ErrorHandler for this Parser
     */
    public ErrorHandler getErrorHandler() { return action_obj.getErrorHandler(); }

    /** overrides done_parsing in inherited class, called when parsing finishes
      * either after accepting or because of errors
      * */
    public void done_parsing() {
	super.done_parsing();
	// if lexing and/or parsing errors then exit
	action_obj.getErrorHandler().checkErrors();
    }

    /** overrides syntax_error in inherited class and handles syntax errors
      * @param curr current symbol from the bantam.lexer
      * */
    public void syntax_error(Symbol curr) {
	// get token value from the symbol
	Token t = (Token)curr.value;

	// get the error handler object
	ErrorHandler errorHandler = action_obj.getErrorHandler();

	// may want to modify and augment the code below for more
	// accurate error reporting
	errorHandler.register(errorHandler.PARSE_ERROR, action_obj.getCurrFilename(),
			      action_obj.getCurrLineNum(),
			      "unexpected input near '" + t.getLexeme() + "'");
    }

    /** override error_sync_size in inherited class and
      * change the minimum number of tokens to skip on an error from 3 to 2
      * @return minimum number of tokens to skip on an error
      * */
    protected int error_sync_size() {
	return 2;
    }
:}

/* list of terminals, which correspond to tokens returned by the bantam.lexer
 */
terminal Token LEX_ERROR;
terminal Token CLASS, EXTENDS, IF, ELSE, WHILE, FOR, BREAK, NEW, RETURN, INSTANCEOF;
terminal Token PLUS, MINUS, TIMES, DIVIDE, MODULUS, NOT, AND, OR;
terminal Token EQ, NE, LT, LEQ, GT, GEQ, ASSIGN, INCR, DECR;
terminal Token LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE;
terminal Token SEMI, COMMA, DOT;
terminal Token ID, INT_CONST, BOOLEAN_CONST, STRING_CONST;

/* list of non-terminals used in context-free grammar
   format: nonterminal <type> <list of nonterminal names>
   example: nonterminal Expr expr1, expr2
   The type specifies what type of result the non-terminal will return
   The type should correspond to a class name from the AST
*/
nonterminal Program program;
nonterminal ClassList class_list;
nonterminal Class_ class;
nonterminal MemberList member_list;
nonterminal Member member;
nonterminal Method method;
nonterminal Field field;
nonterminal FormalList formal_list;
nonterminal Formal formal;
nonterminal StmtList stmt_list;
nonterminal Stmt stmt;
nonterminal ExprStmt expr_stmt;
nonterminal DeclStmt decl_stmt;
nonterminal IfStmt if_stmt;
nonterminal WhileStmt while_stmt;
nonterminal ForStmt for_stmt;
nonterminal BreakStmt break_stmt;
nonterminal ReturnStmt return_stmt;
nonterminal BlockStmt block_stmt;
nonterminal Expr expr;
nonterminal AssignExpr assign_expr;
nonterminal ArrayAssignExpr array_assign_expr;
nonterminal DispatchExpr dispatch_expr;
nonterminal ExprList expr_list;
nonterminal NewExpr new_expr;
nonterminal NewArrayExpr new_array_expr;
nonterminal InstanceofExpr instance_of_expr;
nonterminal CastExpr cast_expr;
nonterminal BinaryExpr binary_expr;
nonterminal UnaryExpr unary_expr;
nonterminal ConstExpr const_expr;
nonterminal BinaryArithExpr binary_arith_expr;
nonterminal BinaryCompExpr binary_comp_expr;
nonterminal BinaryLogicExpr binary_logic_expr;
nonterminal UnaryNegExpr unary_neg_expr;
nonterminal UnaryNotExpr unary_not_expr;
nonterminal UnaryIncrExpr unary_incr_expr;
nonterminal UnaryDecrExpr unary_decr_expr;
nonterminal VarExpr var_expr;
nonterminal ArrayExpr array_expr;


/* precedence/associativity rules
   precedence specified by order (from lowest to highest)
   note: use a single precedence rule for terminals with same precedence
   associativity specfied by middle operand (left, right, none)
*/
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left EQ, NE;
precedence left LT, GT, LEQ, GEQ, INSTANCEOF;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULUS;
//precedence left NEW;  /* CAST*/
precedence left NOT; /*UNIARY,++PREFIX, --PREFIX */
//precedence left DOT; /*THIS IS A THING YOU SHOULD BE AWARE OF*/
//precedence left LPAREN, RPAREN, /*LSQBRACE, RSQBRACE,*/ INCR, DECR; /*POSTFIX*/*/


/* program, which is simply a list of classes */
program
	::=
	class_list:cl
	    {: RESULT = new Program(0, cl); :}
    ;

/* list of classes (must be at least one class in program) */
class_list
    ::=
    /* single class */
    class:c
        {: RESULT = (ClassList)(new ClassList(0)).addElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = (ClassList)cl.addElement(c); :}
	;

/* a single class */
class
    ::=
    /* class with no specified parent - uses Object class */
    CLASS:t ID:name LBRACE member_list:ml RBRACE
        {: RESULT = new Class_(t.getLineNum(), getCurrFilename(),
               name.getAttribute(), "Object", ml); :}

    /* class with a specified parent */
    | CLASS:t ID:name EXTENDS ID:parent LBRACE member_list:ml RBRACE
        {: RESULT = new Class_(t.getLineNum(), getCurrFilename(),
               name.getAttribute(),
               parent.getAttribute(), ml); :}
    ;

/* member list (FIXE: only allows empty member lists) */
member_list
	::=
    /* empty member */
        {: RESULT = new MemberList(getCurrLineNum()); :}

    /* single member */
    | member:m
        {: RESULT = (MemberList)(new MemberList(m.getLineNum())).addElement(m); :}

    /* several member*/
    | member_list:ml member:m
        {: RESULT = (MemberList)ml.addElement(m); :}
	;

/*a member of a class*/
member
    ::=
    /*If the member is a method*/
    method:meth
        {: RESULT = meth; :}
    /*If the member is a field*/
    | field:f
        {: RESULT = f; :}
    ;

/*a method declaration in a class*/
method
    ::=
    /* Return type is not array*/
    ID:type ID:name LPAREN formal_list:fl RPAREN LBRACE stmt_list:sl RBRACE
        {: RESULT = new Method(name.getLineNum(), type.getAttribute(), name.getAttribute(), fl, sl); :}
    /* Return type is array*/
    | ID:type LSQBRACE RSQBRACE ID:name LPAREN formal_list:fl RPAREN LBRACE stmt_list:sl RBRACE
        {: RESULT = new Method(name.getLineNum(), type.getAttribute()+"[]", name.getAttribute(), fl, sl); :}
    ;

/* a decleration for a field */
field
    ::=
    /* Type is not an array, and no assignment */
    ID:type ID:name SEMI
        {: RESULT = new Field(type.getLineNum(), type.getAttribute(), name.getAttribute(), null); :}

    /* Type is not an array, and is an assignment */
    | ID:type ID:name ASSIGN expr:e SEMI
        {: RESULT = new Field(type.getLineNum(), type.getAttribute(), name.getAttribute(), e); :}

    /* Type is an array, and no assignment */
    |ID:type LSQBRACE RSQBRACE ID:name SEMI
        {: RESULT = new Field(type.getLineNum(), type.getAttribute() + "[]", name.getAttribute(), null); :}

    /* Type is an array, and is an assignment */
    | ID:type LSQBRACE RSQBRACE ID:name ASSIGN expr:e SEMI
        {: RESULT = new Field(type.getLineNum(), type.getAttribute() + "[]", name.getAttribute(), e); :}
    ;

formal_list
    ::=
    /* empty formal list */
        {: RESULT = new FormalList(getCurrLineNum()); :}

    /* single item formal list */
    | formal:f
        {: RESULT = (FormalList)(new FormalList(f.getLineNum())).addElement(f); :}

    /* several items in formal list*/
    | formal_list:fl COMMA formal:f
        {: RESULT = (FormalList)fl.addElement(f); :}
    ;

formal
    ::=
    /*array type*/
    ID:type LSQBRACE RSQBRACE ID:name
        {: RESULT = new Formal(type.getLineNum(), type.getAttribute() + "[]", name.getAttribute()); :}

    /*not array type */
    | ID:type ID:name
        {: RESULT = new Formal(type.getLineNum(), type.getAttribute(), name.getAttribute()); :}

    ;

stmt_list
    ::=
    /* empty statement list */
        {: RESULT = new StmtList(getCurrLineNum()); :}

    /* single item statement list */
    | stmt:s
        {: RESULT = (StmtList)(new StmtList(s.getLineNum())).addElement(s); :}

    /* several items in statement list*/
    | stmt_list:sl stmt:s
        {: RESULT = (StmtList) sl.addElement(s); :}
    ;

stmt
    ::=
    expr_stmt:es
        {: RESULT = es; :}
    | decl_stmt:ds
        {: RESULT = ds; :}
    | if_stmt:is
        {: RESULT = is; :}
    | while_stmt:ws
        {: RESULT = ws; :}
    | for_stmt:fs
        {: RESULT = fs; :}
    | break_stmt:bs
        {: RESULT = bs; :}
    | return_stmt:rs
        {: RESULT = rs; :}
    | block_stmt:bks
        {: RESULT = bks; :}
    ;

expr_stmt
    ::=
    expr:e SEMI
        {: RESULT = new ExprStmt(e.getLineNum(), e);:}
    ;

decl_stmt
    ::=
     /*array type*/
    ID:type LSQBRACE RSQBRACE ID:name ASSIGN expr:e SEMI
        {: RESULT = new DeclStmt(type.getLineNum(), type.getAttribute() + "[]", name.getAttribute(), e); :}

    /*not array type */
    | ID:type ID:name ASSIGN expr:e SEMI
        {: RESULT = new DeclStmt(type.getLineNum(), type.getAttribute(), name.getAttribute(), e); :}
    ;

if_stmt
    ::=
    /*no else*/
    IF LPAREN expr:cond RPAREN stmt:then_stmt
        {: RESULT = new IfStmt(cond.getLineNum(), cond, then_stmt, null); :}
    /*with else*/
    | IF LPAREN expr:cond RPAREN stmt:then_stmt ELSE stmt:else_stmt
        {: RESULT = new IfStmt(cond.getLineNum(), cond, then_stmt, else_stmt); :}
    ;

while_stmt
    ::=
    WHILE LPAREN expr:cond RPAREN stmt:body
        {: RESULT = new WhileStmt(cond.getLineNum(), cond, body); :}
    ;

for_stmt
    ::=
    /*no statements*/
    FOR LPAREN SEMI SEMI RPAREN stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(),null,null,null,body); :}
    /*just an initialization*/
    | FOR LPAREN expr:init SEMI SEMI RPAREN stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(),init,null,null,body); :}
    /*just the predicate*/
    | FOR LPAREN SEMI expr:pred SEMI RPAREN stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(),null,pred,null,body); :}
    /*predicate and initialization*/
    | FOR LPAREN expr:init SEMI expr:pred SEMI RPAREN stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(),init,pred,null,body); :}
    /*just the update*/
    | FOR LPAREN SEMI SEMI expr:update RPAREN stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(),null,null,update,body); :}
    /*init and update*/
    | FOR LPAREN expr:init SEMI SEMI expr:update RPAREN stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(),init,null,update,body); :}
    /*predicate and update*/
    | FOR LPAREN SEMI expr:pred SEMI expr:update RPAREN stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(),null,pred,update,body); :}
    /*everything*/
    | FOR LPAREN expr:init SEMI expr:pred SEMI expr:update RPAREN stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(),init,pred,update,body); :}
    ;

break_stmt
    ::=
    BREAK SEMI
        {: RESULT = new BreakStmt(getCurrLineNum()); :}
    ;

return_stmt
    ::=
    RETURN expr:e SEMI
        {: RESULT = new ReturnStmt(getCurrLineNum(),e); :}
    | RETURN SEMI
        {: RESULT = new ReturnStmt(getCurrLineNum(), null); :}
    ;

block_stmt
    ::=
    LBRACE stmt_list:sl RBRACE
        {: RESULT = new BlockStmt(getCurrLineNum(), sl); :}
    ;

expr_list
    ::=
    /* empty expr list */
        {: RESULT = new ExprList(getCurrLineNum()); :}

    /* single item expr list */
    | expr:e
        {: RESULT = (ExprList)(new ExprList(e.getLineNum())).addElement(e); :}

    /* several items in expr list*/
    | expr_list:el COMMA expr:e
        {: RESULT = (ExprList)el.addElement(e); :}
    ;

expr
    ::=
    assign_expr:ae
        {: RESULT = ae; :}
    | array_assign_expr:aae
        {: RESULT = aae; :}
    | dispatch_expr:de
        {: RESULT = de; :}
    | new_expr:ne
        {: RESULT = ne; :}
    | new_array_expr:nae
        {: RESULT = nae; :}
    | instance_of_expr:ioe
        {: RESULT = ioe; :}
    | cast_expr:ce
        {: RESULT = ce; :}
    | binary_expr:be
        {: RESULT = be; :}
    | unary_expr:ue
        {: RESULT = ue; :}
    | const_expr:conste
        {: RESULT = conste; :}
    | var_expr:ve
        {: RESULT = ve; :}
    | LPAREN expr:e RPAREN
        {: RESULT = e; :}
    | array_expr:aye
        {: RESULT = aye; :}
    ;

assign_expr
    ::=
    /* no reference */
    ID:name ASSIGN expr:e
        {: RESULT = new AssignExpr(name.getLineNum(), null, name.getAttribute(), e); :}
    /* reference */
    | ID:ref DOT ID:name ASSIGN expr:e
        {: RESULT = new AssignExpr(name.getLineNum(),  ref.getAttribute(), name.getAttribute(), e); :}
    ;

array_assign_expr
    ::=
    /*no reference*/
    ID:name LSQBRACE expr:index RSQBRACE ASSIGN expr:e
        {: RESULT = new ArrayAssignExpr(name.getLineNum(), null, name.getAttribute(), index, e); :}
    /*with reference*/
    | ID:ref DOT ID:name LSQBRACE expr:index RSQBRACE ASSIGN expr:e
        {: RESULT = new ArrayAssignExpr(name.getLineNum(), ref.getAttribute(), name.getAttribute(), index, e); :}
    ;

dispatch_expr
    ::=
    /*method called from this object*/
    ID:name LPAREN expr_list:el RPAREN
        {: RESULT = new DispatchExpr(el.getLineNum(), null, name.getAttribute(), el); :}
    /*method called on other object*/
    | expr:e DOT ID:name LPAREN expr_list:el RPAREN
        {: RESULT = new DispatchExpr(el.getLineNum(), e, name.getAttribute(), el); :}
    /*method called from this object*/
    | ID:ref DOT ID:name LPAREN expr_list:el RPAREN
        {: RESULT = new DispatchExpr(el.getLineNum(), new VarExpr(ref.getLineNum(),null,ref.getAttribute()), name.getAttribute(), el); :}
    ;

new_expr
    ::=
    NEW ID:type LPAREN RPAREN
        {: RESULT = new NewExpr(type.getLineNum(), type.getAttribute()); :}
    ;

new_array_expr
    ::=
    NEW ID:type LSQBRACE expr:e RSQBRACE
        {: RESULT = new NewArrayExpr(type.getLineNum(), type.getAttribute(), e); :}
    ;

instance_of_expr
    ::=
    /*no array*/
    expr:e INSTANCEOF ID:type
        {: RESULT = new InstanceofExpr(e.getLineNum(), e, type.getAttribute()); :}
    /*array*/
    | expr:e INSTANCEOF ID:type LSQBRACE RSQBRACE
        {: RESULT = new InstanceofExpr(e.getLineNum(), e, type.getAttribute()+ "[]"); :}
    ;

cast_expr
    ::=
    /*no array*/
    LPAREN ID:type RPAREN LPAREN expr:e RPAREN
        {: RESULT = new CastExpr(type.getLineNum(), type.getAttribute(), e); :}
    /*array*/
    | LPAREN ID:type LSQBRACE RSQBRACE RPAREN LPAREN expr:e RPAREN
        {: RESULT = new CastExpr(type.getLineNum(), type.getAttribute()+"[]", e); :}
    ;

binary_expr
    ::=
    binary_arith_expr:bae
        {: RESULT = bae; :}
    | binary_comp_expr:bce
        {: RESULT = bce; :}
    | binary_logic_expr:ble
        {: RESULT = ble; :}
    ;

unary_expr
    ::=
    unary_neg_expr:une
        {: RESULT = une; :}
    | unary_not_expr:unote
        {: RESULT = unote; :}
    | unary_incr_expr:uie
        {: RESULT = uie; :}
    | unary_decr_expr:ude
        {: RESULT = ude; :}
    ;

const_expr
    ::=
    INT_CONST:num
        {: RESULT = new ConstIntExpr(num.getLineNum(), num.getAttribute()); :}
    | BOOLEAN_CONST:bool
        {: RESULT = new ConstBooleanExpr(bool.getLineNum(), bool.getAttribute()); :}
    | STRING_CONST:str
        {: RESULT = new ConstStringExpr(str.getLineNum(), str.getAttribute()); :}
    ;

binary_arith_expr
    ::=
    expr:e1 PLUS expr:e2
        {: RESULT = new BinaryArithPlusExpr(e1.getLineNum(), e1, e2); :}
    | expr:e1 MINUS expr:e2
        {: RESULT = new BinaryArithMinusExpr(e1.getLineNum(), e1, e2); :}
    | expr:e1 TIMES expr:e2
        {: RESULT = new BinaryArithTimesExpr(e1.getLineNum(), e1, e2); :}
    | expr:e1 DIVIDE expr:e2
        {: RESULT = new BinaryArithDivideExpr(e1.getLineNum(), e1, e2); :}
    | expr:e1 MODULUS expr:e2
        {: RESULT = new BinaryArithModulusExpr(e1.getLineNum(), e1, e2); :}
    ;

binary_comp_expr
    ::=
    expr:e1 EQ expr:e2
        {: RESULT = new BinaryCompEqExpr(e1.getLineNum(), e1, e2); :}
    | expr:e1 NE expr:e2
        {: RESULT = new BinaryCompNeExpr(e1.getLineNum(), e1, e2); :}
    | expr:e1 LT expr:e2
        {: RESULT = new BinaryCompLtExpr(e1.getLineNum(), e1, e2); :}
    | expr:e1 LEQ expr:e2
        {: RESULT = new BinaryCompLeqExpr(e1.getLineNum(), e1, e2); :}
    | expr:e1 GT expr:e2
        {: RESULT = new BinaryCompGtExpr(e1.getLineNum(), e1, e2); :}
    | expr:e1 GEQ expr:e2
        {: RESULT = new BinaryCompGeqExpr(e1.getLineNum(), e1, e2); :}
    ;

binary_logic_expr
    ::=
    expr:e1 AND expr:e2
        {: RESULT = new BinaryLogicAndExpr(e1.getLineNum(), e1, e2); :}
    | expr:e1 OR expr:e2
        {: RESULT = new BinaryLogicOrExpr(e1.getLineNum(), e1, e2); :}
    ;

unary_neg_expr
    ::=
    MINUS expr:e
        {: RESULT = new UnaryNegExpr(e.getLineNum(), e); :}
    ;

unary_not_expr
    ::=
    NOT expr:e
        {: RESULT = new UnaryNotExpr(e.getLineNum(), e); :}
    ;

unary_incr_expr
    ::=
    /* prefix */
    INCR expr:e
        {: RESULT = new UnaryIncrExpr(e.getLineNum(), e, false); :}
    /*postfix*/
    | expr:e INCR
        {: RESULT = new UnaryIncrExpr(e.getLineNum(), e, true); :}
    ;

unary_decr_expr
    ::=
    /* prefix */
    DECR expr:e
        {: RESULT = new UnaryDecrExpr(e.getLineNum(), e, false); :}
    /*postfix*/
    | expr:e DECR
        {: RESULT = new UnaryDecrExpr(e.getLineNum(), e, true); :}
    ;

var_expr
    ::=
    /*no reference*/
    ID:name
        {: RESULT = new VarExpr(name.getLineNum(), null, name.getAttribute() ); :}
    /* with reference*/
    | ID:ref DOT ID:name
        {: RESULT = new VarExpr(ref.getLineNum(), new VarExpr(ref.getLineNum(), null, ref.getAttribute()) , name.getAttribute()); :}
    ;

array_expr
    ::=
    /*When there is no reference*/
    ID:name LSQBRACE expr:index RSQBRACE
        {: RESULT = new ArrayExpr(name.getLineNum(), null, name.getAttribute(), index); :}
    /*When there is a reference*/
    | ID:ref DOT ID:name LSQBRACE expr:index RSQBRACE
        {: RESULT = new ArrayExpr(name.getLineNum(), new VarExpr(ref.getLineNum(), null, ref.getAttribute()), name.getAttribute(), index); :}
    ;




