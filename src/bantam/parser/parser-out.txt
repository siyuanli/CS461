Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "LEX_ERROR" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #230
  between stmt_list ::= (*) 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt 
  under symbol IF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #230
  between stmt_list ::= (*) 
  and     while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt 
  under symbol WHILE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #230
  between stmt_list ::= (*) 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt 
  under symbol FOR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #230
  between stmt_list ::= (*) 
  and     break_stmt ::= (*) BREAK SEMI 
  under symbol BREAK
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #230
  between stmt_list ::= (*) 
  and     return_stmt ::= (*) RETURN expr 
  under symbol RETURN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #230
  between stmt_list ::= (*) 
  and     block_stmt ::= (*) LBRACE stmt_list RBRACE 
  under symbol LBRACE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #230
  between stmt_list ::= (*) 
  and     assign_expr ::= (*) ID DOT ID ASSIGN expr 
  and     decl_stmt ::= (*) ID ID ASSIGN expr SEMI 
  and     array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     dispatch_expr ::= (*) ID LPAREN expr_list RPAREN 
  and     var_expr ::= (*) ID DOT ID 
  and     var_expr ::= (*) ID 
  and     array_expr ::= (*) ID LSQBRACE expr RSQBRACE 
  and     assign_expr ::= (*) ID ASSIGN expr 
  and     decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
  and     array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #230
  between stmt_list ::= (*) 
  and     const_expr ::= (*) INT_CONST 
  under symbol INT_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #230
  between stmt_list ::= (*) 
  and     const_expr ::= (*) BOOLEAN_CONST 
  under symbol BOOLEAN_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #230
  between stmt_list ::= (*) 
  and     const_expr ::= (*) STRING_CONST 
  under symbol STRING_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #9
  between member_list ::= (*) 
  and     field ::= (*) ID ID ASSIGN expr SEMI 
  and     method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
  and     field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
  and     field ::= (*) ID ID SEMI 
  and     field ::= (*) ID LSQBRACE RSQBRACE ID SEMI 
  and     method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #156
  between stmt_list ::= (*) 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt 
  under symbol IF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #156
  between stmt_list ::= (*) 
  and     while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt 
  under symbol WHILE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #156
  between stmt_list ::= (*) 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt 
  under symbol FOR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #156
  between stmt_list ::= (*) 
  and     break_stmt ::= (*) BREAK SEMI 
  under symbol BREAK
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #156
  between stmt_list ::= (*) 
  and     return_stmt ::= (*) RETURN expr 
  under symbol RETURN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #156
  between stmt_list ::= (*) 
  and     block_stmt ::= (*) LBRACE stmt_list RBRACE 
  under symbol LBRACE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #156
  between stmt_list ::= (*) 
  and     assign_expr ::= (*) ID DOT ID ASSIGN expr 
  and     decl_stmt ::= (*) ID ID ASSIGN expr SEMI 
  and     array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     dispatch_expr ::= (*) ID LPAREN expr_list RPAREN 
  and     var_expr ::= (*) ID DOT ID 
  and     var_expr ::= (*) ID 
  and     array_expr ::= (*) ID LSQBRACE expr RSQBRACE 
  and     assign_expr ::= (*) ID ASSIGN expr 
  and     decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
  and     array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #156
  between stmt_list ::= (*) 
  and     const_expr ::= (*) INT_CONST 
  under symbol INT_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #156
  between stmt_list ::= (*) 
  and     const_expr ::= (*) BOOLEAN_CONST 
  under symbol BOOLEAN_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #156
  between stmt_list ::= (*) 
  and     const_expr ::= (*) STRING_CONST 
  under symbol STRING_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #142
  between stmt_list ::= (*) 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt 
  under symbol IF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #142
  between stmt_list ::= (*) 
  and     while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt 
  under symbol WHILE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #142
  between stmt_list ::= (*) 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt 
  under symbol FOR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #142
  between stmt_list ::= (*) 
  and     break_stmt ::= (*) BREAK SEMI 
  under symbol BREAK
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #142
  between stmt_list ::= (*) 
  and     return_stmt ::= (*) RETURN expr 
  under symbol RETURN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #142
  between stmt_list ::= (*) 
  and     block_stmt ::= (*) LBRACE stmt_list RBRACE 
  under symbol LBRACE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #142
  between stmt_list ::= (*) 
  and     assign_expr ::= (*) ID DOT ID ASSIGN expr 
  and     decl_stmt ::= (*) ID ID ASSIGN expr SEMI 
  and     array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     dispatch_expr ::= (*) ID LPAREN expr_list RPAREN 
  and     var_expr ::= (*) ID DOT ID 
  and     var_expr ::= (*) ID 
  and     array_expr ::= (*) ID LSQBRACE expr RSQBRACE 
  and     assign_expr ::= (*) ID ASSIGN expr 
  and     decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
  and     array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #142
  between stmt_list ::= (*) 
  and     const_expr ::= (*) INT_CONST 
  under symbol INT_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #142
  between stmt_list ::= (*) 
  and     const_expr ::= (*) BOOLEAN_CONST 
  under symbol BOOLEAN_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #142
  between stmt_list ::= (*) 
  and     const_expr ::= (*) STRING_CONST 
  under symbol STRING_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #6
  between member_list ::= (*) 
  and     field ::= (*) ID ID ASSIGN expr SEMI 
  and     method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
  and     field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
  and     field ::= (*) ID ID SEMI 
  and     field ::= (*) ID LSQBRACE RSQBRACE ID SEMI 
  and     method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #38
  between var_expr ::= ID (*) 
  and     array_expr ::= ID (*) ID LSQBRACE expr RSQBRACE 
  under symbol ID
  Resolved in favor of shifting.

  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]LEX_ERROR [3]CLASS [4]EXTENDS 
[5]IF [6]ELSE [7]WHILE [8]FOR [9]BREAK 
[10]NEW [11]RETURN [12]INSTANCEOF [13]PLUS [14]MINUS 
[15]TIMES [16]DIVIDE [17]MODULUS [18]NOT [19]AND 
[20]OR [21]EQ [22]NE [23]LT [24]LEQ 
[25]GT [26]GEQ [27]ASSIGN [28]INCR [29]DECR 
[30]LPAREN [31]RPAREN [32]LBRACE [33]RBRACE [34]LSQBRACE 
[35]RSQBRACE [36]SEMI [37]COMMA [38]DOT [39]ID 
[40]INT_CONST [41]BOOLEAN_CONST [42]STRING_CONST 

===== Non terminals =====
[0]$START [1]program [2]class_list [3]class [4]member_list 
[5]member [6]method [7]field [8]formal_list [9]formal 
[10]stmt_list [11]stmt [12]expr_stmt [13]decl_stmt [14]if_stmt 
[15]while_stmt [16]for_stmt [17]break_stmt [18]return_stmt [19]block_stmt 
[20]expr [21]assign_expr [22]dispatch_expr [23]expr_list [24]new_expr 
[25]instance_of_expr [26]cast_expr [27]binary_expr [28]unary_expr [29]const_expr 
[30]binary_arith_expr [31]binary_comp_expr [32]binary_logic_expr [33]unary_neg_expr [34]unary_not_expr 
[35]unary_incr_expr [36]unary_decr_expr [37]var_expr [38]array_expr [39]array_assign_expr 


===== Productions =====
[0] program ::= class_list 
[1] $START ::= program EOF 
[2] class_list ::= class 
[3] class_list ::= class_list class 
[4] class ::= CLASS ID LBRACE member_list RBRACE 
[5] class ::= CLASS ID EXTENDS ID LBRACE member_list RBRACE 
[6] member_list ::= 
[7] member_list ::= member 
[8] member_list ::= member_list member 
[9] member ::= method 
[10] member ::= field 
[11] method ::= ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
[12] method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
[13] field ::= ID ID SEMI 
[14] field ::= ID ID ASSIGN expr SEMI 
[15] field ::= ID LSQBRACE RSQBRACE ID SEMI 
[16] field ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
[17] formal_list ::= 
[18] formal_list ::= formal 
[19] formal_list ::= formal_list COMMA formal 
[20] formal ::= ID LSQBRACE RSQBRACE ID 
[21] formal ::= ID ID 
[22] stmt_list ::= 
[23] stmt_list ::= stmt 
[24] stmt_list ::= stmt_list stmt 
[25] stmt ::= expr_stmt 
[26] stmt ::= decl_stmt 
[27] stmt ::= if_stmt 
[28] stmt ::= while_stmt 
[29] stmt ::= for_stmt 
[30] stmt ::= break_stmt 
[31] stmt ::= return_stmt 
[32] stmt ::= block_stmt 
[33] expr_stmt ::= expr SEMI 
[34] decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
[35] decl_stmt ::= ID ID ASSIGN expr SEMI 
[36] if_stmt ::= IF LPAREN expr RPAREN stmt 
[37] if_stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
[38] while_stmt ::= WHILE LPAREN expr RPAREN stmt 
[39] for_stmt ::= FOR LPAREN SEMI SEMI RPAREN stmt 
[40] for_stmt ::= FOR LPAREN expr SEMI SEMI RPAREN stmt 
[41] for_stmt ::= FOR LPAREN SEMI expr SEMI RPAREN stmt 
[42] for_stmt ::= FOR LPAREN expr SEMI expr SEMI RPAREN stmt 
[43] for_stmt ::= FOR LPAREN SEMI SEMI expr RPAREN stmt 
[44] for_stmt ::= FOR LPAREN expr SEMI SEMI expr RPAREN stmt 
[45] for_stmt ::= FOR LPAREN SEMI expr SEMI expr RPAREN stmt 
[46] for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt 
[47] break_stmt ::= BREAK SEMI 
[48] return_stmt ::= RETURN expr 
[49] block_stmt ::= LBRACE stmt_list RBRACE 
[50] expr ::= assign_expr 
[51] expr ::= dispatch_expr 
[52] expr ::= new_expr 
[53] expr ::= instance_of_expr 
[54] expr ::= cast_expr 
[55] expr ::= binary_expr 
[56] expr ::= unary_expr 
[57] expr ::= const_expr 
[58] expr ::= var_expr 
[59] expr ::= LPAREN expr RPAREN 
[60] assign_expr ::= ID ASSIGN expr 
[61] assign_expr ::= ID DOT ID ASSIGN expr 
[62] assign_expr ::= array_assign_expr 
[63] dispatch_expr ::= ID LPAREN expr_list RPAREN 
[64] dispatch_expr ::= expr DOT ID LPAREN expr_list RPAREN 
[65] new_expr ::= NEW ID LPAREN RPAREN 
[66] new_expr ::= NEW ID LSQBRACE expr RSQBRACE 
[67] instance_of_expr ::= expr INSTANCEOF ID 
[68] instance_of_expr ::= expr INSTANCEOF ID LSQBRACE RSQBRACE 
[69] cast_expr ::= LPAREN ID RPAREN LPAREN expr RPAREN 
[70] cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN 
[71] binary_expr ::= binary_arith_expr 
[72] binary_expr ::= binary_comp_expr 
[73] binary_expr ::= binary_logic_expr 
[74] unary_expr ::= unary_neg_expr 
[75] unary_expr ::= unary_not_expr 
[76] unary_expr ::= unary_incr_expr 
[77] unary_expr ::= unary_decr_expr 
[78] const_expr ::= INT_CONST 
[79] const_expr ::= BOOLEAN_CONST 
[80] const_expr ::= STRING_CONST 
[81] binary_arith_expr ::= expr PLUS expr 
[82] binary_arith_expr ::= expr MINUS expr 
[83] binary_arith_expr ::= expr TIMES expr 
[84] binary_arith_expr ::= expr DIVIDE expr 
[85] binary_arith_expr ::= expr MODULUS expr 
[86] binary_comp_expr ::= expr EQ expr 
[87] binary_comp_expr ::= expr NE expr 
[88] binary_comp_expr ::= expr LT expr 
[89] binary_comp_expr ::= expr LEQ expr 
[90] binary_comp_expr ::= expr GT expr 
[91] binary_comp_expr ::= expr GEQ expr 
[92] binary_logic_expr ::= expr AND expr 
[93] binary_logic_expr ::= expr OR expr 
[94] unary_neg_expr ::= MINUS expr 
[95] unary_not_expr ::= NOT expr 
[96] unary_incr_expr ::= INCR expr 
[97] unary_incr_expr ::= expr INCR 
[98] unary_decr_expr ::= DECR expr 
[99] unary_decr_expr ::= expr DECR 
[100] var_expr ::= ID DOT ID 
[101] var_expr ::= ID 
[102] var_expr ::= array_expr 
[103] array_expr ::= ID LSQBRACE expr RSQBRACE 
[104] array_expr ::= ID ID LSQBRACE expr RSQBRACE 
[105] array_assign_expr ::= ID LSQBRACE expr RSQBRACE ASSIGN expr 
[106] array_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [class ::= (*) CLASS ID EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class_list ::= (*) class , {EOF CLASS }]
  [class ::= (*) CLASS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [$START ::= (*) program EOF , {EOF }]
  [class_list ::= (*) class_list class , {EOF CLASS }]
  [program ::= (*) class_list , {EOF }]
}
transition on CLASS to state [4]
transition on class to state [3]
transition on program to state [2]
transition on class_list to state [1]

-------------------
lalr_state [1]: {
  [class ::= (*) CLASS ID EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class ::= (*) CLASS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class_list ::= class_list (*) class , {EOF CLASS }]
  [program ::= class_list (*) , {EOF }]
}
transition on CLASS to state [4]
transition on class to state [236]

-------------------
lalr_state [2]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [235]

-------------------
lalr_state [3]: {
  [class_list ::= class (*) , {EOF CLASS }]
}

-------------------
lalr_state [4]: {
  [class ::= CLASS (*) ID EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class ::= CLASS (*) ID LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on ID to state [5]

-------------------
lalr_state [5]: {
  [class ::= CLASS ID (*) LBRACE member_list RBRACE , {EOF CLASS }]
  [class ::= CLASS ID (*) EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on EXTENDS to state [7]
transition on LBRACE to state [6]

-------------------
lalr_state [6]: {
  [field ::= (*) ID ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member_list ::= (*) member_list member , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= (*) ID ID SEMI , {RBRACE ID }]
  [class ::= CLASS ID LBRACE (*) member_list RBRACE , {EOF CLASS }]
  [member ::= (*) field , {RBRACE ID }]
  [member_list ::= (*) member , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member ::= (*) method , {RBRACE ID }]
  [member_list ::= (*) , {RBRACE ID }]
}
transition on member to state [14]
transition on method to state [13]
transition on field to state [12]
transition on member_list to state [233]
transition on ID to state [10]

-------------------
lalr_state [7]: {
  [class ::= CLASS ID EXTENDS (*) ID LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on ID to state [8]

-------------------
lalr_state [8]: {
  [class ::= CLASS ID EXTENDS ID (*) LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [9]

-------------------
lalr_state [9]: {
  [class ::= CLASS ID EXTENDS ID LBRACE (*) member_list RBRACE , {EOF CLASS }]
  [field ::= (*) ID ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member_list ::= (*) member_list member , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= (*) ID ID SEMI , {RBRACE ID }]
  [member ::= (*) field , {RBRACE ID }]
  [member_list ::= (*) member , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member ::= (*) method , {RBRACE ID }]
  [member_list ::= (*) , {RBRACE ID }]
}
transition on member to state [14]
transition on method to state [13]
transition on field to state [12]
transition on member_list to state [11]
transition on ID to state [10]

-------------------
lalr_state [10]: {
  [field ::= ID (*) LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= ID (*) ID SEMI , {RBRACE ID }]
  [field ::= ID (*) LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= ID (*) LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID (*) ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= ID (*) ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on LSQBRACE to state [18]
transition on ID to state [17]

-------------------
lalr_state [11]: {
  [field ::= (*) ID ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member_list ::= member_list (*) member , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= (*) ID ID SEMI , {RBRACE ID }]
  [member ::= (*) field , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member ::= (*) method , {RBRACE ID }]
  [class ::= CLASS ID EXTENDS ID LBRACE member_list (*) RBRACE , {EOF CLASS }]
}
transition on member to state [16]
transition on method to state [13]
transition on field to state [12]
transition on RBRACE to state [15]
transition on ID to state [10]

-------------------
lalr_state [12]: {
  [member ::= field (*) , {RBRACE ID }]
}

-------------------
lalr_state [13]: {
  [member ::= method (*) , {RBRACE ID }]
}

-------------------
lalr_state [14]: {
  [member_list ::= member (*) , {RBRACE ID }]
}

-------------------
lalr_state [15]: {
  [class ::= CLASS ID EXTENDS ID LBRACE member_list RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [16]: {
  [member_list ::= member_list member (*) , {RBRACE ID }]
}

-------------------
lalr_state [17]: {
  [field ::= ID ID (*) SEMI , {RBRACE ID }]
  [field ::= ID ID (*) ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= ID ID (*) LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on ASSIGN to state [225]
transition on LPAREN to state [224]
transition on SEMI to state [223]

-------------------
lalr_state [18]: {
  [field ::= ID LSQBRACE (*) RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= ID LSQBRACE (*) RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID LSQBRACE (*) RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
}
transition on RSQBRACE to state [19]

-------------------
lalr_state [19]: {
  [field ::= ID LSQBRACE RSQBRACE (*) ID SEMI , {RBRACE ID }]
  [method ::= ID LSQBRACE RSQBRACE (*) ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID LSQBRACE RSQBRACE (*) ID ASSIGN expr SEMI , {RBRACE ID }]
}
transition on ID to state [20]

-------------------
lalr_state [20]: {
  [field ::= ID LSQBRACE RSQBRACE ID (*) SEMI , {RBRACE ID }]
  [method ::= ID LSQBRACE RSQBRACE ID (*) LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID LSQBRACE RSQBRACE ID (*) ASSIGN expr SEMI , {RBRACE ID }]
}
transition on ASSIGN to state [23]
transition on LPAREN to state [22]
transition on SEMI to state [21]

-------------------
lalr_state [21]: {
  [field ::= ID LSQBRACE RSQBRACE ID SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [22]: {
  [formal_list ::= (*) formal_list COMMA formal , {RPAREN COMMA }]
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN (*) formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [formal ::= (*) ID ID , {RPAREN COMMA }]
  [formal_list ::= (*) formal , {RPAREN COMMA }]
  [formal ::= (*) ID LSQBRACE RSQBRACE ID , {RPAREN COMMA }]
  [formal_list ::= (*) , {RPAREN COMMA }]
}
transition on formal to state [139]
transition on formal_list to state [138]
transition on ID to state [137]

-------------------
lalr_state [23]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [field ::= ID LSQBRACE RSQBRACE ID ASSIGN (*) expr SEMI , {RBRACE ID }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [28]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [24]: {
  [const_expr ::= STRING_CONST (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [25]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= INCR (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [136]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [26]: {
  [expr ::= cast_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [27]: {
  [expr ::= assign_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [28]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [field ::= ID LSQBRACE RSQBRACE ID ASSIGN expr (*) SEMI , {RBRACE ID }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on SEMI to state [135]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [29]: {
  [unary_expr ::= unary_decr_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [30]: {
  [expr ::= instance_of_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [31]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= NOT (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [134]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [32]: {
  [expr ::= new_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [33]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= DECR (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [133]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [34]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= LPAREN (*) expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= LPAREN (*) ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= LPAREN (*) ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [121]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [120]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [35]: {
  [const_expr ::= BOOLEAN_CONST (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [36]: {
  [expr ::= var_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [37]: {
  [assign_expr ::= array_assign_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [38]: {
  [dispatch_expr ::= ID (*) LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= ID (*) ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= ID (*) LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= ID (*) DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= ID (*) DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= ID (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= ID (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on DOT to state [101]
transition on ASSIGN to state [100]
transition on LPAREN to state [99]
transition on LSQBRACE to state [98]
transition on ID to state [97]

-------------------
lalr_state [39]: {
  [expr ::= unary_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [40]: {
  [const_expr ::= INT_CONST (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [41]: {
  [binary_expr ::= binary_comp_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [42]: {
  [unary_expr ::= unary_incr_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [43]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= MINUS (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [96]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [44]: {
  [unary_expr ::= unary_neg_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [45]: {
  [unary_expr ::= unary_not_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [46]: {
  [expr ::= dispatch_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [47]: {
  [binary_expr ::= binary_arith_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [48]: {
  [new_expr ::= NEW (*) ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= NEW (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ID to state [53]

-------------------
lalr_state [49]: {
  [var_expr ::= array_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [50]: {
  [expr ::= const_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [51]: {
  [binary_expr ::= binary_logic_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [52]: {
  [expr ::= binary_expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [53]: {
  [new_expr ::= NEW ID (*) LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= NEW ID (*) LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LPAREN to state [55]
transition on LSQBRACE to state [54]

-------------------
lalr_state [54]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= NEW ID LSQBRACE (*) expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [57]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [55]: {
  [new_expr ::= NEW ID LPAREN (*) RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on RPAREN to state [56]

-------------------
lalr_state [56]: {
  [new_expr ::= NEW ID LPAREN RPAREN (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [57]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= NEW ID LSQBRACE expr (*) RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on RSQBRACE to state [69]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [58]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr TIMES (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [95]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [59]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr GEQ (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [94]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [60]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr AND (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [93]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [61]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr LT (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [92]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [62]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr NE (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [91]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [63]: {
  [unary_incr_expr ::= expr INCR (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [64]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr PLUS (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [90]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [65]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr OR (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [89]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [66]: {
  [unary_decr_expr ::= expr DECR (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [67]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr GT (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [88]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [68]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr DIVIDE (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [87]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [69]: {
  [new_expr ::= NEW ID LSQBRACE expr RSQBRACE (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [70]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr MINUS (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [86]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [71]: {
  [dispatch_expr ::= expr DOT (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ID to state [82]

-------------------
lalr_state [72]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr EQ (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [81]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [73]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr LEQ (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [80]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [74]: {
  [instance_of_expr ::= expr INSTANCEOF (*) ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr INSTANCEOF (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ID to state [77]

-------------------
lalr_state [75]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr MODULUS (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [76]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [76]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr MODULUS expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [77]: {
  [instance_of_expr ::= expr INSTANCEOF ID (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr INSTANCEOF ID (*) LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LSQBRACE to state [78]

-------------------
lalr_state [78]: {
  [instance_of_expr ::= expr INSTANCEOF ID LSQBRACE (*) RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on RSQBRACE to state [79]

-------------------
lalr_state [79]: {
  [instance_of_expr ::= expr INSTANCEOF ID LSQBRACE RSQBRACE (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [80]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr LEQ expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [81]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr EQ expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [82]: {
  [dispatch_expr ::= expr DOT ID (*) LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LPAREN to state [83]

-------------------
lalr_state [83]: {
  [dispatch_expr ::= expr DOT ID LPAREN (*) expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on expr_list to state [84]

-------------------
lalr_state [84]: {
  [dispatch_expr ::= expr DOT ID LPAREN expr_list (*) RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on RPAREN to state [85]

-------------------
lalr_state [85]: {
  [dispatch_expr ::= expr DOT ID LPAREN expr_list RPAREN (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [86]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr MINUS expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [87]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr DIVIDE expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [88]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr GT expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [89]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr OR expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [90]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr PLUS expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [91]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr NE expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [92]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr LT expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [93]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr AND expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [94]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr GEQ expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [95]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr TIMES expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [96]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= MINUS expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [97]: {
  [array_expr ::= ID ID (*) LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LSQBRACE to state [117]

-------------------
lalr_state [98]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= ID LSQBRACE (*) expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [113]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [99]: {
  [dispatch_expr ::= ID LPAREN (*) expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on expr_list to state [111]

-------------------
lalr_state [100]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= ID ASSIGN (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [110]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [101]: {
  [array_assign_expr ::= ID DOT (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= ID DOT (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= ID DOT (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ID to state [102]

-------------------
lalr_state [102]: {
  [array_assign_expr ::= ID DOT ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= ID DOT ID (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= ID DOT ID (*) ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ASSIGN to state [104]
transition on LSQBRACE to state [103]

-------------------
lalr_state [103]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= ID DOT ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [106]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [104]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= ID DOT ID ASSIGN (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [105]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [105]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= ID DOT ID ASSIGN expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [106]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= ID DOT ID LSQBRACE expr (*) RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on RSQBRACE to state [107]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [107]: {
  [array_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE (*) ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ASSIGN to state [108]

-------------------
lalr_state [108]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE ASSIGN (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [109]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [109]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [110]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= ID ASSIGN expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [111]: {
  [dispatch_expr ::= ID LPAREN expr_list (*) RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on RPAREN to state [112]

-------------------
lalr_state [112]: {
  [dispatch_expr ::= ID LPAREN expr_list RPAREN (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [113]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= ID LSQBRACE expr (*) RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= ID LSQBRACE expr (*) RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on RSQBRACE to state [114]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [114]: {
  [array_expr ::= ID LSQBRACE expr RSQBRACE (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= ID LSQBRACE expr RSQBRACE (*) ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ASSIGN to state [115]

-------------------
lalr_state [115]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= ID LSQBRACE expr RSQBRACE ASSIGN (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [116]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [116]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= ID LSQBRACE expr RSQBRACE ASSIGN expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [117]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= ID ID LSQBRACE (*) expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [118]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [118]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= ID ID LSQBRACE expr (*) RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on RSQBRACE to state [119]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [119]: {
  [array_expr ::= ID ID LSQBRACE expr RSQBRACE (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [120]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= LPAREN expr (*) RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on RPAREN to state [132]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [121]: {
  [dispatch_expr ::= ID (*) LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= ID (*) ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= ID (*) DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= LPAREN ID (*) LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= ID (*) DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= ID (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= ID (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= LPAREN ID (*) RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on DOT to state [101]
transition on ASSIGN to state [100]
transition on LPAREN to state [99]
transition on LSQBRACE to state [123]
transition on RPAREN to state [122]
transition on ID to state [97]

-------------------
lalr_state [122]: {
  [cast_expr ::= LPAREN ID RPAREN (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LPAREN to state [129]

-------------------
lalr_state [123]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= LPAREN ID LSQBRACE (*) RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= ID LSQBRACE (*) expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on RSQBRACE to state [124]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [113]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [124]: {
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE (*) RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on RPAREN to state [125]

-------------------
lalr_state [125]: {
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LPAREN to state [126]

-------------------
lalr_state [126]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN (*) expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [127]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [127]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr (*) RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on RPAREN to state [128]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [128]: {
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [129]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= LPAREN ID RPAREN LPAREN (*) expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [130]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [130]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= LPAREN ID RPAREN LPAREN expr (*) RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on RPAREN to state [131]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [131]: {
  [cast_expr ::= LPAREN ID RPAREN LPAREN expr RPAREN (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [132]: {
  [expr ::= LPAREN expr RPAREN (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [133]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= DECR expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [134]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= NOT expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [135]: {
  [field ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [136]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= INCR expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN LBRACE RBRACE RSQBRACE SEMI DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [137]: {
  [formal ::= ID (*) ID , {RPAREN COMMA }]
  [formal ::= ID (*) LSQBRACE RSQBRACE ID , {RPAREN COMMA }]
}
transition on LSQBRACE to state [220]
transition on ID to state [219]

-------------------
lalr_state [138]: {
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list (*) RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [formal_list ::= formal_list (*) COMMA formal , {RPAREN COMMA }]
}
transition on RPAREN to state [141]
transition on COMMA to state [140]

-------------------
lalr_state [139]: {
  [formal_list ::= formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [140]: {
  [formal ::= (*) ID ID , {RPAREN COMMA }]
  [formal ::= (*) ID LSQBRACE RSQBRACE ID , {RPAREN COMMA }]
  [formal_list ::= formal_list COMMA (*) formal , {RPAREN COMMA }]
}
transition on formal to state [218]
transition on ID to state [137]

-------------------
lalr_state [141]: {
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN (*) LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on LBRACE to state [142]

-------------------
lalr_state [142]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE (*) stmt_list RBRACE , {RBRACE ID }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt_list ::= (*) stmt_list stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [160]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on stmt_list to state [155]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [143]: {
  [stmt ::= for_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [144]: {
  [for_stmt ::= FOR (*) LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LPAREN to state [188]

-------------------
lalr_state [145]: {
  [stmt ::= break_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [146]: {
  [stmt ::= return_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [147]: {
  [if_stmt ::= IF (*) LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [if_stmt ::= IF (*) LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LPAREN to state [182]

-------------------
lalr_state [148]: {
  [dispatch_expr ::= ID (*) LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= ID (*) ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= ID (*) LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= ID (*) DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= ID (*) DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= ID (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= ID (*) ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= ID (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on ASSIGN to state [100]
transition on DOT to state [101]
transition on LPAREN to state [99]
transition on LSQBRACE to state [173]
transition on ID to state [172]

-------------------
lalr_state [149]: {
  [stmt ::= decl_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [150]: {
  [stmt ::= block_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [151]: {
  [binary_comp_expr ::= (*) expr EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_neg_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) BOOLEAN_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [return_stmt ::= RETURN (*) expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_arith_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [171]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [152]: {
  [stmt ::= expr_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [153]: {
  [break_stmt ::= BREAK (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on SEMI to state [170]

-------------------
lalr_state [154]: {
  [stmt ::= while_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [155]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list (*) RBRACE , {RBRACE ID }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt_list ::= stmt_list (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [168]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on RBRACE to state [169]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [156]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= LBRACE (*) stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt_list ::= (*) stmt_list stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [160]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on stmt_list to state [166]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [157]: {
  [while_stmt ::= WHILE (*) LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LPAREN to state [162]

-------------------
lalr_state [158]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on SEMI to state [161]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [159]: {
  [stmt ::= if_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [160]: {
  [stmt_list ::= stmt (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [161]: {
  [expr_stmt ::= expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [162]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [while_stmt ::= WHILE LPAREN (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [163]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [163]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [while_stmt ::= WHILE LPAREN expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on RPAREN to state [164]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [164]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [while_stmt ::= WHILE LPAREN expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [165]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [165]: {
  [while_stmt ::= WHILE LPAREN expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [166]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [block_stmt ::= LBRACE stmt_list (*) RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt_list ::= stmt_list (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [168]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on RBRACE to state [167]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [167]: {
  [block_stmt ::= LBRACE stmt_list RBRACE (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [168]: {
  [stmt_list ::= stmt_list stmt (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [169]: {
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE (*) , {RBRACE ID }]
}

-------------------
lalr_state [170]: {
  [break_stmt ::= BREAK SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [171]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) NE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= expr (*) INCR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [return_stmt ::= RETURN expr (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) GEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LEQ expr , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= expr (*) DECR , {IF ELSE WHILE FOR BREAK NEW RETURN INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN LBRACE RBRACE DOT ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [73]
transition on OR to state [65]
transition on LT to state [61]
transition on GEQ to state [59]
transition on NE to state [62]
transition on TIMES to state [58]
transition on GT to state [67]
transition on DOT to state [71]
transition on INSTANCEOF to state [74]
transition on PLUS to state [64]
transition on EQ to state [72]
transition on DECR to state [66]
transition on MODULUS to state [75]
transition on DIVIDE to state [68]
transition on AND to state [60]
transition on INCR to state [63]
transition on MINUS to state [70]

-------------------
lalr_state [172]: {
  [decl_stmt ::= ID ID (*) ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= ID ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on ASSIGN to state [179]
transition on LSQBRACE to state [117]

-------------------
lalr_state [173]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [decl_stmt ::= ID LSQBRACE (*) RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= ID LSQBRACE (*) expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on RSQBRACE to state [174]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [113]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [174]: {
  [decl_stmt ::= ID LSQBRACE RSQBRACE (*) ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ID to state [175]

-------------------
lalr_state [175]: {
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID (*) ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ASSIGN to state [176]

-------------------
lalr_state [176]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [177]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [177]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on SEMI to state [178]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [178]: {
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [179]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= ID ID ASSIGN (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [180]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [180]: {
  [decl_stmt ::= ID ID ASSIGN expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on SEMI to state [181]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [181]: {
  [decl_stmt ::= ID ID ASSIGN expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [182]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [if_stmt ::= IF LPAREN (*) expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [if_stmt ::= IF LPAREN (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [183]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [183]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [if_stmt ::= IF LPAREN expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [if_stmt ::= IF LPAREN expr (*) RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on RPAREN to state [184]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [184]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [if_stmt ::= IF LPAREN expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [if_stmt ::= IF LPAREN expr RPAREN (*) stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [185]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [185]: {
  [if_stmt ::= IF LPAREN expr RPAREN stmt (*) ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [if_stmt ::= IF LPAREN expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ELSE to state [186]

-------------------
lalr_state [186]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [if_stmt ::= IF LPAREN expr RPAREN stmt ELSE (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [187]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [187]: {
  [if_stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [188]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on SEMI to state [190]
transition on unary_decr_expr to state [29]
transition on expr to state [189]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [189]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on SEMI to state [204]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [190]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI (*) expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI (*) expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on SEMI to state [192]
transition on unary_decr_expr to state [29]
transition on expr to state [191]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [191]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI expr (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI expr (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on SEMI to state [198]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [192]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [for_stmt ::= FOR LPAREN SEMI SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [for_stmt ::= FOR LPAREN SEMI SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on RPAREN to state [194]
transition on unary_decr_expr to state [29]
transition on expr to state [193]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [193]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [for_stmt ::= FOR LPAREN SEMI SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on RPAREN to state [196]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [194]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN SEMI SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [195]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [195]: {
  [for_stmt ::= FOR LPAREN SEMI SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [196]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN SEMI SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [197]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [197]: {
  [for_stmt ::= FOR LPAREN SEMI SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [198]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on RPAREN to state [200]
transition on unary_decr_expr to state [29]
transition on expr to state [199]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [199]: {
  [for_stmt ::= FOR LPAREN SEMI expr SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on RPAREN to state [202]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [200]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [201]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [201]: {
  [for_stmt ::= FOR LPAREN SEMI expr SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [202]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [203]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [203]: {
  [for_stmt ::= FOR LPAREN SEMI expr SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [204]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on SEMI to state [206]
transition on unary_decr_expr to state [29]
transition on expr to state [205]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [205]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on SEMI to state [212]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [206]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on RPAREN to state [208]
transition on expr to state [207]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [207]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on RPAREN to state [210]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [208]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [209]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [209]: {
  [for_stmt ::= FOR LPAREN expr SEMI SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [210]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [211]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [211]: {
  [for_stmt ::= FOR LPAREN expr SEMI SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [212]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on RPAREN to state [214]
transition on unary_decr_expr to state [29]
transition on expr to state [213]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [213]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on RPAREN to state [216]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [214]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [215]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [215]: {
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [216]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [217]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [217]: {
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [218]: {
  [formal_list ::= formal_list COMMA formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [219]: {
  [formal ::= ID ID (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [220]: {
  [formal ::= ID LSQBRACE (*) RSQBRACE ID , {RPAREN COMMA }]
}
transition on RSQBRACE to state [221]

-------------------
lalr_state [221]: {
  [formal ::= ID LSQBRACE RSQBRACE (*) ID , {RPAREN COMMA }]
}
transition on ID to state [222]

-------------------
lalr_state [222]: {
  [formal ::= ID LSQBRACE RSQBRACE ID (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [223]: {
  [field ::= ID ID SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [224]: {
  [formal_list ::= (*) formal_list COMMA formal , {RPAREN COMMA }]
  [formal ::= (*) ID ID , {RPAREN COMMA }]
  [formal_list ::= (*) formal , {RPAREN COMMA }]
  [formal ::= (*) ID LSQBRACE RSQBRACE ID , {RPAREN COMMA }]
  [method ::= ID ID LPAREN (*) formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [formal_list ::= (*) , {RPAREN COMMA }]
}
transition on formal to state [139]
transition on formal_list to state [228]
transition on ID to state [137]

-------------------
lalr_state [225]: {
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [field ::= ID ID ASSIGN (*) expr SEMI , {RBRACE ID }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on binary_expr to state [52]
transition on binary_logic_expr to state [51]
transition on const_expr to state [50]
transition on array_expr to state [49]
transition on NEW to state [48]
transition on binary_arith_expr to state [47]
transition on dispatch_expr to state [46]
transition on unary_not_expr to state [45]
transition on unary_neg_expr to state [44]
transition on MINUS to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on INT_CONST to state [40]
transition on unary_expr to state [39]
transition on ID to state [38]
transition on array_assign_expr to state [37]
transition on var_expr to state [36]
transition on BOOLEAN_CONST to state [35]
transition on LPAREN to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [226]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [226]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [field ::= ID ID ASSIGN expr (*) SEMI , {RBRACE ID }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
}
transition on MODULUS to state [75]
transition on INSTANCEOF to state [74]
transition on LEQ to state [73]
transition on EQ to state [72]
transition on DOT to state [71]
transition on MINUS to state [70]
transition on DIVIDE to state [68]
transition on GT to state [67]
transition on DECR to state [66]
transition on SEMI to state [227]
transition on OR to state [65]
transition on PLUS to state [64]
transition on INCR to state [63]
transition on NE to state [62]
transition on LT to state [61]
transition on AND to state [60]
transition on GEQ to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [227]: {
  [field ::= ID ID ASSIGN expr SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [228]: {
  [method ::= ID ID LPAREN formal_list (*) RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [formal_list ::= formal_list (*) COMMA formal , {RPAREN COMMA }]
}
transition on RPAREN to state [229]
transition on COMMA to state [140]

-------------------
lalr_state [229]: {
  [method ::= ID ID LPAREN formal_list RPAREN (*) LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on LBRACE to state [230]

-------------------
lalr_state [230]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [method ::= ID ID LPAREN formal_list RPAREN LBRACE (*) stmt_list RBRACE , {RBRACE ID }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt_list ::= (*) stmt_list stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [160]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on stmt_list to state [231]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [231]: {
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [method ::= ID ID LPAREN formal_list RPAREN LBRACE stmt_list (*) RBRACE , {RBRACE ID }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [return_stmt ::= (*) RETURN expr , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [new_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt_list ::= stmt_list (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr_stmt ::= (*) expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [168]
transition on unary_neg_expr to state [44]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [35]
transition on if_stmt to state [159]
transition on expr to state [158]
transition on RBRACE to state [232]
transition on array_assign_expr to state [37]
transition on WHILE to state [157]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [156]
transition on unary_not_expr to state [45]
transition on binary_expr to state [52]
transition on while_stmt to state [154]
transition on BREAK to state [153]
transition on NEW to state [48]
transition on expr_stmt to state [152]
transition on INT_CONST to state [40]
transition on RETURN to state [151]
transition on block_stmt to state [150]
transition on binary_arith_expr to state [47]
transition on decl_stmt to state [149]
transition on ID to state [148]
transition on IF to state [147]
transition on instance_of_expr to state [30]
transition on const_expr to state [50]
transition on return_stmt to state [146]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [39]
transition on dispatch_expr to state [46]
transition on NOT to state [31]
transition on assign_expr to state [27]
transition on break_stmt to state [145]
transition on FOR to state [144]
transition on MINUS to state [43]
transition on INCR to state [25]
transition on DECR to state [33]
transition on unary_decr_expr to state [29]
transition on LPAREN to state [34]
transition on array_expr to state [49]
transition on var_expr to state [36]
transition on for_stmt to state [143]
transition on new_expr to state [32]
transition on unary_incr_expr to state [42]

-------------------
lalr_state [232]: {
  [method ::= ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE (*) , {RBRACE ID }]
}

-------------------
lalr_state [233]: {
  [field ::= (*) ID ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member_list ::= member_list (*) member , {RBRACE ID }]
  [class ::= CLASS ID LBRACE member_list (*) RBRACE , {EOF CLASS }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= (*) ID ID SEMI , {RBRACE ID }]
  [member ::= (*) field , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member ::= (*) method , {RBRACE ID }]
}
transition on member to state [16]
transition on method to state [13]
transition on field to state [12]
transition on RBRACE to state [234]
transition on ID to state [10]

-------------------
lalr_state [234]: {
  [class ::= CLASS ID LBRACE member_list RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [235]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
lalr_state [236]: {
  [class_list ::= class_list class (*) , {EOF CLASS }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 3:SHIFT(to state 4)]
From state #1
 [term 0:REDUCE(with prod 0)] [term 3:SHIFT(to state 4)]
From state #2
 [term 0:SHIFT(to state 235)]
From state #3
 [term 0:REDUCE(with prod 2)] [term 3:REDUCE(with prod 2)]
From state #4
 [term 39:SHIFT(to state 5)]
From state #5
 [term 4:SHIFT(to state 7)] [term 32:SHIFT(to state 6)]
From state #6
 [term 33:REDUCE(with prod 6)] [term 39:SHIFT(to state 10)]
From state #7
 [term 39:SHIFT(to state 8)]
From state #8
 [term 32:SHIFT(to state 9)]
From state #9
 [term 33:REDUCE(with prod 6)] [term 39:SHIFT(to state 10)]
From state #10
 [term 34:SHIFT(to state 18)] [term 39:SHIFT(to state 17)]
From state #11
 [term 33:SHIFT(to state 15)] [term 39:SHIFT(to state 10)]
From state #12
 [term 33:REDUCE(with prod 10)] [term 39:REDUCE(with prod 10)]
From state #13
 [term 33:REDUCE(with prod 9)] [term 39:REDUCE(with prod 9)]
From state #14
 [term 33:REDUCE(with prod 7)] [term 39:REDUCE(with prod 7)]
From state #15
 [term 0:REDUCE(with prod 5)] [term 3:REDUCE(with prod 5)]
From state #16
 [term 33:REDUCE(with prod 8)] [term 39:REDUCE(with prod 8)]
From state #17
 [term 27:SHIFT(to state 225)] [term 30:SHIFT(to state 224)]
 [term 36:SHIFT(to state 223)]
From state #18
 [term 35:SHIFT(to state 19)]
From state #19
 [term 39:SHIFT(to state 20)]
From state #20
 [term 27:SHIFT(to state 23)] [term 30:SHIFT(to state 22)]
 [term 36:SHIFT(to state 21)]
From state #21
 [term 33:REDUCE(with prod 15)] [term 39:REDUCE(with prod 15)]
From state #22
 [term 31:REDUCE(with prod 17)] [term 37:REDUCE(with prod 17)]
 [term 39:SHIFT(to state 137)]
From state #23
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #24
 [term 5:REDUCE(with prod 80)] [term 6:REDUCE(with prod 80)]
 [term 7:REDUCE(with prod 80)] [term 8:REDUCE(with prod 80)]
 [term 9:REDUCE(with prod 80)] [term 10:REDUCE(with prod 80)]
 [term 11:REDUCE(with prod 80)] [term 12:REDUCE(with prod 80)]
 [term 13:REDUCE(with prod 80)] [term 14:REDUCE(with prod 80)]
 [term 15:REDUCE(with prod 80)] [term 16:REDUCE(with prod 80)]
 [term 17:REDUCE(with prod 80)] [term 18:REDUCE(with prod 80)]
 [term 19:REDUCE(with prod 80)] [term 20:REDUCE(with prod 80)]
 [term 21:REDUCE(with prod 80)] [term 22:REDUCE(with prod 80)]
 [term 23:REDUCE(with prod 80)] [term 24:REDUCE(with prod 80)]
 [term 25:REDUCE(with prod 80)] [term 26:REDUCE(with prod 80)]
 [term 28:REDUCE(with prod 80)] [term 29:REDUCE(with prod 80)]
 [term 30:REDUCE(with prod 80)] [term 31:REDUCE(with prod 80)]
 [term 32:REDUCE(with prod 80)] [term 33:REDUCE(with prod 80)]
 [term 35:REDUCE(with prod 80)] [term 36:REDUCE(with prod 80)]
 [term 38:REDUCE(with prod 80)] [term 39:REDUCE(with prod 80)]
 [term 40:REDUCE(with prod 80)] [term 41:REDUCE(with prod 80)]
 [term 42:REDUCE(with prod 80)]
From state #25
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #26
 [term 5:REDUCE(with prod 54)] [term 6:REDUCE(with prod 54)]
 [term 7:REDUCE(with prod 54)] [term 8:REDUCE(with prod 54)]
 [term 9:REDUCE(with prod 54)] [term 10:REDUCE(with prod 54)]
 [term 11:REDUCE(with prod 54)] [term 12:REDUCE(with prod 54)]
 [term 13:REDUCE(with prod 54)] [term 14:REDUCE(with prod 54)]
 [term 15:REDUCE(with prod 54)] [term 16:REDUCE(with prod 54)]
 [term 17:REDUCE(with prod 54)] [term 18:REDUCE(with prod 54)]
 [term 19:REDUCE(with prod 54)] [term 20:REDUCE(with prod 54)]
 [term 21:REDUCE(with prod 54)] [term 22:REDUCE(with prod 54)]
 [term 23:REDUCE(with prod 54)] [term 24:REDUCE(with prod 54)]
 [term 25:REDUCE(with prod 54)] [term 26:REDUCE(with prod 54)]
 [term 28:REDUCE(with prod 54)] [term 29:REDUCE(with prod 54)]
 [term 30:REDUCE(with prod 54)] [term 31:REDUCE(with prod 54)]
 [term 32:REDUCE(with prod 54)] [term 33:REDUCE(with prod 54)]
 [term 35:REDUCE(with prod 54)] [term 36:REDUCE(with prod 54)]
 [term 38:REDUCE(with prod 54)] [term 39:REDUCE(with prod 54)]
 [term 40:REDUCE(with prod 54)] [term 41:REDUCE(with prod 54)]
 [term 42:REDUCE(with prod 54)]
From state #27
 [term 5:REDUCE(with prod 50)] [term 6:REDUCE(with prod 50)]
 [term 7:REDUCE(with prod 50)] [term 8:REDUCE(with prod 50)]
 [term 9:REDUCE(with prod 50)] [term 10:REDUCE(with prod 50)]
 [term 11:REDUCE(with prod 50)] [term 12:REDUCE(with prod 50)]
 [term 13:REDUCE(with prod 50)] [term 14:REDUCE(with prod 50)]
 [term 15:REDUCE(with prod 50)] [term 16:REDUCE(with prod 50)]
 [term 17:REDUCE(with prod 50)] [term 18:REDUCE(with prod 50)]
 [term 19:REDUCE(with prod 50)] [term 20:REDUCE(with prod 50)]
 [term 21:REDUCE(with prod 50)] [term 22:REDUCE(with prod 50)]
 [term 23:REDUCE(with prod 50)] [term 24:REDUCE(with prod 50)]
 [term 25:REDUCE(with prod 50)] [term 26:REDUCE(with prod 50)]
 [term 28:REDUCE(with prod 50)] [term 29:REDUCE(with prod 50)]
 [term 30:REDUCE(with prod 50)] [term 31:REDUCE(with prod 50)]
 [term 32:REDUCE(with prod 50)] [term 33:REDUCE(with prod 50)]
 [term 35:REDUCE(with prod 50)] [term 36:REDUCE(with prod 50)]
 [term 38:REDUCE(with prod 50)] [term 39:REDUCE(with prod 50)]
 [term 40:REDUCE(with prod 50)] [term 41:REDUCE(with prod 50)]
 [term 42:REDUCE(with prod 50)]
From state #28
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 36:SHIFT(to state 135)] [term 38:SHIFT(to state 71)]
From state #29
 [term 5:REDUCE(with prod 77)] [term 6:REDUCE(with prod 77)]
 [term 7:REDUCE(with prod 77)] [term 8:REDUCE(with prod 77)]
 [term 9:REDUCE(with prod 77)] [term 10:REDUCE(with prod 77)]
 [term 11:REDUCE(with prod 77)] [term 12:REDUCE(with prod 77)]
 [term 13:REDUCE(with prod 77)] [term 14:REDUCE(with prod 77)]
 [term 15:REDUCE(with prod 77)] [term 16:REDUCE(with prod 77)]
 [term 17:REDUCE(with prod 77)] [term 18:REDUCE(with prod 77)]
 [term 19:REDUCE(with prod 77)] [term 20:REDUCE(with prod 77)]
 [term 21:REDUCE(with prod 77)] [term 22:REDUCE(with prod 77)]
 [term 23:REDUCE(with prod 77)] [term 24:REDUCE(with prod 77)]
 [term 25:REDUCE(with prod 77)] [term 26:REDUCE(with prod 77)]
 [term 28:REDUCE(with prod 77)] [term 29:REDUCE(with prod 77)]
 [term 30:REDUCE(with prod 77)] [term 31:REDUCE(with prod 77)]
 [term 32:REDUCE(with prod 77)] [term 33:REDUCE(with prod 77)]
 [term 35:REDUCE(with prod 77)] [term 36:REDUCE(with prod 77)]
 [term 38:REDUCE(with prod 77)] [term 39:REDUCE(with prod 77)]
 [term 40:REDUCE(with prod 77)] [term 41:REDUCE(with prod 77)]
 [term 42:REDUCE(with prod 77)]
From state #30
 [term 5:REDUCE(with prod 53)] [term 6:REDUCE(with prod 53)]
 [term 7:REDUCE(with prod 53)] [term 8:REDUCE(with prod 53)]
 [term 9:REDUCE(with prod 53)] [term 10:REDUCE(with prod 53)]
 [term 11:REDUCE(with prod 53)] [term 12:REDUCE(with prod 53)]
 [term 13:REDUCE(with prod 53)] [term 14:REDUCE(with prod 53)]
 [term 15:REDUCE(with prod 53)] [term 16:REDUCE(with prod 53)]
 [term 17:REDUCE(with prod 53)] [term 18:REDUCE(with prod 53)]
 [term 19:REDUCE(with prod 53)] [term 20:REDUCE(with prod 53)]
 [term 21:REDUCE(with prod 53)] [term 22:REDUCE(with prod 53)]
 [term 23:REDUCE(with prod 53)] [term 24:REDUCE(with prod 53)]
 [term 25:REDUCE(with prod 53)] [term 26:REDUCE(with prod 53)]
 [term 28:REDUCE(with prod 53)] [term 29:REDUCE(with prod 53)]
 [term 30:REDUCE(with prod 53)] [term 31:REDUCE(with prod 53)]
 [term 32:REDUCE(with prod 53)] [term 33:REDUCE(with prod 53)]
 [term 35:REDUCE(with prod 53)] [term 36:REDUCE(with prod 53)]
 [term 38:REDUCE(with prod 53)] [term 39:REDUCE(with prod 53)]
 [term 40:REDUCE(with prod 53)] [term 41:REDUCE(with prod 53)]
 [term 42:REDUCE(with prod 53)]
From state #31
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #32
 [term 5:REDUCE(with prod 52)] [term 6:REDUCE(with prod 52)]
 [term 7:REDUCE(with prod 52)] [term 8:REDUCE(with prod 52)]
 [term 9:REDUCE(with prod 52)] [term 10:REDUCE(with prod 52)]
 [term 11:REDUCE(with prod 52)] [term 12:REDUCE(with prod 52)]
 [term 13:REDUCE(with prod 52)] [term 14:REDUCE(with prod 52)]
 [term 15:REDUCE(with prod 52)] [term 16:REDUCE(with prod 52)]
 [term 17:REDUCE(with prod 52)] [term 18:REDUCE(with prod 52)]
 [term 19:REDUCE(with prod 52)] [term 20:REDUCE(with prod 52)]
 [term 21:REDUCE(with prod 52)] [term 22:REDUCE(with prod 52)]
 [term 23:REDUCE(with prod 52)] [term 24:REDUCE(with prod 52)]
 [term 25:REDUCE(with prod 52)] [term 26:REDUCE(with prod 52)]
 [term 28:REDUCE(with prod 52)] [term 29:REDUCE(with prod 52)]
 [term 30:REDUCE(with prod 52)] [term 31:REDUCE(with prod 52)]
 [term 32:REDUCE(with prod 52)] [term 33:REDUCE(with prod 52)]
 [term 35:REDUCE(with prod 52)] [term 36:REDUCE(with prod 52)]
 [term 38:REDUCE(with prod 52)] [term 39:REDUCE(with prod 52)]
 [term 40:REDUCE(with prod 52)] [term 41:REDUCE(with prod 52)]
 [term 42:REDUCE(with prod 52)]
From state #33
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #34
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 121)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #35
 [term 5:REDUCE(with prod 79)] [term 6:REDUCE(with prod 79)]
 [term 7:REDUCE(with prod 79)] [term 8:REDUCE(with prod 79)]
 [term 9:REDUCE(with prod 79)] [term 10:REDUCE(with prod 79)]
 [term 11:REDUCE(with prod 79)] [term 12:REDUCE(with prod 79)]
 [term 13:REDUCE(with prod 79)] [term 14:REDUCE(with prod 79)]
 [term 15:REDUCE(with prod 79)] [term 16:REDUCE(with prod 79)]
 [term 17:REDUCE(with prod 79)] [term 18:REDUCE(with prod 79)]
 [term 19:REDUCE(with prod 79)] [term 20:REDUCE(with prod 79)]
 [term 21:REDUCE(with prod 79)] [term 22:REDUCE(with prod 79)]
 [term 23:REDUCE(with prod 79)] [term 24:REDUCE(with prod 79)]
 [term 25:REDUCE(with prod 79)] [term 26:REDUCE(with prod 79)]
 [term 28:REDUCE(with prod 79)] [term 29:REDUCE(with prod 79)]
 [term 30:REDUCE(with prod 79)] [term 31:REDUCE(with prod 79)]
 [term 32:REDUCE(with prod 79)] [term 33:REDUCE(with prod 79)]
 [term 35:REDUCE(with prod 79)] [term 36:REDUCE(with prod 79)]
 [term 38:REDUCE(with prod 79)] [term 39:REDUCE(with prod 79)]
 [term 40:REDUCE(with prod 79)] [term 41:REDUCE(with prod 79)]
 [term 42:REDUCE(with prod 79)]
From state #36
 [term 5:REDUCE(with prod 58)] [term 6:REDUCE(with prod 58)]
 [term 7:REDUCE(with prod 58)] [term 8:REDUCE(with prod 58)]
 [term 9:REDUCE(with prod 58)] [term 10:REDUCE(with prod 58)]
 [term 11:REDUCE(with prod 58)] [term 12:REDUCE(with prod 58)]
 [term 13:REDUCE(with prod 58)] [term 14:REDUCE(with prod 58)]
 [term 15:REDUCE(with prod 58)] [term 16:REDUCE(with prod 58)]
 [term 17:REDUCE(with prod 58)] [term 18:REDUCE(with prod 58)]
 [term 19:REDUCE(with prod 58)] [term 20:REDUCE(with prod 58)]
 [term 21:REDUCE(with prod 58)] [term 22:REDUCE(with prod 58)]
 [term 23:REDUCE(with prod 58)] [term 24:REDUCE(with prod 58)]
 [term 25:REDUCE(with prod 58)] [term 26:REDUCE(with prod 58)]
 [term 28:REDUCE(with prod 58)] [term 29:REDUCE(with prod 58)]
 [term 30:REDUCE(with prod 58)] [term 31:REDUCE(with prod 58)]
 [term 32:REDUCE(with prod 58)] [term 33:REDUCE(with prod 58)]
 [term 35:REDUCE(with prod 58)] [term 36:REDUCE(with prod 58)]
 [term 38:REDUCE(with prod 58)] [term 39:REDUCE(with prod 58)]
 [term 40:REDUCE(with prod 58)] [term 41:REDUCE(with prod 58)]
 [term 42:REDUCE(with prod 58)]
From state #37
 [term 5:REDUCE(with prod 62)] [term 6:REDUCE(with prod 62)]
 [term 7:REDUCE(with prod 62)] [term 8:REDUCE(with prod 62)]
 [term 9:REDUCE(with prod 62)] [term 10:REDUCE(with prod 62)]
 [term 11:REDUCE(with prod 62)] [term 12:REDUCE(with prod 62)]
 [term 13:REDUCE(with prod 62)] [term 14:REDUCE(with prod 62)]
 [term 15:REDUCE(with prod 62)] [term 16:REDUCE(with prod 62)]
 [term 17:REDUCE(with prod 62)] [term 18:REDUCE(with prod 62)]
 [term 19:REDUCE(with prod 62)] [term 20:REDUCE(with prod 62)]
 [term 21:REDUCE(with prod 62)] [term 22:REDUCE(with prod 62)]
 [term 23:REDUCE(with prod 62)] [term 24:REDUCE(with prod 62)]
 [term 25:REDUCE(with prod 62)] [term 26:REDUCE(with prod 62)]
 [term 28:REDUCE(with prod 62)] [term 29:REDUCE(with prod 62)]
 [term 30:REDUCE(with prod 62)] [term 31:REDUCE(with prod 62)]
 [term 32:REDUCE(with prod 62)] [term 33:REDUCE(with prod 62)]
 [term 35:REDUCE(with prod 62)] [term 36:REDUCE(with prod 62)]
 [term 38:REDUCE(with prod 62)] [term 39:REDUCE(with prod 62)]
 [term 40:REDUCE(with prod 62)] [term 41:REDUCE(with prod 62)]
 [term 42:REDUCE(with prod 62)]
From state #38
 [term 5:REDUCE(with prod 101)] [term 6:REDUCE(with prod 101)]
 [term 7:REDUCE(with prod 101)] [term 8:REDUCE(with prod 101)]
 [term 9:REDUCE(with prod 101)] [term 10:REDUCE(with prod 101)]
 [term 11:REDUCE(with prod 101)] [term 12:REDUCE(with prod 101)]
 [term 13:REDUCE(with prod 101)] [term 14:REDUCE(with prod 101)]
 [term 15:REDUCE(with prod 101)] [term 16:REDUCE(with prod 101)]
 [term 17:REDUCE(with prod 101)] [term 18:REDUCE(with prod 101)]
 [term 19:REDUCE(with prod 101)] [term 20:REDUCE(with prod 101)]
 [term 21:REDUCE(with prod 101)] [term 22:REDUCE(with prod 101)]
 [term 23:REDUCE(with prod 101)] [term 24:REDUCE(with prod 101)]
 [term 25:REDUCE(with prod 101)] [term 26:REDUCE(with prod 101)]
 [term 27:SHIFT(to state 100)] [term 28:REDUCE(with prod 101)]
 [term 29:REDUCE(with prod 101)] [term 30:SHIFT(to state 99)]
 [term 31:REDUCE(with prod 101)] [term 32:REDUCE(with prod 101)]
 [term 33:REDUCE(with prod 101)] [term 34:SHIFT(to state 98)]
 [term 35:REDUCE(with prod 101)] [term 36:REDUCE(with prod 101)]
 [term 38:SHIFT(to state 101)] [term 39:SHIFT(to state 97)]
 [term 40:REDUCE(with prod 101)] [term 41:REDUCE(with prod 101)]
 [term 42:REDUCE(with prod 101)]
From state #39
 [term 5:REDUCE(with prod 56)] [term 6:REDUCE(with prod 56)]
 [term 7:REDUCE(with prod 56)] [term 8:REDUCE(with prod 56)]
 [term 9:REDUCE(with prod 56)] [term 10:REDUCE(with prod 56)]
 [term 11:REDUCE(with prod 56)] [term 12:REDUCE(with prod 56)]
 [term 13:REDUCE(with prod 56)] [term 14:REDUCE(with prod 56)]
 [term 15:REDUCE(with prod 56)] [term 16:REDUCE(with prod 56)]
 [term 17:REDUCE(with prod 56)] [term 18:REDUCE(with prod 56)]
 [term 19:REDUCE(with prod 56)] [term 20:REDUCE(with prod 56)]
 [term 21:REDUCE(with prod 56)] [term 22:REDUCE(with prod 56)]
 [term 23:REDUCE(with prod 56)] [term 24:REDUCE(with prod 56)]
 [term 25:REDUCE(with prod 56)] [term 26:REDUCE(with prod 56)]
 [term 28:REDUCE(with prod 56)] [term 29:REDUCE(with prod 56)]
 [term 30:REDUCE(with prod 56)] [term 31:REDUCE(with prod 56)]
 [term 32:REDUCE(with prod 56)] [term 33:REDUCE(with prod 56)]
 [term 35:REDUCE(with prod 56)] [term 36:REDUCE(with prod 56)]
 [term 38:REDUCE(with prod 56)] [term 39:REDUCE(with prod 56)]
 [term 40:REDUCE(with prod 56)] [term 41:REDUCE(with prod 56)]
 [term 42:REDUCE(with prod 56)]
From state #40
 [term 5:REDUCE(with prod 78)] [term 6:REDUCE(with prod 78)]
 [term 7:REDUCE(with prod 78)] [term 8:REDUCE(with prod 78)]
 [term 9:REDUCE(with prod 78)] [term 10:REDUCE(with prod 78)]
 [term 11:REDUCE(with prod 78)] [term 12:REDUCE(with prod 78)]
 [term 13:REDUCE(with prod 78)] [term 14:REDUCE(with prod 78)]
 [term 15:REDUCE(with prod 78)] [term 16:REDUCE(with prod 78)]
 [term 17:REDUCE(with prod 78)] [term 18:REDUCE(with prod 78)]
 [term 19:REDUCE(with prod 78)] [term 20:REDUCE(with prod 78)]
 [term 21:REDUCE(with prod 78)] [term 22:REDUCE(with prod 78)]
 [term 23:REDUCE(with prod 78)] [term 24:REDUCE(with prod 78)]
 [term 25:REDUCE(with prod 78)] [term 26:REDUCE(with prod 78)]
 [term 28:REDUCE(with prod 78)] [term 29:REDUCE(with prod 78)]
 [term 30:REDUCE(with prod 78)] [term 31:REDUCE(with prod 78)]
 [term 32:REDUCE(with prod 78)] [term 33:REDUCE(with prod 78)]
 [term 35:REDUCE(with prod 78)] [term 36:REDUCE(with prod 78)]
 [term 38:REDUCE(with prod 78)] [term 39:REDUCE(with prod 78)]
 [term 40:REDUCE(with prod 78)] [term 41:REDUCE(with prod 78)]
 [term 42:REDUCE(with prod 78)]
From state #41
 [term 5:REDUCE(with prod 72)] [term 6:REDUCE(with prod 72)]
 [term 7:REDUCE(with prod 72)] [term 8:REDUCE(with prod 72)]
 [term 9:REDUCE(with prod 72)] [term 10:REDUCE(with prod 72)]
 [term 11:REDUCE(with prod 72)] [term 12:REDUCE(with prod 72)]
 [term 13:REDUCE(with prod 72)] [term 14:REDUCE(with prod 72)]
 [term 15:REDUCE(with prod 72)] [term 16:REDUCE(with prod 72)]
 [term 17:REDUCE(with prod 72)] [term 18:REDUCE(with prod 72)]
 [term 19:REDUCE(with prod 72)] [term 20:REDUCE(with prod 72)]
 [term 21:REDUCE(with prod 72)] [term 22:REDUCE(with prod 72)]
 [term 23:REDUCE(with prod 72)] [term 24:REDUCE(with prod 72)]
 [term 25:REDUCE(with prod 72)] [term 26:REDUCE(with prod 72)]
 [term 28:REDUCE(with prod 72)] [term 29:REDUCE(with prod 72)]
 [term 30:REDUCE(with prod 72)] [term 31:REDUCE(with prod 72)]
 [term 32:REDUCE(with prod 72)] [term 33:REDUCE(with prod 72)]
 [term 35:REDUCE(with prod 72)] [term 36:REDUCE(with prod 72)]
 [term 38:REDUCE(with prod 72)] [term 39:REDUCE(with prod 72)]
 [term 40:REDUCE(with prod 72)] [term 41:REDUCE(with prod 72)]
 [term 42:REDUCE(with prod 72)]
From state #42
 [term 5:REDUCE(with prod 76)] [term 6:REDUCE(with prod 76)]
 [term 7:REDUCE(with prod 76)] [term 8:REDUCE(with prod 76)]
 [term 9:REDUCE(with prod 76)] [term 10:REDUCE(with prod 76)]
 [term 11:REDUCE(with prod 76)] [term 12:REDUCE(with prod 76)]
 [term 13:REDUCE(with prod 76)] [term 14:REDUCE(with prod 76)]
 [term 15:REDUCE(with prod 76)] [term 16:REDUCE(with prod 76)]
 [term 17:REDUCE(with prod 76)] [term 18:REDUCE(with prod 76)]
 [term 19:REDUCE(with prod 76)] [term 20:REDUCE(with prod 76)]
 [term 21:REDUCE(with prod 76)] [term 22:REDUCE(with prod 76)]
 [term 23:REDUCE(with prod 76)] [term 24:REDUCE(with prod 76)]
 [term 25:REDUCE(with prod 76)] [term 26:REDUCE(with prod 76)]
 [term 28:REDUCE(with prod 76)] [term 29:REDUCE(with prod 76)]
 [term 30:REDUCE(with prod 76)] [term 31:REDUCE(with prod 76)]
 [term 32:REDUCE(with prod 76)] [term 33:REDUCE(with prod 76)]
 [term 35:REDUCE(with prod 76)] [term 36:REDUCE(with prod 76)]
 [term 38:REDUCE(with prod 76)] [term 39:REDUCE(with prod 76)]
 [term 40:REDUCE(with prod 76)] [term 41:REDUCE(with prod 76)]
 [term 42:REDUCE(with prod 76)]
From state #43
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #44
 [term 5:REDUCE(with prod 74)] [term 6:REDUCE(with prod 74)]
 [term 7:REDUCE(with prod 74)] [term 8:REDUCE(with prod 74)]
 [term 9:REDUCE(with prod 74)] [term 10:REDUCE(with prod 74)]
 [term 11:REDUCE(with prod 74)] [term 12:REDUCE(with prod 74)]
 [term 13:REDUCE(with prod 74)] [term 14:REDUCE(with prod 74)]
 [term 15:REDUCE(with prod 74)] [term 16:REDUCE(with prod 74)]
 [term 17:REDUCE(with prod 74)] [term 18:REDUCE(with prod 74)]
 [term 19:REDUCE(with prod 74)] [term 20:REDUCE(with prod 74)]
 [term 21:REDUCE(with prod 74)] [term 22:REDUCE(with prod 74)]
 [term 23:REDUCE(with prod 74)] [term 24:REDUCE(with prod 74)]
 [term 25:REDUCE(with prod 74)] [term 26:REDUCE(with prod 74)]
 [term 28:REDUCE(with prod 74)] [term 29:REDUCE(with prod 74)]
 [term 30:REDUCE(with prod 74)] [term 31:REDUCE(with prod 74)]
 [term 32:REDUCE(with prod 74)] [term 33:REDUCE(with prod 74)]
 [term 35:REDUCE(with prod 74)] [term 36:REDUCE(with prod 74)]
 [term 38:REDUCE(with prod 74)] [term 39:REDUCE(with prod 74)]
 [term 40:REDUCE(with prod 74)] [term 41:REDUCE(with prod 74)]
 [term 42:REDUCE(with prod 74)]
From state #45
 [term 5:REDUCE(with prod 75)] [term 6:REDUCE(with prod 75)]
 [term 7:REDUCE(with prod 75)] [term 8:REDUCE(with prod 75)]
 [term 9:REDUCE(with prod 75)] [term 10:REDUCE(with prod 75)]
 [term 11:REDUCE(with prod 75)] [term 12:REDUCE(with prod 75)]
 [term 13:REDUCE(with prod 75)] [term 14:REDUCE(with prod 75)]
 [term 15:REDUCE(with prod 75)] [term 16:REDUCE(with prod 75)]
 [term 17:REDUCE(with prod 75)] [term 18:REDUCE(with prod 75)]
 [term 19:REDUCE(with prod 75)] [term 20:REDUCE(with prod 75)]
 [term 21:REDUCE(with prod 75)] [term 22:REDUCE(with prod 75)]
 [term 23:REDUCE(with prod 75)] [term 24:REDUCE(with prod 75)]
 [term 25:REDUCE(with prod 75)] [term 26:REDUCE(with prod 75)]
 [term 28:REDUCE(with prod 75)] [term 29:REDUCE(with prod 75)]
 [term 30:REDUCE(with prod 75)] [term 31:REDUCE(with prod 75)]
 [term 32:REDUCE(with prod 75)] [term 33:REDUCE(with prod 75)]
 [term 35:REDUCE(with prod 75)] [term 36:REDUCE(with prod 75)]
 [term 38:REDUCE(with prod 75)] [term 39:REDUCE(with prod 75)]
 [term 40:REDUCE(with prod 75)] [term 41:REDUCE(with prod 75)]
 [term 42:REDUCE(with prod 75)]
From state #46
 [term 5:REDUCE(with prod 51)] [term 6:REDUCE(with prod 51)]
 [term 7:REDUCE(with prod 51)] [term 8:REDUCE(with prod 51)]
 [term 9:REDUCE(with prod 51)] [term 10:REDUCE(with prod 51)]
 [term 11:REDUCE(with prod 51)] [term 12:REDUCE(with prod 51)]
 [term 13:REDUCE(with prod 51)] [term 14:REDUCE(with prod 51)]
 [term 15:REDUCE(with prod 51)] [term 16:REDUCE(with prod 51)]
 [term 17:REDUCE(with prod 51)] [term 18:REDUCE(with prod 51)]
 [term 19:REDUCE(with prod 51)] [term 20:REDUCE(with prod 51)]
 [term 21:REDUCE(with prod 51)] [term 22:REDUCE(with prod 51)]
 [term 23:REDUCE(with prod 51)] [term 24:REDUCE(with prod 51)]
 [term 25:REDUCE(with prod 51)] [term 26:REDUCE(with prod 51)]
 [term 28:REDUCE(with prod 51)] [term 29:REDUCE(with prod 51)]
 [term 30:REDUCE(with prod 51)] [term 31:REDUCE(with prod 51)]
 [term 32:REDUCE(with prod 51)] [term 33:REDUCE(with prod 51)]
 [term 35:REDUCE(with prod 51)] [term 36:REDUCE(with prod 51)]
 [term 38:REDUCE(with prod 51)] [term 39:REDUCE(with prod 51)]
 [term 40:REDUCE(with prod 51)] [term 41:REDUCE(with prod 51)]
 [term 42:REDUCE(with prod 51)]
From state #47
 [term 5:REDUCE(with prod 71)] [term 6:REDUCE(with prod 71)]
 [term 7:REDUCE(with prod 71)] [term 8:REDUCE(with prod 71)]
 [term 9:REDUCE(with prod 71)] [term 10:REDUCE(with prod 71)]
 [term 11:REDUCE(with prod 71)] [term 12:REDUCE(with prod 71)]
 [term 13:REDUCE(with prod 71)] [term 14:REDUCE(with prod 71)]
 [term 15:REDUCE(with prod 71)] [term 16:REDUCE(with prod 71)]
 [term 17:REDUCE(with prod 71)] [term 18:REDUCE(with prod 71)]
 [term 19:REDUCE(with prod 71)] [term 20:REDUCE(with prod 71)]
 [term 21:REDUCE(with prod 71)] [term 22:REDUCE(with prod 71)]
 [term 23:REDUCE(with prod 71)] [term 24:REDUCE(with prod 71)]
 [term 25:REDUCE(with prod 71)] [term 26:REDUCE(with prod 71)]
 [term 28:REDUCE(with prod 71)] [term 29:REDUCE(with prod 71)]
 [term 30:REDUCE(with prod 71)] [term 31:REDUCE(with prod 71)]
 [term 32:REDUCE(with prod 71)] [term 33:REDUCE(with prod 71)]
 [term 35:REDUCE(with prod 71)] [term 36:REDUCE(with prod 71)]
 [term 38:REDUCE(with prod 71)] [term 39:REDUCE(with prod 71)]
 [term 40:REDUCE(with prod 71)] [term 41:REDUCE(with prod 71)]
 [term 42:REDUCE(with prod 71)]
From state #48
 [term 39:SHIFT(to state 53)]
From state #49
 [term 5:REDUCE(with prod 102)] [term 6:REDUCE(with prod 102)]
 [term 7:REDUCE(with prod 102)] [term 8:REDUCE(with prod 102)]
 [term 9:REDUCE(with prod 102)] [term 10:REDUCE(with prod 102)]
 [term 11:REDUCE(with prod 102)] [term 12:REDUCE(with prod 102)]
 [term 13:REDUCE(with prod 102)] [term 14:REDUCE(with prod 102)]
 [term 15:REDUCE(with prod 102)] [term 16:REDUCE(with prod 102)]
 [term 17:REDUCE(with prod 102)] [term 18:REDUCE(with prod 102)]
 [term 19:REDUCE(with prod 102)] [term 20:REDUCE(with prod 102)]
 [term 21:REDUCE(with prod 102)] [term 22:REDUCE(with prod 102)]
 [term 23:REDUCE(with prod 102)] [term 24:REDUCE(with prod 102)]
 [term 25:REDUCE(with prod 102)] [term 26:REDUCE(with prod 102)]
 [term 28:REDUCE(with prod 102)] [term 29:REDUCE(with prod 102)]
 [term 30:REDUCE(with prod 102)] [term 31:REDUCE(with prod 102)]
 [term 32:REDUCE(with prod 102)] [term 33:REDUCE(with prod 102)]
 [term 35:REDUCE(with prod 102)] [term 36:REDUCE(with prod 102)]
 [term 38:REDUCE(with prod 102)] [term 39:REDUCE(with prod 102)]
 [term 40:REDUCE(with prod 102)] [term 41:REDUCE(with prod 102)]
 [term 42:REDUCE(with prod 102)]
From state #50
 [term 5:REDUCE(with prod 57)] [term 6:REDUCE(with prod 57)]
 [term 7:REDUCE(with prod 57)] [term 8:REDUCE(with prod 57)]
 [term 9:REDUCE(with prod 57)] [term 10:REDUCE(with prod 57)]
 [term 11:REDUCE(with prod 57)] [term 12:REDUCE(with prod 57)]
 [term 13:REDUCE(with prod 57)] [term 14:REDUCE(with prod 57)]
 [term 15:REDUCE(with prod 57)] [term 16:REDUCE(with prod 57)]
 [term 17:REDUCE(with prod 57)] [term 18:REDUCE(with prod 57)]
 [term 19:REDUCE(with prod 57)] [term 20:REDUCE(with prod 57)]
 [term 21:REDUCE(with prod 57)] [term 22:REDUCE(with prod 57)]
 [term 23:REDUCE(with prod 57)] [term 24:REDUCE(with prod 57)]
 [term 25:REDUCE(with prod 57)] [term 26:REDUCE(with prod 57)]
 [term 28:REDUCE(with prod 57)] [term 29:REDUCE(with prod 57)]
 [term 30:REDUCE(with prod 57)] [term 31:REDUCE(with prod 57)]
 [term 32:REDUCE(with prod 57)] [term 33:REDUCE(with prod 57)]
 [term 35:REDUCE(with prod 57)] [term 36:REDUCE(with prod 57)]
 [term 38:REDUCE(with prod 57)] [term 39:REDUCE(with prod 57)]
 [term 40:REDUCE(with prod 57)] [term 41:REDUCE(with prod 57)]
 [term 42:REDUCE(with prod 57)]
From state #51
 [term 5:REDUCE(with prod 73)] [term 6:REDUCE(with prod 73)]
 [term 7:REDUCE(with prod 73)] [term 8:REDUCE(with prod 73)]
 [term 9:REDUCE(with prod 73)] [term 10:REDUCE(with prod 73)]
 [term 11:REDUCE(with prod 73)] [term 12:REDUCE(with prod 73)]
 [term 13:REDUCE(with prod 73)] [term 14:REDUCE(with prod 73)]
 [term 15:REDUCE(with prod 73)] [term 16:REDUCE(with prod 73)]
 [term 17:REDUCE(with prod 73)] [term 18:REDUCE(with prod 73)]
 [term 19:REDUCE(with prod 73)] [term 20:REDUCE(with prod 73)]
 [term 21:REDUCE(with prod 73)] [term 22:REDUCE(with prod 73)]
 [term 23:REDUCE(with prod 73)] [term 24:REDUCE(with prod 73)]
 [term 25:REDUCE(with prod 73)] [term 26:REDUCE(with prod 73)]
 [term 28:REDUCE(with prod 73)] [term 29:REDUCE(with prod 73)]
 [term 30:REDUCE(with prod 73)] [term 31:REDUCE(with prod 73)]
 [term 32:REDUCE(with prod 73)] [term 33:REDUCE(with prod 73)]
 [term 35:REDUCE(with prod 73)] [term 36:REDUCE(with prod 73)]
 [term 38:REDUCE(with prod 73)] [term 39:REDUCE(with prod 73)]
 [term 40:REDUCE(with prod 73)] [term 41:REDUCE(with prod 73)]
 [term 42:REDUCE(with prod 73)]
From state #52
 [term 5:REDUCE(with prod 55)] [term 6:REDUCE(with prod 55)]
 [term 7:REDUCE(with prod 55)] [term 8:REDUCE(with prod 55)]
 [term 9:REDUCE(with prod 55)] [term 10:REDUCE(with prod 55)]
 [term 11:REDUCE(with prod 55)] [term 12:REDUCE(with prod 55)]
 [term 13:REDUCE(with prod 55)] [term 14:REDUCE(with prod 55)]
 [term 15:REDUCE(with prod 55)] [term 16:REDUCE(with prod 55)]
 [term 17:REDUCE(with prod 55)] [term 18:REDUCE(with prod 55)]
 [term 19:REDUCE(with prod 55)] [term 20:REDUCE(with prod 55)]
 [term 21:REDUCE(with prod 55)] [term 22:REDUCE(with prod 55)]
 [term 23:REDUCE(with prod 55)] [term 24:REDUCE(with prod 55)]
 [term 25:REDUCE(with prod 55)] [term 26:REDUCE(with prod 55)]
 [term 28:REDUCE(with prod 55)] [term 29:REDUCE(with prod 55)]
 [term 30:REDUCE(with prod 55)] [term 31:REDUCE(with prod 55)]
 [term 32:REDUCE(with prod 55)] [term 33:REDUCE(with prod 55)]
 [term 35:REDUCE(with prod 55)] [term 36:REDUCE(with prod 55)]
 [term 38:REDUCE(with prod 55)] [term 39:REDUCE(with prod 55)]
 [term 40:REDUCE(with prod 55)] [term 41:REDUCE(with prod 55)]
 [term 42:REDUCE(with prod 55)]
From state #53
 [term 30:SHIFT(to state 55)] [term 34:SHIFT(to state 54)]
From state #54
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #55
 [term 31:SHIFT(to state 56)]
From state #56
 [term 5:REDUCE(with prod 65)] [term 6:REDUCE(with prod 65)]
 [term 7:REDUCE(with prod 65)] [term 8:REDUCE(with prod 65)]
 [term 9:REDUCE(with prod 65)] [term 10:REDUCE(with prod 65)]
 [term 11:REDUCE(with prod 65)] [term 12:REDUCE(with prod 65)]
 [term 13:REDUCE(with prod 65)] [term 14:REDUCE(with prod 65)]
 [term 15:REDUCE(with prod 65)] [term 16:REDUCE(with prod 65)]
 [term 17:REDUCE(with prod 65)] [term 18:REDUCE(with prod 65)]
 [term 19:REDUCE(with prod 65)] [term 20:REDUCE(with prod 65)]
 [term 21:REDUCE(with prod 65)] [term 22:REDUCE(with prod 65)]
 [term 23:REDUCE(with prod 65)] [term 24:REDUCE(with prod 65)]
 [term 25:REDUCE(with prod 65)] [term 26:REDUCE(with prod 65)]
 [term 28:REDUCE(with prod 65)] [term 29:REDUCE(with prod 65)]
 [term 30:REDUCE(with prod 65)] [term 31:REDUCE(with prod 65)]
 [term 32:REDUCE(with prod 65)] [term 33:REDUCE(with prod 65)]
 [term 35:REDUCE(with prod 65)] [term 36:REDUCE(with prod 65)]
 [term 38:REDUCE(with prod 65)] [term 39:REDUCE(with prod 65)]
 [term 40:REDUCE(with prod 65)] [term 41:REDUCE(with prod 65)]
 [term 42:REDUCE(with prod 65)]
From state #57
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 35:SHIFT(to state 69)] [term 38:SHIFT(to state 71)]
From state #58
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #59
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #60
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #61
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #62
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #63
 [term 5:REDUCE(with prod 97)] [term 6:REDUCE(with prod 97)]
 [term 7:REDUCE(with prod 97)] [term 8:REDUCE(with prod 97)]
 [term 9:REDUCE(with prod 97)] [term 10:REDUCE(with prod 97)]
 [term 11:REDUCE(with prod 97)] [term 12:REDUCE(with prod 97)]
 [term 13:REDUCE(with prod 97)] [term 14:REDUCE(with prod 97)]
 [term 15:REDUCE(with prod 97)] [term 16:REDUCE(with prod 97)]
 [term 17:REDUCE(with prod 97)] [term 18:REDUCE(with prod 97)]
 [term 19:REDUCE(with prod 97)] [term 20:REDUCE(with prod 97)]
 [term 21:REDUCE(with prod 97)] [term 22:REDUCE(with prod 97)]
 [term 23:REDUCE(with prod 97)] [term 24:REDUCE(with prod 97)]
 [term 25:REDUCE(with prod 97)] [term 26:REDUCE(with prod 97)]
 [term 28:REDUCE(with prod 97)] [term 29:REDUCE(with prod 97)]
 [term 30:REDUCE(with prod 97)] [term 31:REDUCE(with prod 97)]
 [term 32:REDUCE(with prod 97)] [term 33:REDUCE(with prod 97)]
 [term 35:REDUCE(with prod 97)] [term 36:REDUCE(with prod 97)]
 [term 38:REDUCE(with prod 97)] [term 39:REDUCE(with prod 97)]
 [term 40:REDUCE(with prod 97)] [term 41:REDUCE(with prod 97)]
 [term 42:REDUCE(with prod 97)]
From state #64
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #65
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #66
 [term 5:REDUCE(with prod 99)] [term 6:REDUCE(with prod 99)]
 [term 7:REDUCE(with prod 99)] [term 8:REDUCE(with prod 99)]
 [term 9:REDUCE(with prod 99)] [term 10:REDUCE(with prod 99)]
 [term 11:REDUCE(with prod 99)] [term 12:REDUCE(with prod 99)]
 [term 13:REDUCE(with prod 99)] [term 14:REDUCE(with prod 99)]
 [term 15:REDUCE(with prod 99)] [term 16:REDUCE(with prod 99)]
 [term 17:REDUCE(with prod 99)] [term 18:REDUCE(with prod 99)]
 [term 19:REDUCE(with prod 99)] [term 20:REDUCE(with prod 99)]
 [term 21:REDUCE(with prod 99)] [term 22:REDUCE(with prod 99)]
 [term 23:REDUCE(with prod 99)] [term 24:REDUCE(with prod 99)]
 [term 25:REDUCE(with prod 99)] [term 26:REDUCE(with prod 99)]
 [term 28:REDUCE(with prod 99)] [term 29:REDUCE(with prod 99)]
 [term 30:REDUCE(with prod 99)] [term 31:REDUCE(with prod 99)]
 [term 32:REDUCE(with prod 99)] [term 33:REDUCE(with prod 99)]
 [term 35:REDUCE(with prod 99)] [term 36:REDUCE(with prod 99)]
 [term 38:REDUCE(with prod 99)] [term 39:REDUCE(with prod 99)]
 [term 40:REDUCE(with prod 99)] [term 41:REDUCE(with prod 99)]
 [term 42:REDUCE(with prod 99)]
From state #67
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #68
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #69
 [term 5:REDUCE(with prod 66)] [term 6:REDUCE(with prod 66)]
 [term 7:REDUCE(with prod 66)] [term 8:REDUCE(with prod 66)]
 [term 9:REDUCE(with prod 66)] [term 10:REDUCE(with prod 66)]
 [term 11:REDUCE(with prod 66)] [term 12:REDUCE(with prod 66)]
 [term 13:REDUCE(with prod 66)] [term 14:REDUCE(with prod 66)]
 [term 15:REDUCE(with prod 66)] [term 16:REDUCE(with prod 66)]
 [term 17:REDUCE(with prod 66)] [term 18:REDUCE(with prod 66)]
 [term 19:REDUCE(with prod 66)] [term 20:REDUCE(with prod 66)]
 [term 21:REDUCE(with prod 66)] [term 22:REDUCE(with prod 66)]
 [term 23:REDUCE(with prod 66)] [term 24:REDUCE(with prod 66)]
 [term 25:REDUCE(with prod 66)] [term 26:REDUCE(with prod 66)]
 [term 28:REDUCE(with prod 66)] [term 29:REDUCE(with prod 66)]
 [term 30:REDUCE(with prod 66)] [term 31:REDUCE(with prod 66)]
 [term 32:REDUCE(with prod 66)] [term 33:REDUCE(with prod 66)]
 [term 35:REDUCE(with prod 66)] [term 36:REDUCE(with prod 66)]
 [term 38:REDUCE(with prod 66)] [term 39:REDUCE(with prod 66)]
 [term 40:REDUCE(with prod 66)] [term 41:REDUCE(with prod 66)]
 [term 42:REDUCE(with prod 66)]
From state #70
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #71
 [term 39:SHIFT(to state 82)]
From state #72
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #73
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #74
 [term 39:SHIFT(to state 77)]
From state #75
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #76
 [term 5:REDUCE(with prod 85)] [term 6:REDUCE(with prod 85)]
 [term 7:REDUCE(with prod 85)] [term 8:REDUCE(with prod 85)]
 [term 9:REDUCE(with prod 85)] [term 10:REDUCE(with prod 85)]
 [term 11:REDUCE(with prod 85)] [term 12:REDUCE(with prod 85)]
 [term 13:REDUCE(with prod 85)] [term 14:REDUCE(with prod 85)]
 [term 15:REDUCE(with prod 85)] [term 16:REDUCE(with prod 85)]
 [term 17:REDUCE(with prod 85)] [term 18:REDUCE(with prod 85)]
 [term 19:REDUCE(with prod 85)] [term 20:REDUCE(with prod 85)]
 [term 21:REDUCE(with prod 85)] [term 22:REDUCE(with prod 85)]
 [term 23:REDUCE(with prod 85)] [term 24:REDUCE(with prod 85)]
 [term 25:REDUCE(with prod 85)] [term 26:REDUCE(with prod 85)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 85)] [term 31:REDUCE(with prod 85)]
 [term 32:REDUCE(with prod 85)] [term 33:REDUCE(with prod 85)]
 [term 35:REDUCE(with prod 85)] [term 36:REDUCE(with prod 85)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 85)]
 [term 40:REDUCE(with prod 85)] [term 41:REDUCE(with prod 85)]
 [term 42:REDUCE(with prod 85)]
From state #77
 [term 5:REDUCE(with prod 67)] [term 6:REDUCE(with prod 67)]
 [term 7:REDUCE(with prod 67)] [term 8:REDUCE(with prod 67)]
 [term 9:REDUCE(with prod 67)] [term 10:REDUCE(with prod 67)]
 [term 11:REDUCE(with prod 67)] [term 12:REDUCE(with prod 67)]
 [term 13:REDUCE(with prod 67)] [term 14:REDUCE(with prod 67)]
 [term 15:REDUCE(with prod 67)] [term 16:REDUCE(with prod 67)]
 [term 17:REDUCE(with prod 67)] [term 18:REDUCE(with prod 67)]
 [term 19:REDUCE(with prod 67)] [term 20:REDUCE(with prod 67)]
 [term 21:REDUCE(with prod 67)] [term 22:REDUCE(with prod 67)]
 [term 23:REDUCE(with prod 67)] [term 24:REDUCE(with prod 67)]
 [term 25:REDUCE(with prod 67)] [term 26:REDUCE(with prod 67)]
 [term 28:REDUCE(with prod 67)] [term 29:REDUCE(with prod 67)]
 [term 30:REDUCE(with prod 67)] [term 31:REDUCE(with prod 67)]
 [term 32:REDUCE(with prod 67)] [term 33:REDUCE(with prod 67)]
 [term 34:SHIFT(to state 78)] [term 35:REDUCE(with prod 67)]
 [term 36:REDUCE(with prod 67)] [term 38:REDUCE(with prod 67)]
 [term 39:REDUCE(with prod 67)] [term 40:REDUCE(with prod 67)]
 [term 41:REDUCE(with prod 67)] [term 42:REDUCE(with prod 67)]
From state #78
 [term 35:SHIFT(to state 79)]
From state #79
 [term 5:REDUCE(with prod 68)] [term 6:REDUCE(with prod 68)]
 [term 7:REDUCE(with prod 68)] [term 8:REDUCE(with prod 68)]
 [term 9:REDUCE(with prod 68)] [term 10:REDUCE(with prod 68)]
 [term 11:REDUCE(with prod 68)] [term 12:REDUCE(with prod 68)]
 [term 13:REDUCE(with prod 68)] [term 14:REDUCE(with prod 68)]
 [term 15:REDUCE(with prod 68)] [term 16:REDUCE(with prod 68)]
 [term 17:REDUCE(with prod 68)] [term 18:REDUCE(with prod 68)]
 [term 19:REDUCE(with prod 68)] [term 20:REDUCE(with prod 68)]
 [term 21:REDUCE(with prod 68)] [term 22:REDUCE(with prod 68)]
 [term 23:REDUCE(with prod 68)] [term 24:REDUCE(with prod 68)]
 [term 25:REDUCE(with prod 68)] [term 26:REDUCE(with prod 68)]
 [term 28:REDUCE(with prod 68)] [term 29:REDUCE(with prod 68)]
 [term 30:REDUCE(with prod 68)] [term 31:REDUCE(with prod 68)]
 [term 32:REDUCE(with prod 68)] [term 33:REDUCE(with prod 68)]
 [term 35:REDUCE(with prod 68)] [term 36:REDUCE(with prod 68)]
 [term 38:REDUCE(with prod 68)] [term 39:REDUCE(with prod 68)]
 [term 40:REDUCE(with prod 68)] [term 41:REDUCE(with prod 68)]
 [term 42:REDUCE(with prod 68)]
From state #80
 [term 5:REDUCE(with prod 89)] [term 6:REDUCE(with prod 89)]
 [term 7:REDUCE(with prod 89)] [term 8:REDUCE(with prod 89)]
 [term 9:REDUCE(with prod 89)] [term 10:REDUCE(with prod 89)]
 [term 11:REDUCE(with prod 89)] [term 12:REDUCE(with prod 89)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 89)]
 [term 19:REDUCE(with prod 89)] [term 20:REDUCE(with prod 89)]
 [term 21:REDUCE(with prod 89)] [term 22:REDUCE(with prod 89)]
 [term 23:REDUCE(with prod 89)] [term 24:REDUCE(with prod 89)]
 [term 25:REDUCE(with prod 89)] [term 26:REDUCE(with prod 89)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 89)] [term 31:REDUCE(with prod 89)]
 [term 32:REDUCE(with prod 89)] [term 33:REDUCE(with prod 89)]
 [term 35:REDUCE(with prod 89)] [term 36:REDUCE(with prod 89)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 89)]
 [term 40:REDUCE(with prod 89)] [term 41:REDUCE(with prod 89)]
 [term 42:REDUCE(with prod 89)]
From state #81
 [term 5:REDUCE(with prod 86)] [term 6:REDUCE(with prod 86)]
 [term 7:REDUCE(with prod 86)] [term 8:REDUCE(with prod 86)]
 [term 9:REDUCE(with prod 86)] [term 10:REDUCE(with prod 86)]
 [term 11:REDUCE(with prod 86)] [term 12:SHIFT(to state 74)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 86)]
 [term 19:REDUCE(with prod 86)] [term 20:REDUCE(with prod 86)]
 [term 21:REDUCE(with prod 86)] [term 22:REDUCE(with prod 86)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 86)] [term 31:REDUCE(with prod 86)]
 [term 32:REDUCE(with prod 86)] [term 33:REDUCE(with prod 86)]
 [term 35:REDUCE(with prod 86)] [term 36:REDUCE(with prod 86)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 86)]
 [term 40:REDUCE(with prod 86)] [term 41:REDUCE(with prod 86)]
 [term 42:REDUCE(with prod 86)]
From state #82
 [term 30:SHIFT(to state 83)]
From state #83
From state #84
 [term 31:SHIFT(to state 85)]
From state #85
 [term 5:REDUCE(with prod 64)] [term 6:REDUCE(with prod 64)]
 [term 7:REDUCE(with prod 64)] [term 8:REDUCE(with prod 64)]
 [term 9:REDUCE(with prod 64)] [term 10:REDUCE(with prod 64)]
 [term 11:REDUCE(with prod 64)] [term 12:REDUCE(with prod 64)]
 [term 13:REDUCE(with prod 64)] [term 14:REDUCE(with prod 64)]
 [term 15:REDUCE(with prod 64)] [term 16:REDUCE(with prod 64)]
 [term 17:REDUCE(with prod 64)] [term 18:REDUCE(with prod 64)]
 [term 19:REDUCE(with prod 64)] [term 20:REDUCE(with prod 64)]
 [term 21:REDUCE(with prod 64)] [term 22:REDUCE(with prod 64)]
 [term 23:REDUCE(with prod 64)] [term 24:REDUCE(with prod 64)]
 [term 25:REDUCE(with prod 64)] [term 26:REDUCE(with prod 64)]
 [term 28:REDUCE(with prod 64)] [term 29:REDUCE(with prod 64)]
 [term 30:REDUCE(with prod 64)] [term 31:REDUCE(with prod 64)]
 [term 32:REDUCE(with prod 64)] [term 33:REDUCE(with prod 64)]
 [term 35:REDUCE(with prod 64)] [term 36:REDUCE(with prod 64)]
 [term 38:REDUCE(with prod 64)] [term 39:REDUCE(with prod 64)]
 [term 40:REDUCE(with prod 64)] [term 41:REDUCE(with prod 64)]
 [term 42:REDUCE(with prod 64)]
From state #86
 [term 5:REDUCE(with prod 82)] [term 6:REDUCE(with prod 82)]
 [term 7:REDUCE(with prod 82)] [term 8:REDUCE(with prod 82)]
 [term 9:REDUCE(with prod 82)] [term 10:REDUCE(with prod 82)]
 [term 11:REDUCE(with prod 82)] [term 12:REDUCE(with prod 82)]
 [term 13:REDUCE(with prod 82)] [term 14:REDUCE(with prod 82)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 82)]
 [term 19:REDUCE(with prod 82)] [term 20:REDUCE(with prod 82)]
 [term 21:REDUCE(with prod 82)] [term 22:REDUCE(with prod 82)]
 [term 23:REDUCE(with prod 82)] [term 24:REDUCE(with prod 82)]
 [term 25:REDUCE(with prod 82)] [term 26:REDUCE(with prod 82)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 82)] [term 31:REDUCE(with prod 82)]
 [term 32:REDUCE(with prod 82)] [term 33:REDUCE(with prod 82)]
 [term 35:REDUCE(with prod 82)] [term 36:REDUCE(with prod 82)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 82)]
 [term 40:REDUCE(with prod 82)] [term 41:REDUCE(with prod 82)]
 [term 42:REDUCE(with prod 82)]
From state #87
 [term 5:REDUCE(with prod 84)] [term 6:REDUCE(with prod 84)]
 [term 7:REDUCE(with prod 84)] [term 8:REDUCE(with prod 84)]
 [term 9:REDUCE(with prod 84)] [term 10:REDUCE(with prod 84)]
 [term 11:REDUCE(with prod 84)] [term 12:REDUCE(with prod 84)]
 [term 13:REDUCE(with prod 84)] [term 14:REDUCE(with prod 84)]
 [term 15:REDUCE(with prod 84)] [term 16:REDUCE(with prod 84)]
 [term 17:REDUCE(with prod 84)] [term 18:REDUCE(with prod 84)]
 [term 19:REDUCE(with prod 84)] [term 20:REDUCE(with prod 84)]
 [term 21:REDUCE(with prod 84)] [term 22:REDUCE(with prod 84)]
 [term 23:REDUCE(with prod 84)] [term 24:REDUCE(with prod 84)]
 [term 25:REDUCE(with prod 84)] [term 26:REDUCE(with prod 84)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 84)] [term 31:REDUCE(with prod 84)]
 [term 32:REDUCE(with prod 84)] [term 33:REDUCE(with prod 84)]
 [term 35:REDUCE(with prod 84)] [term 36:REDUCE(with prod 84)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 84)]
 [term 40:REDUCE(with prod 84)] [term 41:REDUCE(with prod 84)]
 [term 42:REDUCE(with prod 84)]
From state #88
 [term 5:REDUCE(with prod 90)] [term 6:REDUCE(with prod 90)]
 [term 7:REDUCE(with prod 90)] [term 8:REDUCE(with prod 90)]
 [term 9:REDUCE(with prod 90)] [term 10:REDUCE(with prod 90)]
 [term 11:REDUCE(with prod 90)] [term 12:REDUCE(with prod 90)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 90)]
 [term 19:REDUCE(with prod 90)] [term 20:REDUCE(with prod 90)]
 [term 21:REDUCE(with prod 90)] [term 22:REDUCE(with prod 90)]
 [term 23:REDUCE(with prod 90)] [term 24:REDUCE(with prod 90)]
 [term 25:REDUCE(with prod 90)] [term 26:REDUCE(with prod 90)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 90)] [term 31:REDUCE(with prod 90)]
 [term 32:REDUCE(with prod 90)] [term 33:REDUCE(with prod 90)]
 [term 35:REDUCE(with prod 90)] [term 36:REDUCE(with prod 90)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 90)]
 [term 40:REDUCE(with prod 90)] [term 41:REDUCE(with prod 90)]
 [term 42:REDUCE(with prod 90)]
From state #89
 [term 5:REDUCE(with prod 93)] [term 6:REDUCE(with prod 93)]
 [term 7:REDUCE(with prod 93)] [term 8:REDUCE(with prod 93)]
 [term 9:REDUCE(with prod 93)] [term 10:REDUCE(with prod 93)]
 [term 11:REDUCE(with prod 93)] [term 12:SHIFT(to state 74)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 93)]
 [term 19:SHIFT(to state 60)] [term 20:REDUCE(with prod 93)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 93)] [term 31:REDUCE(with prod 93)]
 [term 32:REDUCE(with prod 93)] [term 33:REDUCE(with prod 93)]
 [term 35:REDUCE(with prod 93)] [term 36:REDUCE(with prod 93)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 93)]
 [term 40:REDUCE(with prod 93)] [term 41:REDUCE(with prod 93)]
 [term 42:REDUCE(with prod 93)]
From state #90
 [term 5:REDUCE(with prod 81)] [term 6:REDUCE(with prod 81)]
 [term 7:REDUCE(with prod 81)] [term 8:REDUCE(with prod 81)]
 [term 9:REDUCE(with prod 81)] [term 10:REDUCE(with prod 81)]
 [term 11:REDUCE(with prod 81)] [term 12:REDUCE(with prod 81)]
 [term 13:REDUCE(with prod 81)] [term 14:REDUCE(with prod 81)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 81)]
 [term 19:REDUCE(with prod 81)] [term 20:REDUCE(with prod 81)]
 [term 21:REDUCE(with prod 81)] [term 22:REDUCE(with prod 81)]
 [term 23:REDUCE(with prod 81)] [term 24:REDUCE(with prod 81)]
 [term 25:REDUCE(with prod 81)] [term 26:REDUCE(with prod 81)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 81)] [term 31:REDUCE(with prod 81)]
 [term 32:REDUCE(with prod 81)] [term 33:REDUCE(with prod 81)]
 [term 35:REDUCE(with prod 81)] [term 36:REDUCE(with prod 81)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 81)]
 [term 40:REDUCE(with prod 81)] [term 41:REDUCE(with prod 81)]
 [term 42:REDUCE(with prod 81)]
From state #91
 [term 5:REDUCE(with prod 87)] [term 6:REDUCE(with prod 87)]
 [term 7:REDUCE(with prod 87)] [term 8:REDUCE(with prod 87)]
 [term 9:REDUCE(with prod 87)] [term 10:REDUCE(with prod 87)]
 [term 11:REDUCE(with prod 87)] [term 12:SHIFT(to state 74)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 87)]
 [term 19:REDUCE(with prod 87)] [term 20:REDUCE(with prod 87)]
 [term 21:REDUCE(with prod 87)] [term 22:REDUCE(with prod 87)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 87)] [term 31:REDUCE(with prod 87)]
 [term 32:REDUCE(with prod 87)] [term 33:REDUCE(with prod 87)]
 [term 35:REDUCE(with prod 87)] [term 36:REDUCE(with prod 87)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 87)]
 [term 40:REDUCE(with prod 87)] [term 41:REDUCE(with prod 87)]
 [term 42:REDUCE(with prod 87)]
From state #92
 [term 5:REDUCE(with prod 88)] [term 6:REDUCE(with prod 88)]
 [term 7:REDUCE(with prod 88)] [term 8:REDUCE(with prod 88)]
 [term 9:REDUCE(with prod 88)] [term 10:REDUCE(with prod 88)]
 [term 11:REDUCE(with prod 88)] [term 12:REDUCE(with prod 88)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 88)]
 [term 19:REDUCE(with prod 88)] [term 20:REDUCE(with prod 88)]
 [term 21:REDUCE(with prod 88)] [term 22:REDUCE(with prod 88)]
 [term 23:REDUCE(with prod 88)] [term 24:REDUCE(with prod 88)]
 [term 25:REDUCE(with prod 88)] [term 26:REDUCE(with prod 88)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 88)] [term 31:REDUCE(with prod 88)]
 [term 32:REDUCE(with prod 88)] [term 33:REDUCE(with prod 88)]
 [term 35:REDUCE(with prod 88)] [term 36:REDUCE(with prod 88)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 88)]
 [term 40:REDUCE(with prod 88)] [term 41:REDUCE(with prod 88)]
 [term 42:REDUCE(with prod 88)]
From state #93
 [term 5:REDUCE(with prod 92)] [term 6:REDUCE(with prod 92)]
 [term 7:REDUCE(with prod 92)] [term 8:REDUCE(with prod 92)]
 [term 9:REDUCE(with prod 92)] [term 10:REDUCE(with prod 92)]
 [term 11:REDUCE(with prod 92)] [term 12:SHIFT(to state 74)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 92)]
 [term 19:REDUCE(with prod 92)] [term 20:REDUCE(with prod 92)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 92)] [term 31:REDUCE(with prod 92)]
 [term 32:REDUCE(with prod 92)] [term 33:REDUCE(with prod 92)]
 [term 35:REDUCE(with prod 92)] [term 36:REDUCE(with prod 92)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 92)]
 [term 40:REDUCE(with prod 92)] [term 41:REDUCE(with prod 92)]
 [term 42:REDUCE(with prod 92)]
From state #94
 [term 5:REDUCE(with prod 91)] [term 6:REDUCE(with prod 91)]
 [term 7:REDUCE(with prod 91)] [term 8:REDUCE(with prod 91)]
 [term 9:REDUCE(with prod 91)] [term 10:REDUCE(with prod 91)]
 [term 11:REDUCE(with prod 91)] [term 12:REDUCE(with prod 91)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 91)]
 [term 19:REDUCE(with prod 91)] [term 20:REDUCE(with prod 91)]
 [term 21:REDUCE(with prod 91)] [term 22:REDUCE(with prod 91)]
 [term 23:REDUCE(with prod 91)] [term 24:REDUCE(with prod 91)]
 [term 25:REDUCE(with prod 91)] [term 26:REDUCE(with prod 91)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 91)] [term 31:REDUCE(with prod 91)]
 [term 32:REDUCE(with prod 91)] [term 33:REDUCE(with prod 91)]
 [term 35:REDUCE(with prod 91)] [term 36:REDUCE(with prod 91)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 91)]
 [term 40:REDUCE(with prod 91)] [term 41:REDUCE(with prod 91)]
 [term 42:REDUCE(with prod 91)]
From state #95
 [term 5:REDUCE(with prod 83)] [term 6:REDUCE(with prod 83)]
 [term 7:REDUCE(with prod 83)] [term 8:REDUCE(with prod 83)]
 [term 9:REDUCE(with prod 83)] [term 10:REDUCE(with prod 83)]
 [term 11:REDUCE(with prod 83)] [term 12:REDUCE(with prod 83)]
 [term 13:REDUCE(with prod 83)] [term 14:REDUCE(with prod 83)]
 [term 15:REDUCE(with prod 83)] [term 16:REDUCE(with prod 83)]
 [term 17:REDUCE(with prod 83)] [term 18:REDUCE(with prod 83)]
 [term 19:REDUCE(with prod 83)] [term 20:REDUCE(with prod 83)]
 [term 21:REDUCE(with prod 83)] [term 22:REDUCE(with prod 83)]
 [term 23:REDUCE(with prod 83)] [term 24:REDUCE(with prod 83)]
 [term 25:REDUCE(with prod 83)] [term 26:REDUCE(with prod 83)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 83)] [term 31:REDUCE(with prod 83)]
 [term 32:REDUCE(with prod 83)] [term 33:REDUCE(with prod 83)]
 [term 35:REDUCE(with prod 83)] [term 36:REDUCE(with prod 83)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 83)]
 [term 40:REDUCE(with prod 83)] [term 41:REDUCE(with prod 83)]
 [term 42:REDUCE(with prod 83)]
From state #96
 [term 5:REDUCE(with prod 94)] [term 6:REDUCE(with prod 94)]
 [term 7:REDUCE(with prod 94)] [term 8:REDUCE(with prod 94)]
 [term 9:REDUCE(with prod 94)] [term 10:REDUCE(with prod 94)]
 [term 11:REDUCE(with prod 94)] [term 12:REDUCE(with prod 94)]
 [term 13:REDUCE(with prod 94)] [term 14:REDUCE(with prod 94)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 94)]
 [term 19:REDUCE(with prod 94)] [term 20:REDUCE(with prod 94)]
 [term 21:REDUCE(with prod 94)] [term 22:REDUCE(with prod 94)]
 [term 23:REDUCE(with prod 94)] [term 24:REDUCE(with prod 94)]
 [term 25:REDUCE(with prod 94)] [term 26:REDUCE(with prod 94)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 94)] [term 31:REDUCE(with prod 94)]
 [term 32:REDUCE(with prod 94)] [term 33:REDUCE(with prod 94)]
 [term 35:REDUCE(with prod 94)] [term 36:REDUCE(with prod 94)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 94)]
 [term 40:REDUCE(with prod 94)] [term 41:REDUCE(with prod 94)]
 [term 42:REDUCE(with prod 94)]
From state #97
 [term 34:SHIFT(to state 117)]
From state #98
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #99
From state #100
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #101
 [term 39:SHIFT(to state 102)]
From state #102
 [term 5:REDUCE(with prod 100)] [term 6:REDUCE(with prod 100)]
 [term 7:REDUCE(with prod 100)] [term 8:REDUCE(with prod 100)]
 [term 9:REDUCE(with prod 100)] [term 10:REDUCE(with prod 100)]
 [term 11:REDUCE(with prod 100)] [term 12:REDUCE(with prod 100)]
 [term 13:REDUCE(with prod 100)] [term 14:REDUCE(with prod 100)]
 [term 15:REDUCE(with prod 100)] [term 16:REDUCE(with prod 100)]
 [term 17:REDUCE(with prod 100)] [term 18:REDUCE(with prod 100)]
 [term 19:REDUCE(with prod 100)] [term 20:REDUCE(with prod 100)]
 [term 21:REDUCE(with prod 100)] [term 22:REDUCE(with prod 100)]
 [term 23:REDUCE(with prod 100)] [term 24:REDUCE(with prod 100)]
 [term 25:REDUCE(with prod 100)] [term 26:REDUCE(with prod 100)]
 [term 27:SHIFT(to state 104)] [term 28:REDUCE(with prod 100)]
 [term 29:REDUCE(with prod 100)] [term 30:REDUCE(with prod 100)]
 [term 31:REDUCE(with prod 100)] [term 32:REDUCE(with prod 100)]
 [term 33:REDUCE(with prod 100)] [term 34:SHIFT(to state 103)]
 [term 35:REDUCE(with prod 100)] [term 36:REDUCE(with prod 100)]
 [term 38:REDUCE(with prod 100)] [term 39:REDUCE(with prod 100)]
 [term 40:REDUCE(with prod 100)] [term 41:REDUCE(with prod 100)]
 [term 42:REDUCE(with prod 100)]
From state #103
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #104
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #105
 [term 5:REDUCE(with prod 61)] [term 6:REDUCE(with prod 61)]
 [term 7:REDUCE(with prod 61)] [term 8:REDUCE(with prod 61)]
 [term 9:REDUCE(with prod 61)] [term 10:REDUCE(with prod 61)]
 [term 11:REDUCE(with prod 61)] [term 12:SHIFT(to state 74)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 61)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 61)] [term 31:REDUCE(with prod 61)]
 [term 32:REDUCE(with prod 61)] [term 33:REDUCE(with prod 61)]
 [term 35:REDUCE(with prod 61)] [term 36:REDUCE(with prod 61)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 61)]
 [term 40:REDUCE(with prod 61)] [term 41:REDUCE(with prod 61)]
 [term 42:REDUCE(with prod 61)]
From state #106
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 35:SHIFT(to state 107)] [term 38:SHIFT(to state 71)]
From state #107
 [term 27:SHIFT(to state 108)]
From state #108
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #109
 [term 5:REDUCE(with prod 106)] [term 6:REDUCE(with prod 106)]
 [term 7:REDUCE(with prod 106)] [term 8:REDUCE(with prod 106)]
 [term 9:REDUCE(with prod 106)] [term 10:REDUCE(with prod 106)]
 [term 11:REDUCE(with prod 106)] [term 12:SHIFT(to state 74)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 106)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 106)] [term 31:REDUCE(with prod 106)]
 [term 32:REDUCE(with prod 106)] [term 33:REDUCE(with prod 106)]
 [term 35:REDUCE(with prod 106)] [term 36:REDUCE(with prod 106)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 106)]
 [term 40:REDUCE(with prod 106)] [term 41:REDUCE(with prod 106)]
 [term 42:REDUCE(with prod 106)]
From state #110
 [term 5:REDUCE(with prod 60)] [term 6:REDUCE(with prod 60)]
 [term 7:REDUCE(with prod 60)] [term 8:REDUCE(with prod 60)]
 [term 9:REDUCE(with prod 60)] [term 10:REDUCE(with prod 60)]
 [term 11:REDUCE(with prod 60)] [term 12:SHIFT(to state 74)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 60)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 60)] [term 31:REDUCE(with prod 60)]
 [term 32:REDUCE(with prod 60)] [term 33:REDUCE(with prod 60)]
 [term 35:REDUCE(with prod 60)] [term 36:REDUCE(with prod 60)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 60)]
 [term 40:REDUCE(with prod 60)] [term 41:REDUCE(with prod 60)]
 [term 42:REDUCE(with prod 60)]
From state #111
 [term 31:SHIFT(to state 112)]
From state #112
 [term 5:REDUCE(with prod 63)] [term 6:REDUCE(with prod 63)]
 [term 7:REDUCE(with prod 63)] [term 8:REDUCE(with prod 63)]
 [term 9:REDUCE(with prod 63)] [term 10:REDUCE(with prod 63)]
 [term 11:REDUCE(with prod 63)] [term 12:REDUCE(with prod 63)]
 [term 13:REDUCE(with prod 63)] [term 14:REDUCE(with prod 63)]
 [term 15:REDUCE(with prod 63)] [term 16:REDUCE(with prod 63)]
 [term 17:REDUCE(with prod 63)] [term 18:REDUCE(with prod 63)]
 [term 19:REDUCE(with prod 63)] [term 20:REDUCE(with prod 63)]
 [term 21:REDUCE(with prod 63)] [term 22:REDUCE(with prod 63)]
 [term 23:REDUCE(with prod 63)] [term 24:REDUCE(with prod 63)]
 [term 25:REDUCE(with prod 63)] [term 26:REDUCE(with prod 63)]
 [term 28:REDUCE(with prod 63)] [term 29:REDUCE(with prod 63)]
 [term 30:REDUCE(with prod 63)] [term 31:REDUCE(with prod 63)]
 [term 32:REDUCE(with prod 63)] [term 33:REDUCE(with prod 63)]
 [term 35:REDUCE(with prod 63)] [term 36:REDUCE(with prod 63)]
 [term 38:REDUCE(with prod 63)] [term 39:REDUCE(with prod 63)]
 [term 40:REDUCE(with prod 63)] [term 41:REDUCE(with prod 63)]
 [term 42:REDUCE(with prod 63)]
From state #113
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 35:SHIFT(to state 114)] [term 38:SHIFT(to state 71)]
From state #114
 [term 5:REDUCE(with prod 103)] [term 6:REDUCE(with prod 103)]
 [term 7:REDUCE(with prod 103)] [term 8:REDUCE(with prod 103)]
 [term 9:REDUCE(with prod 103)] [term 10:REDUCE(with prod 103)]
 [term 11:REDUCE(with prod 103)] [term 12:REDUCE(with prod 103)]
 [term 13:REDUCE(with prod 103)] [term 14:REDUCE(with prod 103)]
 [term 15:REDUCE(with prod 103)] [term 16:REDUCE(with prod 103)]
 [term 17:REDUCE(with prod 103)] [term 18:REDUCE(with prod 103)]
 [term 19:REDUCE(with prod 103)] [term 20:REDUCE(with prod 103)]
 [term 21:REDUCE(with prod 103)] [term 22:REDUCE(with prod 103)]
 [term 23:REDUCE(with prod 103)] [term 24:REDUCE(with prod 103)]
 [term 25:REDUCE(with prod 103)] [term 26:REDUCE(with prod 103)]
 [term 27:SHIFT(to state 115)] [term 28:REDUCE(with prod 103)]
 [term 29:REDUCE(with prod 103)] [term 30:REDUCE(with prod 103)]
 [term 31:REDUCE(with prod 103)] [term 32:REDUCE(with prod 103)]
 [term 33:REDUCE(with prod 103)] [term 35:REDUCE(with prod 103)]
 [term 36:REDUCE(with prod 103)] [term 38:REDUCE(with prod 103)]
 [term 39:REDUCE(with prod 103)] [term 40:REDUCE(with prod 103)]
 [term 41:REDUCE(with prod 103)] [term 42:REDUCE(with prod 103)]
From state #115
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #116
 [term 5:REDUCE(with prod 105)] [term 6:REDUCE(with prod 105)]
 [term 7:REDUCE(with prod 105)] [term 8:REDUCE(with prod 105)]
 [term 9:REDUCE(with prod 105)] [term 10:REDUCE(with prod 105)]
 [term 11:REDUCE(with prod 105)] [term 12:SHIFT(to state 74)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 105)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 105)] [term 31:REDUCE(with prod 105)]
 [term 32:REDUCE(with prod 105)] [term 33:REDUCE(with prod 105)]
 [term 35:REDUCE(with prod 105)] [term 36:REDUCE(with prod 105)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 105)]
 [term 40:REDUCE(with prod 105)] [term 41:REDUCE(with prod 105)]
 [term 42:REDUCE(with prod 105)]
From state #117
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #118
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 35:SHIFT(to state 119)] [term 38:SHIFT(to state 71)]
From state #119
 [term 5:REDUCE(with prod 104)] [term 6:REDUCE(with prod 104)]
 [term 7:REDUCE(with prod 104)] [term 8:REDUCE(with prod 104)]
 [term 9:REDUCE(with prod 104)] [term 10:REDUCE(with prod 104)]
 [term 11:REDUCE(with prod 104)] [term 12:REDUCE(with prod 104)]
 [term 13:REDUCE(with prod 104)] [term 14:REDUCE(with prod 104)]
 [term 15:REDUCE(with prod 104)] [term 16:REDUCE(with prod 104)]
 [term 17:REDUCE(with prod 104)] [term 18:REDUCE(with prod 104)]
 [term 19:REDUCE(with prod 104)] [term 20:REDUCE(with prod 104)]
 [term 21:REDUCE(with prod 104)] [term 22:REDUCE(with prod 104)]
 [term 23:REDUCE(with prod 104)] [term 24:REDUCE(with prod 104)]
 [term 25:REDUCE(with prod 104)] [term 26:REDUCE(with prod 104)]
 [term 28:REDUCE(with prod 104)] [term 29:REDUCE(with prod 104)]
 [term 30:REDUCE(with prod 104)] [term 31:REDUCE(with prod 104)]
 [term 32:REDUCE(with prod 104)] [term 33:REDUCE(with prod 104)]
 [term 35:REDUCE(with prod 104)] [term 36:REDUCE(with prod 104)]
 [term 38:REDUCE(with prod 104)] [term 39:REDUCE(with prod 104)]
 [term 40:REDUCE(with prod 104)] [term 41:REDUCE(with prod 104)]
 [term 42:REDUCE(with prod 104)]
From state #120
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 31:SHIFT(to state 132)] [term 38:SHIFT(to state 71)]
From state #121
 [term 12:REDUCE(with prod 101)] [term 13:REDUCE(with prod 101)]
 [term 14:REDUCE(with prod 101)] [term 15:REDUCE(with prod 101)]
 [term 16:REDUCE(with prod 101)] [term 17:REDUCE(with prod 101)]
 [term 19:REDUCE(with prod 101)] [term 20:REDUCE(with prod 101)]
 [term 21:REDUCE(with prod 101)] [term 22:REDUCE(with prod 101)]
 [term 23:REDUCE(with prod 101)] [term 24:REDUCE(with prod 101)]
 [term 25:REDUCE(with prod 101)] [term 26:REDUCE(with prod 101)]
 [term 27:SHIFT(to state 100)] [term 28:REDUCE(with prod 101)]
 [term 29:REDUCE(with prod 101)] [term 30:SHIFT(to state 99)]
 [term 31:SHIFT(to state 122)] [term 34:SHIFT(to state 123)]
 [term 38:SHIFT(to state 101)] [term 39:SHIFT(to state 97)]
From state #122
 [term 30:SHIFT(to state 129)]
From state #123
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 35:SHIFT(to state 124)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #124
 [term 31:SHIFT(to state 125)]
From state #125
 [term 30:SHIFT(to state 126)]
From state #126
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #127
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 31:SHIFT(to state 128)] [term 38:SHIFT(to state 71)]
From state #128
 [term 5:REDUCE(with prod 70)] [term 6:REDUCE(with prod 70)]
 [term 7:REDUCE(with prod 70)] [term 8:REDUCE(with prod 70)]
 [term 9:REDUCE(with prod 70)] [term 10:REDUCE(with prod 70)]
 [term 11:REDUCE(with prod 70)] [term 12:REDUCE(with prod 70)]
 [term 13:REDUCE(with prod 70)] [term 14:REDUCE(with prod 70)]
 [term 15:REDUCE(with prod 70)] [term 16:REDUCE(with prod 70)]
 [term 17:REDUCE(with prod 70)] [term 18:REDUCE(with prod 70)]
 [term 19:REDUCE(with prod 70)] [term 20:REDUCE(with prod 70)]
 [term 21:REDUCE(with prod 70)] [term 22:REDUCE(with prod 70)]
 [term 23:REDUCE(with prod 70)] [term 24:REDUCE(with prod 70)]
 [term 25:REDUCE(with prod 70)] [term 26:REDUCE(with prod 70)]
 [term 28:REDUCE(with prod 70)] [term 29:REDUCE(with prod 70)]
 [term 30:REDUCE(with prod 70)] [term 31:REDUCE(with prod 70)]
 [term 32:REDUCE(with prod 70)] [term 33:REDUCE(with prod 70)]
 [term 35:REDUCE(with prod 70)] [term 36:REDUCE(with prod 70)]
 [term 38:REDUCE(with prod 70)] [term 39:REDUCE(with prod 70)]
 [term 40:REDUCE(with prod 70)] [term 41:REDUCE(with prod 70)]
 [term 42:REDUCE(with prod 70)]
From state #129
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #130
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 31:SHIFT(to state 131)] [term 38:SHIFT(to state 71)]
From state #131
 [term 5:REDUCE(with prod 69)] [term 6:REDUCE(with prod 69)]
 [term 7:REDUCE(with prod 69)] [term 8:REDUCE(with prod 69)]
 [term 9:REDUCE(with prod 69)] [term 10:REDUCE(with prod 69)]
 [term 11:REDUCE(with prod 69)] [term 12:REDUCE(with prod 69)]
 [term 13:REDUCE(with prod 69)] [term 14:REDUCE(with prod 69)]
 [term 15:REDUCE(with prod 69)] [term 16:REDUCE(with prod 69)]
 [term 17:REDUCE(with prod 69)] [term 18:REDUCE(with prod 69)]
 [term 19:REDUCE(with prod 69)] [term 20:REDUCE(with prod 69)]
 [term 21:REDUCE(with prod 69)] [term 22:REDUCE(with prod 69)]
 [term 23:REDUCE(with prod 69)] [term 24:REDUCE(with prod 69)]
 [term 25:REDUCE(with prod 69)] [term 26:REDUCE(with prod 69)]
 [term 28:REDUCE(with prod 69)] [term 29:REDUCE(with prod 69)]
 [term 30:REDUCE(with prod 69)] [term 31:REDUCE(with prod 69)]
 [term 32:REDUCE(with prod 69)] [term 33:REDUCE(with prod 69)]
 [term 35:REDUCE(with prod 69)] [term 36:REDUCE(with prod 69)]
 [term 38:REDUCE(with prod 69)] [term 39:REDUCE(with prod 69)]
 [term 40:REDUCE(with prod 69)] [term 41:REDUCE(with prod 69)]
 [term 42:REDUCE(with prod 69)]
From state #132
 [term 5:REDUCE(with prod 59)] [term 6:REDUCE(with prod 59)]
 [term 7:REDUCE(with prod 59)] [term 8:REDUCE(with prod 59)]
 [term 9:REDUCE(with prod 59)] [term 10:REDUCE(with prod 59)]
 [term 11:REDUCE(with prod 59)] [term 12:REDUCE(with prod 59)]
 [term 13:REDUCE(with prod 59)] [term 14:REDUCE(with prod 59)]
 [term 15:REDUCE(with prod 59)] [term 16:REDUCE(with prod 59)]
 [term 17:REDUCE(with prod 59)] [term 18:REDUCE(with prod 59)]
 [term 19:REDUCE(with prod 59)] [term 20:REDUCE(with prod 59)]
 [term 21:REDUCE(with prod 59)] [term 22:REDUCE(with prod 59)]
 [term 23:REDUCE(with prod 59)] [term 24:REDUCE(with prod 59)]
 [term 25:REDUCE(with prod 59)] [term 26:REDUCE(with prod 59)]
 [term 28:REDUCE(with prod 59)] [term 29:REDUCE(with prod 59)]
 [term 30:REDUCE(with prod 59)] [term 31:REDUCE(with prod 59)]
 [term 32:REDUCE(with prod 59)] [term 33:REDUCE(with prod 59)]
 [term 35:REDUCE(with prod 59)] [term 36:REDUCE(with prod 59)]
 [term 38:REDUCE(with prod 59)] [term 39:REDUCE(with prod 59)]
 [term 40:REDUCE(with prod 59)] [term 41:REDUCE(with prod 59)]
 [term 42:REDUCE(with prod 59)]
From state #133
 [term 5:REDUCE(with prod 98)] [term 6:REDUCE(with prod 98)]
 [term 7:REDUCE(with prod 98)] [term 8:REDUCE(with prod 98)]
 [term 9:REDUCE(with prod 98)] [term 10:REDUCE(with prod 98)]
 [term 11:REDUCE(with prod 98)] [term 12:REDUCE(with prod 98)]
 [term 13:REDUCE(with prod 98)] [term 14:REDUCE(with prod 98)]
 [term 15:REDUCE(with prod 98)] [term 16:REDUCE(with prod 98)]
 [term 17:REDUCE(with prod 98)] [term 18:REDUCE(with prod 98)]
 [term 19:REDUCE(with prod 98)] [term 20:REDUCE(with prod 98)]
 [term 21:REDUCE(with prod 98)] [term 22:REDUCE(with prod 98)]
 [term 23:REDUCE(with prod 98)] [term 24:REDUCE(with prod 98)]
 [term 25:REDUCE(with prod 98)] [term 26:REDUCE(with prod 98)]
 [term 28:REDUCE(with prod 98)] [term 29:REDUCE(with prod 98)]
 [term 30:REDUCE(with prod 98)] [term 31:REDUCE(with prod 98)]
 [term 32:REDUCE(with prod 98)] [term 33:REDUCE(with prod 98)]
 [term 35:REDUCE(with prod 98)] [term 36:REDUCE(with prod 98)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 98)]
 [term 40:REDUCE(with prod 98)] [term 41:REDUCE(with prod 98)]
 [term 42:REDUCE(with prod 98)]
From state #134
 [term 5:REDUCE(with prod 95)] [term 6:REDUCE(with prod 95)]
 [term 7:REDUCE(with prod 95)] [term 8:REDUCE(with prod 95)]
 [term 9:REDUCE(with prod 95)] [term 10:REDUCE(with prod 95)]
 [term 11:REDUCE(with prod 95)] [term 12:REDUCE(with prod 95)]
 [term 13:REDUCE(with prod 95)] [term 14:REDUCE(with prod 95)]
 [term 15:REDUCE(with prod 95)] [term 16:REDUCE(with prod 95)]
 [term 17:REDUCE(with prod 95)] [term 18:REDUCE(with prod 95)]
 [term 19:REDUCE(with prod 95)] [term 20:REDUCE(with prod 95)]
 [term 21:REDUCE(with prod 95)] [term 22:REDUCE(with prod 95)]
 [term 23:REDUCE(with prod 95)] [term 24:REDUCE(with prod 95)]
 [term 25:REDUCE(with prod 95)] [term 26:REDUCE(with prod 95)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 95)] [term 31:REDUCE(with prod 95)]
 [term 32:REDUCE(with prod 95)] [term 33:REDUCE(with prod 95)]
 [term 35:REDUCE(with prod 95)] [term 36:REDUCE(with prod 95)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 95)]
 [term 40:REDUCE(with prod 95)] [term 41:REDUCE(with prod 95)]
 [term 42:REDUCE(with prod 95)]
From state #135
 [term 33:REDUCE(with prod 16)] [term 39:REDUCE(with prod 16)]
From state #136
 [term 5:REDUCE(with prod 96)] [term 6:REDUCE(with prod 96)]
 [term 7:REDUCE(with prod 96)] [term 8:REDUCE(with prod 96)]
 [term 9:REDUCE(with prod 96)] [term 10:REDUCE(with prod 96)]
 [term 11:REDUCE(with prod 96)] [term 12:REDUCE(with prod 96)]
 [term 13:REDUCE(with prod 96)] [term 14:REDUCE(with prod 96)]
 [term 15:REDUCE(with prod 96)] [term 16:REDUCE(with prod 96)]
 [term 17:REDUCE(with prod 96)] [term 18:REDUCE(with prod 96)]
 [term 19:REDUCE(with prod 96)] [term 20:REDUCE(with prod 96)]
 [term 21:REDUCE(with prod 96)] [term 22:REDUCE(with prod 96)]
 [term 23:REDUCE(with prod 96)] [term 24:REDUCE(with prod 96)]
 [term 25:REDUCE(with prod 96)] [term 26:REDUCE(with prod 96)]
 [term 28:REDUCE(with prod 96)] [term 29:REDUCE(with prod 96)]
 [term 30:REDUCE(with prod 96)] [term 31:REDUCE(with prod 96)]
 [term 32:REDUCE(with prod 96)] [term 33:REDUCE(with prod 96)]
 [term 35:REDUCE(with prod 96)] [term 36:REDUCE(with prod 96)]
 [term 38:SHIFT(to state 71)] [term 39:REDUCE(with prod 96)]
 [term 40:REDUCE(with prod 96)] [term 41:REDUCE(with prod 96)]
 [term 42:REDUCE(with prod 96)]
From state #137
 [term 34:SHIFT(to state 220)] [term 39:SHIFT(to state 219)]
From state #138
 [term 31:SHIFT(to state 141)] [term 37:SHIFT(to state 140)]
From state #139
 [term 31:REDUCE(with prod 18)] [term 37:REDUCE(with prod 18)]
From state #140
 [term 39:SHIFT(to state 137)]
From state #141
 [term 32:SHIFT(to state 142)]
From state #142
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 33:REDUCE(with prod 22)] [term 39:SHIFT(to state 148)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #143
 [term 5:REDUCE(with prod 29)] [term 6:REDUCE(with prod 29)]
 [term 7:REDUCE(with prod 29)] [term 8:REDUCE(with prod 29)]
 [term 9:REDUCE(with prod 29)] [term 10:REDUCE(with prod 29)]
 [term 11:REDUCE(with prod 29)] [term 14:REDUCE(with prod 29)]
 [term 18:REDUCE(with prod 29)] [term 28:REDUCE(with prod 29)]
 [term 29:REDUCE(with prod 29)] [term 30:REDUCE(with prod 29)]
 [term 32:REDUCE(with prod 29)] [term 33:REDUCE(with prod 29)]
 [term 39:REDUCE(with prod 29)] [term 40:REDUCE(with prod 29)]
 [term 41:REDUCE(with prod 29)] [term 42:REDUCE(with prod 29)]
From state #144
 [term 30:SHIFT(to state 188)]
From state #145
 [term 5:REDUCE(with prod 30)] [term 6:REDUCE(with prod 30)]
 [term 7:REDUCE(with prod 30)] [term 8:REDUCE(with prod 30)]
 [term 9:REDUCE(with prod 30)] [term 10:REDUCE(with prod 30)]
 [term 11:REDUCE(with prod 30)] [term 14:REDUCE(with prod 30)]
 [term 18:REDUCE(with prod 30)] [term 28:REDUCE(with prod 30)]
 [term 29:REDUCE(with prod 30)] [term 30:REDUCE(with prod 30)]
 [term 32:REDUCE(with prod 30)] [term 33:REDUCE(with prod 30)]
 [term 39:REDUCE(with prod 30)] [term 40:REDUCE(with prod 30)]
 [term 41:REDUCE(with prod 30)] [term 42:REDUCE(with prod 30)]
From state #146
 [term 5:REDUCE(with prod 31)] [term 6:REDUCE(with prod 31)]
 [term 7:REDUCE(with prod 31)] [term 8:REDUCE(with prod 31)]
 [term 9:REDUCE(with prod 31)] [term 10:REDUCE(with prod 31)]
 [term 11:REDUCE(with prod 31)] [term 14:REDUCE(with prod 31)]
 [term 18:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 30:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 33:REDUCE(with prod 31)]
 [term 39:REDUCE(with prod 31)] [term 40:REDUCE(with prod 31)]
 [term 41:REDUCE(with prod 31)] [term 42:REDUCE(with prod 31)]
From state #147
 [term 30:SHIFT(to state 182)]
From state #148
 [term 12:REDUCE(with prod 101)] [term 13:REDUCE(with prod 101)]
 [term 14:REDUCE(with prod 101)] [term 15:REDUCE(with prod 101)]
 [term 16:REDUCE(with prod 101)] [term 17:REDUCE(with prod 101)]
 [term 19:REDUCE(with prod 101)] [term 20:REDUCE(with prod 101)]
 [term 21:REDUCE(with prod 101)] [term 22:REDUCE(with prod 101)]
 [term 23:REDUCE(with prod 101)] [term 24:REDUCE(with prod 101)]
 [term 25:REDUCE(with prod 101)] [term 26:REDUCE(with prod 101)]
 [term 27:SHIFT(to state 100)] [term 28:REDUCE(with prod 101)]
 [term 29:REDUCE(with prod 101)] [term 30:SHIFT(to state 99)]
 [term 34:SHIFT(to state 173)] [term 36:REDUCE(with prod 101)]
 [term 38:SHIFT(to state 101)] [term 39:SHIFT(to state 172)]
From state #149
 [term 5:REDUCE(with prod 26)] [term 6:REDUCE(with prod 26)]
 [term 7:REDUCE(with prod 26)] [term 8:REDUCE(with prod 26)]
 [term 9:REDUCE(with prod 26)] [term 10:REDUCE(with prod 26)]
 [term 11:REDUCE(with prod 26)] [term 14:REDUCE(with prod 26)]
 [term 18:REDUCE(with prod 26)] [term 28:REDUCE(with prod 26)]
 [term 29:REDUCE(with prod 26)] [term 30:REDUCE(with prod 26)]
 [term 32:REDUCE(with prod 26)] [term 33:REDUCE(with prod 26)]
 [term 39:REDUCE(with prod 26)] [term 40:REDUCE(with prod 26)]
 [term 41:REDUCE(with prod 26)] [term 42:REDUCE(with prod 26)]
From state #150
 [term 5:REDUCE(with prod 32)] [term 6:REDUCE(with prod 32)]
 [term 7:REDUCE(with prod 32)] [term 8:REDUCE(with prod 32)]
 [term 9:REDUCE(with prod 32)] [term 10:REDUCE(with prod 32)]
 [term 11:REDUCE(with prod 32)] [term 14:REDUCE(with prod 32)]
 [term 18:REDUCE(with prod 32)] [term 28:REDUCE(with prod 32)]
 [term 29:REDUCE(with prod 32)] [term 30:REDUCE(with prod 32)]
 [term 32:REDUCE(with prod 32)] [term 33:REDUCE(with prod 32)]
 [term 39:REDUCE(with prod 32)] [term 40:REDUCE(with prod 32)]
 [term 41:REDUCE(with prod 32)] [term 42:REDUCE(with prod 32)]
From state #151
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #152
 [term 5:REDUCE(with prod 25)] [term 6:REDUCE(with prod 25)]
 [term 7:REDUCE(with prod 25)] [term 8:REDUCE(with prod 25)]
 [term 9:REDUCE(with prod 25)] [term 10:REDUCE(with prod 25)]
 [term 11:REDUCE(with prod 25)] [term 14:REDUCE(with prod 25)]
 [term 18:REDUCE(with prod 25)] [term 28:REDUCE(with prod 25)]
 [term 29:REDUCE(with prod 25)] [term 30:REDUCE(with prod 25)]
 [term 32:REDUCE(with prod 25)] [term 33:REDUCE(with prod 25)]
 [term 39:REDUCE(with prod 25)] [term 40:REDUCE(with prod 25)]
 [term 41:REDUCE(with prod 25)] [term 42:REDUCE(with prod 25)]
From state #153
 [term 36:SHIFT(to state 170)]
From state #154
 [term 5:REDUCE(with prod 28)] [term 6:REDUCE(with prod 28)]
 [term 7:REDUCE(with prod 28)] [term 8:REDUCE(with prod 28)]
 [term 9:REDUCE(with prod 28)] [term 10:REDUCE(with prod 28)]
 [term 11:REDUCE(with prod 28)] [term 14:REDUCE(with prod 28)]
 [term 18:REDUCE(with prod 28)] [term 28:REDUCE(with prod 28)]
 [term 29:REDUCE(with prod 28)] [term 30:REDUCE(with prod 28)]
 [term 32:REDUCE(with prod 28)] [term 33:REDUCE(with prod 28)]
 [term 39:REDUCE(with prod 28)] [term 40:REDUCE(with prod 28)]
 [term 41:REDUCE(with prod 28)] [term 42:REDUCE(with prod 28)]
From state #155
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 33:SHIFT(to state 169)] [term 39:SHIFT(to state 148)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #156
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 33:REDUCE(with prod 22)] [term 39:SHIFT(to state 148)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #157
 [term 30:SHIFT(to state 162)]
From state #158
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 36:SHIFT(to state 161)] [term 38:SHIFT(to state 71)]
From state #159
 [term 5:REDUCE(with prod 27)] [term 6:REDUCE(with prod 27)]
 [term 7:REDUCE(with prod 27)] [term 8:REDUCE(with prod 27)]
 [term 9:REDUCE(with prod 27)] [term 10:REDUCE(with prod 27)]
 [term 11:REDUCE(with prod 27)] [term 14:REDUCE(with prod 27)]
 [term 18:REDUCE(with prod 27)] [term 28:REDUCE(with prod 27)]
 [term 29:REDUCE(with prod 27)] [term 30:REDUCE(with prod 27)]
 [term 32:REDUCE(with prod 27)] [term 33:REDUCE(with prod 27)]
 [term 39:REDUCE(with prod 27)] [term 40:REDUCE(with prod 27)]
 [term 41:REDUCE(with prod 27)] [term 42:REDUCE(with prod 27)]
From state #160
 [term 5:REDUCE(with prod 23)] [term 7:REDUCE(with prod 23)]
 [term 8:REDUCE(with prod 23)] [term 9:REDUCE(with prod 23)]
 [term 10:REDUCE(with prod 23)] [term 11:REDUCE(with prod 23)]
 [term 14:REDUCE(with prod 23)] [term 18:REDUCE(with prod 23)]
 [term 28:REDUCE(with prod 23)] [term 29:REDUCE(with prod 23)]
 [term 30:REDUCE(with prod 23)] [term 32:REDUCE(with prod 23)]
 [term 33:REDUCE(with prod 23)] [term 39:REDUCE(with prod 23)]
 [term 40:REDUCE(with prod 23)] [term 41:REDUCE(with prod 23)]
 [term 42:REDUCE(with prod 23)]
From state #161
 [term 5:REDUCE(with prod 33)] [term 6:REDUCE(with prod 33)]
 [term 7:REDUCE(with prod 33)] [term 8:REDUCE(with prod 33)]
 [term 9:REDUCE(with prod 33)] [term 10:REDUCE(with prod 33)]
 [term 11:REDUCE(with prod 33)] [term 14:REDUCE(with prod 33)]
 [term 18:REDUCE(with prod 33)] [term 28:REDUCE(with prod 33)]
 [term 29:REDUCE(with prod 33)] [term 30:REDUCE(with prod 33)]
 [term 32:REDUCE(with prod 33)] [term 33:REDUCE(with prod 33)]
 [term 39:REDUCE(with prod 33)] [term 40:REDUCE(with prod 33)]
 [term 41:REDUCE(with prod 33)] [term 42:REDUCE(with prod 33)]
From state #162
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #163
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 31:SHIFT(to state 164)] [term 38:SHIFT(to state 71)]
From state #164
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 39:SHIFT(to state 148)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #165
 [term 5:REDUCE(with prod 38)] [term 6:REDUCE(with prod 38)]
 [term 7:REDUCE(with prod 38)] [term 8:REDUCE(with prod 38)]
 [term 9:REDUCE(with prod 38)] [term 10:REDUCE(with prod 38)]
 [term 11:REDUCE(with prod 38)] [term 14:REDUCE(with prod 38)]
 [term 18:REDUCE(with prod 38)] [term 28:REDUCE(with prod 38)]
 [term 29:REDUCE(with prod 38)] [term 30:REDUCE(with prod 38)]
 [term 32:REDUCE(with prod 38)] [term 33:REDUCE(with prod 38)]
 [term 39:REDUCE(with prod 38)] [term 40:REDUCE(with prod 38)]
 [term 41:REDUCE(with prod 38)] [term 42:REDUCE(with prod 38)]
From state #166
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 33:SHIFT(to state 167)] [term 39:SHIFT(to state 148)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #167
 [term 5:REDUCE(with prod 49)] [term 6:REDUCE(with prod 49)]
 [term 7:REDUCE(with prod 49)] [term 8:REDUCE(with prod 49)]
 [term 9:REDUCE(with prod 49)] [term 10:REDUCE(with prod 49)]
 [term 11:REDUCE(with prod 49)] [term 14:REDUCE(with prod 49)]
 [term 18:REDUCE(with prod 49)] [term 28:REDUCE(with prod 49)]
 [term 29:REDUCE(with prod 49)] [term 30:REDUCE(with prod 49)]
 [term 32:REDUCE(with prod 49)] [term 33:REDUCE(with prod 49)]
 [term 39:REDUCE(with prod 49)] [term 40:REDUCE(with prod 49)]
 [term 41:REDUCE(with prod 49)] [term 42:REDUCE(with prod 49)]
From state #168
 [term 5:REDUCE(with prod 24)] [term 7:REDUCE(with prod 24)]
 [term 8:REDUCE(with prod 24)] [term 9:REDUCE(with prod 24)]
 [term 10:REDUCE(with prod 24)] [term 11:REDUCE(with prod 24)]
 [term 14:REDUCE(with prod 24)] [term 18:REDUCE(with prod 24)]
 [term 28:REDUCE(with prod 24)] [term 29:REDUCE(with prod 24)]
 [term 30:REDUCE(with prod 24)] [term 32:REDUCE(with prod 24)]
 [term 33:REDUCE(with prod 24)] [term 39:REDUCE(with prod 24)]
 [term 40:REDUCE(with prod 24)] [term 41:REDUCE(with prod 24)]
 [term 42:REDUCE(with prod 24)]
From state #169
 [term 33:REDUCE(with prod 12)] [term 39:REDUCE(with prod 12)]
From state #170
 [term 5:REDUCE(with prod 47)] [term 6:REDUCE(with prod 47)]
 [term 7:REDUCE(with prod 47)] [term 8:REDUCE(with prod 47)]
 [term 9:REDUCE(with prod 47)] [term 10:REDUCE(with prod 47)]
 [term 11:REDUCE(with prod 47)] [term 14:REDUCE(with prod 47)]
 [term 18:REDUCE(with prod 47)] [term 28:REDUCE(with prod 47)]
 [term 29:REDUCE(with prod 47)] [term 30:REDUCE(with prod 47)]
 [term 32:REDUCE(with prod 47)] [term 33:REDUCE(with prod 47)]
 [term 39:REDUCE(with prod 47)] [term 40:REDUCE(with prod 47)]
 [term 41:REDUCE(with prod 47)] [term 42:REDUCE(with prod 47)]
From state #171
 [term 5:REDUCE(with prod 48)] [term 6:REDUCE(with prod 48)]
 [term 7:REDUCE(with prod 48)] [term 8:REDUCE(with prod 48)]
 [term 9:REDUCE(with prod 48)] [term 10:REDUCE(with prod 48)]
 [term 11:REDUCE(with prod 48)] [term 12:SHIFT(to state 74)]
 [term 13:SHIFT(to state 64)] [term 14:SHIFT(to state 70)]
 [term 15:SHIFT(to state 58)] [term 16:SHIFT(to state 68)]
 [term 17:SHIFT(to state 75)] [term 18:REDUCE(with prod 48)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 30:REDUCE(with prod 48)] [term 32:REDUCE(with prod 48)]
 [term 33:REDUCE(with prod 48)] [term 38:SHIFT(to state 71)]
 [term 39:REDUCE(with prod 48)] [term 40:REDUCE(with prod 48)]
 [term 41:REDUCE(with prod 48)] [term 42:REDUCE(with prod 48)]
From state #172
 [term 27:SHIFT(to state 179)] [term 34:SHIFT(to state 117)]
From state #173
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 35:SHIFT(to state 174)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #174
 [term 39:SHIFT(to state 175)]
From state #175
 [term 27:SHIFT(to state 176)]
From state #176
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #177
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 36:SHIFT(to state 178)] [term 38:SHIFT(to state 71)]
From state #178
 [term 5:REDUCE(with prod 34)] [term 6:REDUCE(with prod 34)]
 [term 7:REDUCE(with prod 34)] [term 8:REDUCE(with prod 34)]
 [term 9:REDUCE(with prod 34)] [term 10:REDUCE(with prod 34)]
 [term 11:REDUCE(with prod 34)] [term 14:REDUCE(with prod 34)]
 [term 18:REDUCE(with prod 34)] [term 28:REDUCE(with prod 34)]
 [term 29:REDUCE(with prod 34)] [term 30:REDUCE(with prod 34)]
 [term 32:REDUCE(with prod 34)] [term 33:REDUCE(with prod 34)]
 [term 39:REDUCE(with prod 34)] [term 40:REDUCE(with prod 34)]
 [term 41:REDUCE(with prod 34)] [term 42:REDUCE(with prod 34)]
From state #179
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #180
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 36:SHIFT(to state 181)] [term 38:SHIFT(to state 71)]
From state #181
 [term 5:REDUCE(with prod 35)] [term 6:REDUCE(with prod 35)]
 [term 7:REDUCE(with prod 35)] [term 8:REDUCE(with prod 35)]
 [term 9:REDUCE(with prod 35)] [term 10:REDUCE(with prod 35)]
 [term 11:REDUCE(with prod 35)] [term 14:REDUCE(with prod 35)]
 [term 18:REDUCE(with prod 35)] [term 28:REDUCE(with prod 35)]
 [term 29:REDUCE(with prod 35)] [term 30:REDUCE(with prod 35)]
 [term 32:REDUCE(with prod 35)] [term 33:REDUCE(with prod 35)]
 [term 39:REDUCE(with prod 35)] [term 40:REDUCE(with prod 35)]
 [term 41:REDUCE(with prod 35)] [term 42:REDUCE(with prod 35)]
From state #182
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #183
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 31:SHIFT(to state 184)] [term 38:SHIFT(to state 71)]
From state #184
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 39:SHIFT(to state 148)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #185
 [term 5:REDUCE(with prod 36)] [term 6:REDUCE(with prod 36)]
 [term 7:REDUCE(with prod 36)] [term 8:REDUCE(with prod 36)]
 [term 9:REDUCE(with prod 36)] [term 10:REDUCE(with prod 36)]
 [term 11:REDUCE(with prod 36)] [term 14:REDUCE(with prod 36)]
 [term 18:REDUCE(with prod 36)] [term 28:REDUCE(with prod 36)]
 [term 29:REDUCE(with prod 36)] [term 30:REDUCE(with prod 36)]
 [term 32:REDUCE(with prod 36)] [term 33:REDUCE(with prod 36)]
 [term 39:REDUCE(with prod 36)] [term 40:REDUCE(with prod 36)]
 [term 41:REDUCE(with prod 36)] [term 42:REDUCE(with prod 36)]
From state #186
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 39:SHIFT(to state 148)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #187
 [term 5:REDUCE(with prod 37)] [term 6:REDUCE(with prod 37)]
 [term 7:REDUCE(with prod 37)] [term 8:REDUCE(with prod 37)]
 [term 9:REDUCE(with prod 37)] [term 10:REDUCE(with prod 37)]
 [term 11:REDUCE(with prod 37)] [term 14:REDUCE(with prod 37)]
 [term 18:REDUCE(with prod 37)] [term 28:REDUCE(with prod 37)]
 [term 29:REDUCE(with prod 37)] [term 30:REDUCE(with prod 37)]
 [term 32:REDUCE(with prod 37)] [term 33:REDUCE(with prod 37)]
 [term 39:REDUCE(with prod 37)] [term 40:REDUCE(with prod 37)]
 [term 41:REDUCE(with prod 37)] [term 42:REDUCE(with prod 37)]
From state #188
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 36:SHIFT(to state 190)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #189
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 36:SHIFT(to state 204)] [term 38:SHIFT(to state 71)]
From state #190
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 36:SHIFT(to state 192)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #191
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 36:SHIFT(to state 198)] [term 38:SHIFT(to state 71)]
From state #192
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 31:SHIFT(to state 194)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #193
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 31:SHIFT(to state 196)] [term 38:SHIFT(to state 71)]
From state #194
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 39:SHIFT(to state 148)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #195
 [term 5:REDUCE(with prod 39)] [term 6:REDUCE(with prod 39)]
 [term 7:REDUCE(with prod 39)] [term 8:REDUCE(with prod 39)]
 [term 9:REDUCE(with prod 39)] [term 10:REDUCE(with prod 39)]
 [term 11:REDUCE(with prod 39)] [term 14:REDUCE(with prod 39)]
 [term 18:REDUCE(with prod 39)] [term 28:REDUCE(with prod 39)]
 [term 29:REDUCE(with prod 39)] [term 30:REDUCE(with prod 39)]
 [term 32:REDUCE(with prod 39)] [term 33:REDUCE(with prod 39)]
 [term 39:REDUCE(with prod 39)] [term 40:REDUCE(with prod 39)]
 [term 41:REDUCE(with prod 39)] [term 42:REDUCE(with prod 39)]
From state #196
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 39:SHIFT(to state 148)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #197
 [term 5:REDUCE(with prod 43)] [term 6:REDUCE(with prod 43)]
 [term 7:REDUCE(with prod 43)] [term 8:REDUCE(with prod 43)]
 [term 9:REDUCE(with prod 43)] [term 10:REDUCE(with prod 43)]
 [term 11:REDUCE(with prod 43)] [term 14:REDUCE(with prod 43)]
 [term 18:REDUCE(with prod 43)] [term 28:REDUCE(with prod 43)]
 [term 29:REDUCE(with prod 43)] [term 30:REDUCE(with prod 43)]
 [term 32:REDUCE(with prod 43)] [term 33:REDUCE(with prod 43)]
 [term 39:REDUCE(with prod 43)] [term 40:REDUCE(with prod 43)]
 [term 41:REDUCE(with prod 43)] [term 42:REDUCE(with prod 43)]
From state #198
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 31:SHIFT(to state 200)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #199
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 31:SHIFT(to state 202)] [term 38:SHIFT(to state 71)]
From state #200
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 39:SHIFT(to state 148)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #201
 [term 5:REDUCE(with prod 41)] [term 6:REDUCE(with prod 41)]
 [term 7:REDUCE(with prod 41)] [term 8:REDUCE(with prod 41)]
 [term 9:REDUCE(with prod 41)] [term 10:REDUCE(with prod 41)]
 [term 11:REDUCE(with prod 41)] [term 14:REDUCE(with prod 41)]
 [term 18:REDUCE(with prod 41)] [term 28:REDUCE(with prod 41)]
 [term 29:REDUCE(with prod 41)] [term 30:REDUCE(with prod 41)]
 [term 32:REDUCE(with prod 41)] [term 33:REDUCE(with prod 41)]
 [term 39:REDUCE(with prod 41)] [term 40:REDUCE(with prod 41)]
 [term 41:REDUCE(with prod 41)] [term 42:REDUCE(with prod 41)]
From state #202
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 39:SHIFT(to state 148)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #203
 [term 5:REDUCE(with prod 45)] [term 6:REDUCE(with prod 45)]
 [term 7:REDUCE(with prod 45)] [term 8:REDUCE(with prod 45)]
 [term 9:REDUCE(with prod 45)] [term 10:REDUCE(with prod 45)]
 [term 11:REDUCE(with prod 45)] [term 14:REDUCE(with prod 45)]
 [term 18:REDUCE(with prod 45)] [term 28:REDUCE(with prod 45)]
 [term 29:REDUCE(with prod 45)] [term 30:REDUCE(with prod 45)]
 [term 32:REDUCE(with prod 45)] [term 33:REDUCE(with prod 45)]
 [term 39:REDUCE(with prod 45)] [term 40:REDUCE(with prod 45)]
 [term 41:REDUCE(with prod 45)] [term 42:REDUCE(with prod 45)]
From state #204
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 36:SHIFT(to state 206)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #205
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 36:SHIFT(to state 212)] [term 38:SHIFT(to state 71)]
From state #206
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 31:SHIFT(to state 208)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #207
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 31:SHIFT(to state 210)] [term 38:SHIFT(to state 71)]
From state #208
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 39:SHIFT(to state 148)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #209
 [term 5:REDUCE(with prod 40)] [term 6:REDUCE(with prod 40)]
 [term 7:REDUCE(with prod 40)] [term 8:REDUCE(with prod 40)]
 [term 9:REDUCE(with prod 40)] [term 10:REDUCE(with prod 40)]
 [term 11:REDUCE(with prod 40)] [term 14:REDUCE(with prod 40)]
 [term 18:REDUCE(with prod 40)] [term 28:REDUCE(with prod 40)]
 [term 29:REDUCE(with prod 40)] [term 30:REDUCE(with prod 40)]
 [term 32:REDUCE(with prod 40)] [term 33:REDUCE(with prod 40)]
 [term 39:REDUCE(with prod 40)] [term 40:REDUCE(with prod 40)]
 [term 41:REDUCE(with prod 40)] [term 42:REDUCE(with prod 40)]
From state #210
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 39:SHIFT(to state 148)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #211
 [term 5:REDUCE(with prod 44)] [term 6:REDUCE(with prod 44)]
 [term 7:REDUCE(with prod 44)] [term 8:REDUCE(with prod 44)]
 [term 9:REDUCE(with prod 44)] [term 10:REDUCE(with prod 44)]
 [term 11:REDUCE(with prod 44)] [term 14:REDUCE(with prod 44)]
 [term 18:REDUCE(with prod 44)] [term 28:REDUCE(with prod 44)]
 [term 29:REDUCE(with prod 44)] [term 30:REDUCE(with prod 44)]
 [term 32:REDUCE(with prod 44)] [term 33:REDUCE(with prod 44)]
 [term 39:REDUCE(with prod 44)] [term 40:REDUCE(with prod 44)]
 [term 41:REDUCE(with prod 44)] [term 42:REDUCE(with prod 44)]
From state #212
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 31:SHIFT(to state 214)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #213
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 31:SHIFT(to state 216)] [term 38:SHIFT(to state 71)]
From state #214
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 39:SHIFT(to state 148)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #215
 [term 5:REDUCE(with prod 42)] [term 6:REDUCE(with prod 42)]
 [term 7:REDUCE(with prod 42)] [term 8:REDUCE(with prod 42)]
 [term 9:REDUCE(with prod 42)] [term 10:REDUCE(with prod 42)]
 [term 11:REDUCE(with prod 42)] [term 14:REDUCE(with prod 42)]
 [term 18:REDUCE(with prod 42)] [term 28:REDUCE(with prod 42)]
 [term 29:REDUCE(with prod 42)] [term 30:REDUCE(with prod 42)]
 [term 32:REDUCE(with prod 42)] [term 33:REDUCE(with prod 42)]
 [term 39:REDUCE(with prod 42)] [term 40:REDUCE(with prod 42)]
 [term 41:REDUCE(with prod 42)] [term 42:REDUCE(with prod 42)]
From state #216
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 39:SHIFT(to state 148)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #217
 [term 5:REDUCE(with prod 46)] [term 6:REDUCE(with prod 46)]
 [term 7:REDUCE(with prod 46)] [term 8:REDUCE(with prod 46)]
 [term 9:REDUCE(with prod 46)] [term 10:REDUCE(with prod 46)]
 [term 11:REDUCE(with prod 46)] [term 14:REDUCE(with prod 46)]
 [term 18:REDUCE(with prod 46)] [term 28:REDUCE(with prod 46)]
 [term 29:REDUCE(with prod 46)] [term 30:REDUCE(with prod 46)]
 [term 32:REDUCE(with prod 46)] [term 33:REDUCE(with prod 46)]
 [term 39:REDUCE(with prod 46)] [term 40:REDUCE(with prod 46)]
 [term 41:REDUCE(with prod 46)] [term 42:REDUCE(with prod 46)]
From state #218
 [term 31:REDUCE(with prod 19)] [term 37:REDUCE(with prod 19)]
From state #219
 [term 31:REDUCE(with prod 21)] [term 37:REDUCE(with prod 21)]
From state #220
 [term 35:SHIFT(to state 221)]
From state #221
 [term 39:SHIFT(to state 222)]
From state #222
 [term 31:REDUCE(with prod 20)] [term 37:REDUCE(with prod 20)]
From state #223
 [term 33:REDUCE(with prod 13)] [term 39:REDUCE(with prod 13)]
From state #224
 [term 31:REDUCE(with prod 17)] [term 37:REDUCE(with prod 17)]
 [term 39:SHIFT(to state 137)]
From state #225
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 43)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 34)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 40)]
 [term 41:SHIFT(to state 35)] [term 42:SHIFT(to state 24)]
From state #226
 [term 12:SHIFT(to state 74)] [term 13:SHIFT(to state 64)]
 [term 14:SHIFT(to state 70)] [term 15:SHIFT(to state 58)]
 [term 16:SHIFT(to state 68)] [term 17:SHIFT(to state 75)]
 [term 19:SHIFT(to state 60)] [term 20:SHIFT(to state 65)]
 [term 21:SHIFT(to state 72)] [term 22:SHIFT(to state 62)]
 [term 23:SHIFT(to state 61)] [term 24:SHIFT(to state 73)]
 [term 25:SHIFT(to state 67)] [term 26:SHIFT(to state 59)]
 [term 28:SHIFT(to state 63)] [term 29:SHIFT(to state 66)]
 [term 36:SHIFT(to state 227)] [term 38:SHIFT(to state 71)]
From state #227
 [term 33:REDUCE(with prod 14)] [term 39:REDUCE(with prod 14)]
From state #228
 [term 31:SHIFT(to state 229)] [term 37:SHIFT(to state 140)]
From state #229
 [term 32:SHIFT(to state 230)]
From state #230
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 33:REDUCE(with prod 22)] [term 39:SHIFT(to state 148)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #231
 [term 5:SHIFT(to state 147)] [term 7:SHIFT(to state 157)]
 [term 8:SHIFT(to state 144)] [term 9:SHIFT(to state 153)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 151)]
 [term 14:SHIFT(to state 43)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 34)] [term 32:SHIFT(to state 156)]
 [term 33:SHIFT(to state 232)] [term 39:SHIFT(to state 148)]
 [term 40:SHIFT(to state 40)] [term 41:SHIFT(to state 35)]
 [term 42:SHIFT(to state 24)]
From state #232
 [term 33:REDUCE(with prod 11)] [term 39:REDUCE(with prod 11)]
From state #233
 [term 33:SHIFT(to state 234)] [term 39:SHIFT(to state 10)]
From state #234
 [term 0:REDUCE(with prod 4)] [term 3:REDUCE(with prod 4)]
From state #235
 [term 0:REDUCE(with prod 1)]
From state #236
 [term 0:REDUCE(with prod 3)] [term 3:REDUCE(with prod 3)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 1->state 2] [non term 2->state 1] [non term 3->state 3]
From state #1
 [non term 3->state 236]
From state #2
From state #3
From state #4
From state #5
From state #6
 [non term 4->state 233] [non term 5->state 14] [non term 6->state 13]
 [non term 7->state 12]
From state #7
From state #8
From state #9
 [non term 4->state 11] [non term 5->state 14] [non term 6->state 13]
 [non term 7->state 12]
From state #10
From state #11
 [non term 5->state 16] [non term 6->state 13] [non term 7->state 12]
From state #12
From state #13
From state #14
From state #15
From state #16
From state #17
From state #18
From state #19
From state #20
From state #21
From state #22
 [non term 8->state 138] [non term 9->state 139]
From state #23
 [non term 20->state 28] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #24
From state #25
 [non term 20->state 136] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #26
From state #27
From state #28
From state #29
From state #30
From state #31
 [non term 20->state 134] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #32
From state #33
 [non term 20->state 133] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #34
 [non term 20->state 120] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #35
From state #36
From state #37
From state #38
From state #39
From state #40
From state #41
From state #42
From state #43
 [non term 20->state 96] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #44
From state #45
From state #46
From state #47
From state #48
From state #49
From state #50
From state #51
From state #52
From state #53
From state #54
 [non term 20->state 57] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #55
From state #56
From state #57
From state #58
 [non term 20->state 95] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #59
 [non term 20->state 94] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #60
 [non term 20->state 93] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #61
 [non term 20->state 92] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #62
 [non term 20->state 91] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #63
From state #64
 [non term 20->state 90] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #65
 [non term 20->state 89] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #66
From state #67
 [non term 20->state 88] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #68
 [non term 20->state 87] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #69
From state #70
 [non term 20->state 86] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #71
From state #72
 [non term 20->state 81] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #73
 [non term 20->state 80] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #74
From state #75
 [non term 20->state 76] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #76
From state #77
From state #78
From state #79
From state #80
From state #81
From state #82
From state #83
 [non term 23->state 84]
From state #84
From state #85
From state #86
From state #87
From state #88
From state #89
From state #90
From state #91
From state #92
From state #93
From state #94
From state #95
From state #96
From state #97
From state #98
 [non term 20->state 113] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #99
 [non term 23->state 111]
From state #100
 [non term 20->state 110] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #101
From state #102
From state #103
 [non term 20->state 106] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #104
 [non term 20->state 105] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #105
From state #106
From state #107
From state #108
 [non term 20->state 109] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #109
From state #110
From state #111
From state #112
From state #113
From state #114
From state #115
 [non term 20->state 116] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #116
From state #117
 [non term 20->state 118] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #118
From state #119
From state #120
From state #121
From state #122
From state #123
 [non term 20->state 113] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #124
From state #125
From state #126
 [non term 20->state 127] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #127
From state #128
From state #129
 [non term 20->state 130] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #130
From state #131
From state #132
From state #133
From state #134
From state #135
From state #136
From state #137
From state #138
From state #139
From state #140
 [non term 9->state 218]
From state #141
From state #142
 [non term 10->state 155] [non term 11->state 160] [non term 12->state 152]
 [non term 13->state 149] [non term 14->state 159] [non term 15->state 154]
 [non term 16->state 143] [non term 17->state 145] [non term 18->state 146]
 [non term 19->state 150] [non term 20->state 158] [non term 21->state 27]
 [non term 22->state 46] [non term 24->state 32] [non term 25->state 30]
 [non term 26->state 26] [non term 27->state 52] [non term 28->state 39]
 [non term 29->state 50] [non term 30->state 47] [non term 31->state 41]
 [non term 32->state 51] [non term 33->state 44] [non term 34->state 45]
 [non term 35->state 42] [non term 36->state 29] [non term 37->state 36]
 [non term 38->state 49] [non term 39->state 37]
From state #143
From state #144
From state #145
From state #146
From state #147
From state #148
From state #149
From state #150
From state #151
 [non term 20->state 171] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #152
From state #153
From state #154
From state #155
 [non term 11->state 168] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #156
 [non term 10->state 166] [non term 11->state 160] [non term 12->state 152]
 [non term 13->state 149] [non term 14->state 159] [non term 15->state 154]
 [non term 16->state 143] [non term 17->state 145] [non term 18->state 146]
 [non term 19->state 150] [non term 20->state 158] [non term 21->state 27]
 [non term 22->state 46] [non term 24->state 32] [non term 25->state 30]
 [non term 26->state 26] [non term 27->state 52] [non term 28->state 39]
 [non term 29->state 50] [non term 30->state 47] [non term 31->state 41]
 [non term 32->state 51] [non term 33->state 44] [non term 34->state 45]
 [non term 35->state 42] [non term 36->state 29] [non term 37->state 36]
 [non term 38->state 49] [non term 39->state 37]
From state #157
From state #158
From state #159
From state #160
From state #161
From state #162
 [non term 20->state 163] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #163
From state #164
 [non term 11->state 165] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #165
From state #166
 [non term 11->state 168] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #167
From state #168
From state #169
From state #170
From state #171
From state #172
From state #173
 [non term 20->state 113] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #174
From state #175
From state #176
 [non term 20->state 177] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #177
From state #178
From state #179
 [non term 20->state 180] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #180
From state #181
From state #182
 [non term 20->state 183] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #183
From state #184
 [non term 11->state 185] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #185
From state #186
 [non term 11->state 187] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #187
From state #188
 [non term 20->state 189] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #189
From state #190
 [non term 20->state 191] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #191
From state #192
 [non term 20->state 193] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #193
From state #194
 [non term 11->state 195] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #195
From state #196
 [non term 11->state 197] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #197
From state #198
 [non term 20->state 199] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #199
From state #200
 [non term 11->state 201] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #201
From state #202
 [non term 11->state 203] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #203
From state #204
 [non term 20->state 205] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #205
From state #206
 [non term 20->state 207] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #207
From state #208
 [non term 11->state 209] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #209
From state #210
 [non term 11->state 211] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #211
From state #212
 [non term 20->state 213] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #213
From state #214
 [non term 11->state 215] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #215
From state #216
 [non term 11->state 217] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #217
From state #218
From state #219
From state #220
From state #221
From state #222
From state #223
From state #224
 [non term 8->state 228] [non term 9->state 139]
From state #225
 [non term 20->state 226] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #226
From state #227
From state #228
From state #229
From state #230
 [non term 10->state 231] [non term 11->state 160] [non term 12->state 152]
 [non term 13->state 149] [non term 14->state 159] [non term 15->state 154]
 [non term 16->state 143] [non term 17->state 145] [non term 18->state 146]
 [non term 19->state 150] [non term 20->state 158] [non term 21->state 27]
 [non term 22->state 46] [non term 24->state 32] [non term 25->state 30]
 [non term 26->state 26] [non term 27->state 52] [non term 28->state 39]
 [non term 29->state 50] [non term 30->state 47] [non term 31->state 41]
 [non term 32->state 51] [non term 33->state 44] [non term 34->state 45]
 [non term 35->state 42] [non term 36->state 29] [non term 37->state 36]
 [non term 38->state 49] [non term 39->state 37]
From state #231
 [non term 11->state 168] [non term 12->state 152] [non term 13->state 149]
 [non term 14->state 159] [non term 15->state 154] [non term 16->state 143]
 [non term 17->state 145] [non term 18->state 146] [non term 19->state 150]
 [non term 20->state 158] [non term 21->state 27] [non term 22->state 46]
 [non term 24->state 32] [non term 25->state 30] [non term 26->state 26]
 [non term 27->state 52] [non term 28->state 39] [non term 29->state 50]
 [non term 30->state 47] [non term 31->state 41] [non term 32->state 51]
 [non term 33->state 44] [non term 34->state 45] [non term 35->state 42]
 [non term 36->state 29] [non term 37->state 36] [non term 38->state 49]
 [non term 39->state 37]
From state #232
From state #233
 [non term 5->state 16] [non term 6->state 13] [non term 7->state 12]
From state #234
From state #235
From state #236
-----------------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 34 warnings
  43 terminals, 40 non-terminals, and 107 productions declared, 
  producing 237 unique parse states.
  1 terminal declared but not used.
  0 non-terminal declared but not used.
  0 productions never reduced.
  33 conflicts detected (100 expected).
  Code written to "Parser.java", and "TokenIds.java".
---------------------------------------------------- (v0.10k)
