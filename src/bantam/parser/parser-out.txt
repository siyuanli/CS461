Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "LEX_ERROR" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt 
  under symbol IF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt 
  under symbol WHILE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt 
  under symbol FOR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     break_stmt ::= (*) BREAK SEMI 
  under symbol BREAK
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     new_expr ::= (*) NEW ID LPAREN RPAREN 
  and     new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE 
  under symbol NEW
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     return_stmt ::= (*) RETURN expr SEMI 
  and     return_stmt ::= (*) RETURN SEMI 
  under symbol RETURN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     unary_incr_expr ::= (*) INCR array_expr 
  and     unary_incr_expr ::= (*) INCR var_expr 
  under symbol INCR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     unary_decr_expr ::= (*) DECR var_expr 
  and     unary_decr_expr ::= (*) DECR array_expr 
  under symbol DECR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     expr ::= (*) LPAREN expr RPAREN 
  and     cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN 
  and     cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN 
  under symbol LPAREN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     block_stmt ::= (*) LBRACE stmt_list RBRACE 
  under symbol LBRACE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE 
  and     dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN 
  and     assign_expr ::= (*) ID ASSIGN expr 
  and     assign_expr ::= (*) ID DOT ID ASSIGN expr 
  and     decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
  and     array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     var_expr ::= (*) ID 
  and     decl_stmt ::= (*) ID ID ASSIGN expr SEMI 
  and     array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     var_expr ::= (*) ID DOT ID 
  and     dispatch_expr ::= (*) ID LPAREN expr_list RPAREN 
  and     array_expr ::= (*) ID LSQBRACE expr RSQBRACE 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     const_expr ::= (*) INT_CONST 
  under symbol INT_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     const_expr ::= (*) BOOLEAN_CONST 
  under symbol BOOLEAN_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #261
  between stmt_list ::= (*) 
  and     const_expr ::= (*) STRING_CONST 
  under symbol STRING_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #138
  between var_expr ::= ID (*) 
  and     var_expr ::= ID (*) DOT ID 
  and     array_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE 
  under symbol DOT
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt 
  under symbol IF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt 
  under symbol WHILE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt 
  under symbol FOR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     break_stmt ::= (*) BREAK SEMI 
  under symbol BREAK
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     new_expr ::= (*) NEW ID LPAREN RPAREN 
  and     new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE 
  under symbol NEW
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     return_stmt ::= (*) RETURN expr SEMI 
  and     return_stmt ::= (*) RETURN SEMI 
  under symbol RETURN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     unary_incr_expr ::= (*) INCR array_expr 
  and     unary_incr_expr ::= (*) INCR var_expr 
  under symbol INCR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     unary_decr_expr ::= (*) DECR var_expr 
  and     unary_decr_expr ::= (*) DECR array_expr 
  under symbol DECR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     expr ::= (*) LPAREN expr RPAREN 
  and     cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN 
  and     cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN 
  under symbol LPAREN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     block_stmt ::= (*) LBRACE stmt_list RBRACE 
  under symbol LBRACE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE 
  and     dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN 
  and     assign_expr ::= (*) ID ASSIGN expr 
  and     assign_expr ::= (*) ID DOT ID ASSIGN expr 
  and     decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
  and     array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     var_expr ::= (*) ID 
  and     decl_stmt ::= (*) ID ID ASSIGN expr SEMI 
  and     array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     var_expr ::= (*) ID DOT ID 
  and     dispatch_expr ::= (*) ID LPAREN expr_list RPAREN 
  and     array_expr ::= (*) ID LSQBRACE expr RSQBRACE 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     const_expr ::= (*) INT_CONST 
  under symbol INT_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     const_expr ::= (*) BOOLEAN_CONST 
  under symbol BOOLEAN_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #158
  between stmt_list ::= (*) 
  and     const_expr ::= (*) STRING_CONST 
  under symbol STRING_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt 
  and     if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt 
  under symbol IF
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt 
  under symbol WHILE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt 
  and     for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt 
  under symbol FOR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     break_stmt ::= (*) BREAK SEMI 
  under symbol BREAK
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     new_expr ::= (*) NEW ID LPAREN RPAREN 
  and     new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE 
  under symbol NEW
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     return_stmt ::= (*) RETURN expr SEMI 
  and     return_stmt ::= (*) RETURN SEMI 
  under symbol RETURN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     unary_incr_expr ::= (*) INCR array_expr 
  and     unary_incr_expr ::= (*) INCR var_expr 
  under symbol INCR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     unary_decr_expr ::= (*) DECR var_expr 
  and     unary_decr_expr ::= (*) DECR array_expr 
  under symbol DECR
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     expr ::= (*) LPAREN expr RPAREN 
  and     cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN 
  and     cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN 
  under symbol LPAREN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     block_stmt ::= (*) LBRACE stmt_list RBRACE 
  under symbol LBRACE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE 
  and     dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN 
  and     assign_expr ::= (*) ID ASSIGN expr 
  and     assign_expr ::= (*) ID DOT ID ASSIGN expr 
  and     decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
  and     array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     var_expr ::= (*) ID 
  and     decl_stmt ::= (*) ID ID ASSIGN expr SEMI 
  and     array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     var_expr ::= (*) ID DOT ID 
  and     dispatch_expr ::= (*) ID LPAREN expr_list RPAREN 
  and     array_expr ::= (*) ID LSQBRACE expr RSQBRACE 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     const_expr ::= (*) INT_CONST 
  under symbol INT_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     const_expr ::= (*) BOOLEAN_CONST 
  under symbol BOOLEAN_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #177
  between stmt_list ::= (*) 
  and     const_expr ::= (*) STRING_CONST 
  under symbol STRING_CONST
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #126
  between var_expr ::= ID (*) 
  and     cast_expr ::= LPAREN ID (*) RPAREN LPAREN expr RPAREN 
  under symbol RPAREN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #126
  between var_expr ::= ID (*) 
  and     assign_expr ::= ID (*) DOT ID ASSIGN expr 
  and     var_expr ::= ID (*) DOT ID 
  and     dispatch_expr ::= ID (*) DOT ID LPAREN expr_list RPAREN 
  and     array_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE 
  and     array_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 
  under symbol DOT
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #169
  between var_expr ::= ID (*) 
  and     var_expr ::= ID (*) DOT ID 
  and     assign_expr ::= ID (*) DOT ID ASSIGN expr 
  and     dispatch_expr ::= ID (*) DOT ID LPAREN expr_list RPAREN 
  and     array_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 
  and     array_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE 
  under symbol DOT
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #38
  between var_expr ::= ID (*) 
  and     assign_expr ::= ID (*) DOT ID ASSIGN expr 
  and     var_expr ::= ID (*) DOT ID 
  and     dispatch_expr ::= ID (*) DOT ID LPAREN expr_list RPAREN 
  and     array_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE 
  and     array_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 
  under symbol DOT
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #9
  between member_list ::= (*) 
  and     field ::= (*) ID ID ASSIGN expr SEMI 
  and     method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
  and     field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
  and     field ::= (*) ID ID SEMI 
  and     field ::= (*) ID LSQBRACE RSQBRACE ID SEMI 
  and     method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #211
  between if_stmt ::= IF LPAREN expr RPAREN stmt (*) 
  and     if_stmt ::= IF LPAREN expr RPAREN stmt (*) ELSE stmt 
  under symbol ELSE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #6
  between member_list ::= (*) 
  and     field ::= (*) ID ID ASSIGN expr SEMI 
  and     method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
  and     field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
  and     field ::= (*) ID ID SEMI 
  and     field ::= (*) ID LSQBRACE RSQBRACE ID SEMI 
  and     method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
  under symbol ID
  Resolved in favor of shifting.

  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]LEX_ERROR [3]CLASS [4]EXTENDS 
[5]IF [6]ELSE [7]WHILE [8]FOR [9]BREAK 
[10]NEW [11]RETURN [12]INSTANCEOF [13]PLUS [14]MINUS 
[15]TIMES [16]DIVIDE [17]MODULUS [18]NOT [19]AND 
[20]OR [21]EQ [22]NE [23]LT [24]LEQ 
[25]GT [26]GEQ [27]ASSIGN [28]INCR [29]DECR 
[30]LPAREN [31]RPAREN [32]LBRACE [33]RBRACE [34]LSQBRACE 
[35]RSQBRACE [36]SEMI [37]COMMA [38]DOT [39]ID 
[40]INT_CONST [41]BOOLEAN_CONST [42]STRING_CONST 

===== Non terminals =====
[0]$START [1]program [2]class_list [3]class [4]member_list 
[5]member [6]method [7]field [8]formal_list [9]formal 
[10]stmt_list [11]stmt [12]expr_stmt [13]decl_stmt [14]if_stmt 
[15]while_stmt [16]for_stmt [17]break_stmt [18]return_stmt [19]block_stmt 
[20]expr [21]assign_expr [22]array_assign_expr [23]dispatch_expr [24]expr_list 
[25]new_expr [26]new_array_expr [27]instance_of_expr [28]cast_expr [29]binary_expr 
[30]unary_expr [31]const_expr [32]binary_arith_expr [33]binary_comp_expr [34]binary_logic_expr 
[35]unary_neg_expr [36]unary_not_expr [37]unary_incr_expr [38]unary_decr_expr [39]var_expr 
[40]array_expr 

===== Productions =====
[0] program ::= class_list 
[1] $START ::= program EOF 
[2] class_list ::= class 
[3] class_list ::= class_list class 
[4] class ::= CLASS ID LBRACE member_list RBRACE 
[5] class ::= CLASS ID EXTENDS ID LBRACE member_list RBRACE 
[6] member_list ::= 
[7] member_list ::= member 
[8] member_list ::= member_list member 
[9] member ::= method 
[10] member ::= field 
[11] method ::= ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
[12] method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
[13] field ::= ID ID SEMI 
[14] field ::= ID ID ASSIGN expr SEMI 
[15] field ::= ID LSQBRACE RSQBRACE ID SEMI 
[16] field ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
[17] formal_list ::= 
[18] formal_list ::= formal 
[19] formal_list ::= formal_list COMMA formal 
[20] formal ::= ID LSQBRACE RSQBRACE ID 
[21] formal ::= ID ID 
[22] stmt_list ::= 
[23] stmt_list ::= stmt 
[24] stmt_list ::= stmt_list stmt 
[25] stmt ::= expr_stmt 
[26] stmt ::= decl_stmt 
[27] stmt ::= if_stmt 
[28] stmt ::= while_stmt 
[29] stmt ::= for_stmt 
[30] stmt ::= break_stmt 
[31] stmt ::= return_stmt 
[32] stmt ::= block_stmt 
[33] expr_stmt ::= assign_expr SEMI 
[34] expr_stmt ::= array_assign_expr SEMI 
[35] expr_stmt ::= unary_incr_expr SEMI 
[36] expr_stmt ::= unary_decr_expr SEMI 
[37] expr_stmt ::= new_expr SEMI 
[38] expr_stmt ::= new_array_expr SEMI 
[39] expr_stmt ::= dispatch_expr SEMI 
[40] decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
[41] decl_stmt ::= ID ID ASSIGN expr SEMI 
[42] if_stmt ::= IF LPAREN expr RPAREN stmt 
[43] if_stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
[44] while_stmt ::= WHILE LPAREN expr RPAREN stmt 
[45] for_stmt ::= FOR LPAREN SEMI SEMI RPAREN stmt 
[46] for_stmt ::= FOR LPAREN expr SEMI SEMI RPAREN stmt 
[47] for_stmt ::= FOR LPAREN SEMI expr SEMI RPAREN stmt 
[48] for_stmt ::= FOR LPAREN expr SEMI expr SEMI RPAREN stmt 
[49] for_stmt ::= FOR LPAREN SEMI SEMI expr RPAREN stmt 
[50] for_stmt ::= FOR LPAREN expr SEMI SEMI expr RPAREN stmt 
[51] for_stmt ::= FOR LPAREN SEMI expr SEMI expr RPAREN stmt 
[52] for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt 
[53] break_stmt ::= BREAK SEMI 
[54] return_stmt ::= RETURN expr SEMI 
[55] return_stmt ::= RETURN SEMI 
[56] block_stmt ::= LBRACE stmt_list RBRACE 
[57] expr_list ::= 
[58] expr_list ::= expr 
[59] expr_list ::= expr_list COMMA expr 
[60] expr ::= assign_expr 
[61] expr ::= array_assign_expr 
[62] expr ::= dispatch_expr 
[63] expr ::= new_expr 
[64] expr ::= new_array_expr 
[65] expr ::= instance_of_expr 
[66] expr ::= cast_expr 
[67] expr ::= binary_expr 
[68] expr ::= unary_expr 
[69] expr ::= const_expr 
[70] expr ::= var_expr 
[71] expr ::= LPAREN expr RPAREN 
[72] expr ::= array_expr 
[73] assign_expr ::= ID ASSIGN expr 
[74] assign_expr ::= ID DOT ID ASSIGN expr 
[75] array_assign_expr ::= ID LSQBRACE expr RSQBRACE ASSIGN expr 
[76] array_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 
[77] dispatch_expr ::= ID LPAREN expr_list RPAREN 
[78] dispatch_expr ::= expr DOT ID LPAREN expr_list RPAREN 
[79] dispatch_expr ::= ID DOT ID LPAREN expr_list RPAREN 
[80] new_expr ::= NEW ID LPAREN RPAREN 
[81] new_array_expr ::= NEW ID LSQBRACE expr RSQBRACE 
[82] instance_of_expr ::= expr INSTANCEOF ID 
[83] instance_of_expr ::= expr INSTANCEOF ID LSQBRACE RSQBRACE 
[84] cast_expr ::= LPAREN ID RPAREN LPAREN expr RPAREN 
[85] cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN 
[86] binary_expr ::= binary_arith_expr 
[87] binary_expr ::= binary_comp_expr 
[88] binary_expr ::= binary_logic_expr 
[89] unary_expr ::= unary_neg_expr 
[90] unary_expr ::= unary_not_expr 
[91] unary_expr ::= unary_incr_expr 
[92] unary_expr ::= unary_decr_expr 
[93] const_expr ::= INT_CONST 
[94] const_expr ::= BOOLEAN_CONST 
[95] const_expr ::= STRING_CONST 
[96] binary_arith_expr ::= expr PLUS expr 
[97] binary_arith_expr ::= expr MINUS expr 
[98] binary_arith_expr ::= expr TIMES expr 
[99] binary_arith_expr ::= expr DIVIDE expr 
[100] binary_arith_expr ::= expr MODULUS expr 
[101] binary_comp_expr ::= expr EQ expr 
[102] binary_comp_expr ::= expr NE expr 
[103] binary_comp_expr ::= expr LT expr 
[104] binary_comp_expr ::= expr LEQ expr 
[105] binary_comp_expr ::= expr GT expr 
[106] binary_comp_expr ::= expr GEQ expr 
[107] binary_logic_expr ::= expr AND expr 
[108] binary_logic_expr ::= expr OR expr 
[109] unary_neg_expr ::= MINUS expr 
[110] unary_not_expr ::= NOT expr 
[111] unary_incr_expr ::= INCR var_expr 
[112] unary_incr_expr ::= var_expr INCR 
[113] unary_incr_expr ::= INCR array_expr 
[114] unary_incr_expr ::= array_expr INCR 
[115] unary_decr_expr ::= DECR var_expr 
[116] unary_decr_expr ::= var_expr DECR 
[117] unary_decr_expr ::= DECR array_expr 
[118] unary_decr_expr ::= array_expr DECR 
[119] var_expr ::= ID 
[120] var_expr ::= ID DOT ID 
[121] array_expr ::= ID LSQBRACE expr RSQBRACE 
[122] array_expr ::= ID DOT ID LSQBRACE expr RSQBRACE 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [class ::= (*) CLASS ID EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class_list ::= (*) class , {EOF CLASS }]
  [class ::= (*) CLASS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [$START ::= (*) program EOF , {EOF }]
  [class_list ::= (*) class_list class , {EOF CLASS }]
  [program ::= (*) class_list , {EOF }]
}
transition on CLASS to state [4]
transition on class to state [3]
transition on program to state [2]
transition on class_list to state [1]

-------------------
lalr_state [1]: {
  [class ::= (*) CLASS ID EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class ::= (*) CLASS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class_list ::= class_list (*) class , {EOF CLASS }]
  [program ::= class_list (*) , {EOF }]
}
transition on CLASS to state [4]
transition on class to state [267]

-------------------
lalr_state [2]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [266]

-------------------
lalr_state [3]: {
  [class_list ::= class (*) , {EOF CLASS }]
}

-------------------
lalr_state [4]: {
  [class ::= CLASS (*) ID EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class ::= CLASS (*) ID LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on ID to state [5]

-------------------
lalr_state [5]: {
  [class ::= CLASS ID (*) LBRACE member_list RBRACE , {EOF CLASS }]
  [class ::= CLASS ID (*) EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on EXTENDS to state [7]
transition on LBRACE to state [6]

-------------------
lalr_state [6]: {
  [field ::= (*) ID ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member_list ::= (*) member_list member , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= (*) ID ID SEMI , {RBRACE ID }]
  [class ::= CLASS ID LBRACE (*) member_list RBRACE , {EOF CLASS }]
  [member ::= (*) field , {RBRACE ID }]
  [member_list ::= (*) member , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member ::= (*) method , {RBRACE ID }]
  [member_list ::= (*) , {RBRACE ID }]
}
transition on member to state [14]
transition on method to state [13]
transition on field to state [12]
transition on member_list to state [264]
transition on ID to state [10]

-------------------
lalr_state [7]: {
  [class ::= CLASS ID EXTENDS (*) ID LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on ID to state [8]

-------------------
lalr_state [8]: {
  [class ::= CLASS ID EXTENDS ID (*) LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [9]

-------------------
lalr_state [9]: {
  [class ::= CLASS ID EXTENDS ID LBRACE (*) member_list RBRACE , {EOF CLASS }]
  [field ::= (*) ID ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member_list ::= (*) member_list member , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= (*) ID ID SEMI , {RBRACE ID }]
  [member ::= (*) field , {RBRACE ID }]
  [member_list ::= (*) member , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member ::= (*) method , {RBRACE ID }]
  [member_list ::= (*) , {RBRACE ID }]
}
transition on member to state [14]
transition on method to state [13]
transition on field to state [12]
transition on member_list to state [11]
transition on ID to state [10]

-------------------
lalr_state [10]: {
  [field ::= ID (*) LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= ID (*) ID SEMI , {RBRACE ID }]
  [field ::= ID (*) LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= ID (*) LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID (*) ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= ID (*) ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on LSQBRACE to state [18]
transition on ID to state [17]

-------------------
lalr_state [11]: {
  [field ::= (*) ID ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member_list ::= member_list (*) member , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= (*) ID ID SEMI , {RBRACE ID }]
  [member ::= (*) field , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member ::= (*) method , {RBRACE ID }]
  [class ::= CLASS ID EXTENDS ID LBRACE member_list (*) RBRACE , {EOF CLASS }]
}
transition on member to state [16]
transition on method to state [13]
transition on field to state [12]
transition on RBRACE to state [15]
transition on ID to state [10]

-------------------
lalr_state [12]: {
  [member ::= field (*) , {RBRACE ID }]
}

-------------------
lalr_state [13]: {
  [member ::= method (*) , {RBRACE ID }]
}

-------------------
lalr_state [14]: {
  [member_list ::= member (*) , {RBRACE ID }]
}

-------------------
lalr_state [15]: {
  [class ::= CLASS ID EXTENDS ID LBRACE member_list RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [16]: {
  [member_list ::= member_list member (*) , {RBRACE ID }]
}

-------------------
lalr_state [17]: {
  [field ::= ID ID (*) SEMI , {RBRACE ID }]
  [field ::= ID ID (*) ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= ID ID (*) LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on ASSIGN to state [256]
transition on LPAREN to state [255]
transition on SEMI to state [254]

-------------------
lalr_state [18]: {
  [field ::= ID LSQBRACE (*) RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= ID LSQBRACE (*) RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID LSQBRACE (*) RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
}
transition on RSQBRACE to state [19]

-------------------
lalr_state [19]: {
  [field ::= ID LSQBRACE RSQBRACE (*) ID SEMI , {RBRACE ID }]
  [method ::= ID LSQBRACE RSQBRACE (*) ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID LSQBRACE RSQBRACE (*) ID ASSIGN expr SEMI , {RBRACE ID }]
}
transition on ID to state [20]

-------------------
lalr_state [20]: {
  [field ::= ID LSQBRACE RSQBRACE ID (*) SEMI , {RBRACE ID }]
  [method ::= ID LSQBRACE RSQBRACE ID (*) LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID LSQBRACE RSQBRACE ID (*) ASSIGN expr SEMI , {RBRACE ID }]
}
transition on ASSIGN to state [23]
transition on LPAREN to state [22]
transition on SEMI to state [21]

-------------------
lalr_state [21]: {
  [field ::= ID LSQBRACE RSQBRACE ID SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [22]: {
  [formal_list ::= (*) formal_list COMMA formal , {RPAREN COMMA }]
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN (*) formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [formal ::= (*) ID ID , {RPAREN COMMA }]
  [formal_list ::= (*) formal , {RPAREN COMMA }]
  [formal ::= (*) ID LSQBRACE RSQBRACE ID , {RPAREN COMMA }]
  [formal_list ::= (*) , {RPAREN COMMA }]
}
transition on formal to state [155]
transition on formal_list to state [154]
transition on ID to state [153]

-------------------
lalr_state [23]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [field ::= ID LSQBRACE RSQBRACE ID ASSIGN (*) expr SEMI , {RBRACE ID }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [28]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [24]: {
  [const_expr ::= STRING_CONST (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [25]: {
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= INCR (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= INCR (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on array_expr to state [152]
transition on var_expr to state [151]
transition on ID to state [138]

-------------------
lalr_state [26]: {
  [expr ::= cast_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [27]: {
  [expr ::= assign_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [28]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [field ::= ID LSQBRACE RSQBRACE ID ASSIGN expr (*) SEMI , {RBRACE ID }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on SEMI to state [150]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [29]: {
  [unary_expr ::= unary_decr_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [30]: {
  [expr ::= instance_of_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [31]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= NOT (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [149]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [32]: {
  [expr ::= new_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [33]: {
  [unary_decr_expr ::= DECR (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= DECR (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on array_expr to state [140]
transition on var_expr to state [139]
transition on ID to state [138]

-------------------
lalr_state [34]: {
  [const_expr ::= BOOLEAN_CONST (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [35]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= LPAREN (*) ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= LPAREN (*) expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= LPAREN (*) ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [126]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [125]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [36]: {
  [expr ::= array_assign_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [37]: {
  [unary_incr_expr ::= var_expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= var_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= var_expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on INCR to state [124]
transition on DECR to state [123]

-------------------
lalr_state [38]: {
  [dispatch_expr ::= ID (*) LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= ID (*) DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= ID (*) DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= ID (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= ID (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= ID (*) ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on DOT to state [104]
transition on ASSIGN to state [103]
transition on LPAREN to state [102]
transition on LSQBRACE to state [101]

-------------------
lalr_state [39]: {
  [const_expr ::= INT_CONST (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [40]: {
  [expr ::= unary_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [41]: {
  [binary_expr ::= binary_comp_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [42]: {
  [unary_expr ::= unary_incr_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [43]: {
  [expr ::= new_array_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [44]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= MINUS (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [100]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [45]: {
  [unary_expr ::= unary_neg_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [46]: {
  [unary_expr ::= unary_not_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [47]: {
  [expr ::= dispatch_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [48]: {
  [new_array_expr ::= NEW (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= NEW (*) ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on ID to state [56]

-------------------
lalr_state [49]: {
  [binary_expr ::= binary_arith_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [50]: {
  [unary_incr_expr ::= array_expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= array_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= array_expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on INCR to state [55]
transition on DECR to state [54]

-------------------
lalr_state [51]: {
  [expr ::= const_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [52]: {
  [binary_expr ::= binary_logic_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [53]: {
  [expr ::= binary_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [54]: {
  [unary_decr_expr ::= array_expr DECR (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [55]: {
  [unary_incr_expr ::= array_expr INCR (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [56]: {
  [new_array_expr ::= NEW ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= NEW ID (*) LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LPAREN to state [58]
transition on LSQBRACE to state [57]

-------------------
lalr_state [57]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_array_expr ::= NEW ID LSQBRACE (*) expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [60]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [58]: {
  [new_expr ::= NEW ID LPAREN (*) RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on RPAREN to state [59]

-------------------
lalr_state [59]: {
  [new_expr ::= NEW ID LPAREN RPAREN (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [60]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_array_expr ::= NEW ID LSQBRACE expr (*) RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RSQBRACE to state [70]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [61]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr AND (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [99]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [62]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr MINUS (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [98]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [63]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr DIVIDE (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [97]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [64]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr MODULUS (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [96]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [65]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr EQ (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [95]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [66]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr PLUS (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [94]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [67]: {
  [instance_of_expr ::= expr INSTANCEOF (*) ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr INSTANCEOF (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on ID to state [91]

-------------------
lalr_state [68]: {
  [dispatch_expr ::= expr DOT (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on ID to state [84]

-------------------
lalr_state [69]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr GT (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [83]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [70]: {
  [new_array_expr ::= NEW ID LSQBRACE expr RSQBRACE (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [71]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr TIMES (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [82]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [72]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr NE (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [81]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [73]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr GEQ (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [80]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [74]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr LT (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [79]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [75]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr OR (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [78]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [76]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr LEQ (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [77]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [77]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr LEQ expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [78]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr OR expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [79]: {
  [binary_comp_expr ::= expr LT expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [80]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr GEQ expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [81]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr NE expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [82]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr TIMES expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [83]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr GT expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [84]: {
  [dispatch_expr ::= expr DOT ID (*) LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LPAREN to state [85]

-------------------
lalr_state [85]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= (*) expr_list COMMA expr , {RPAREN COMMA }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= expr DOT ID LPAREN (*) expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= (*) , {RPAREN COMMA }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= (*) expr , {RPAREN COMMA }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on expr_list to state [87]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [86]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [86]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= expr (*) , {RPAREN COMMA }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [87]: {
  [dispatch_expr ::= expr DOT ID LPAREN expr_list (*) RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr_list ::= expr_list (*) COMMA expr , {RPAREN COMMA }]
}
transition on RPAREN to state [89]
transition on COMMA to state [88]

-------------------
lalr_state [88]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= expr_list COMMA (*) expr , {RPAREN COMMA }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [90]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [89]: {
  [dispatch_expr ::= expr DOT ID LPAREN expr_list RPAREN (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [90]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= expr_list COMMA expr (*) , {RPAREN COMMA }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [91]: {
  [instance_of_expr ::= expr INSTANCEOF ID (*) LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr INSTANCEOF ID (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LSQBRACE to state [92]

-------------------
lalr_state [92]: {
  [instance_of_expr ::= expr INSTANCEOF ID LSQBRACE (*) RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on RSQBRACE to state [93]

-------------------
lalr_state [93]: {
  [instance_of_expr ::= expr INSTANCEOF ID LSQBRACE RSQBRACE (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [94]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr PLUS expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [95]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr EQ expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [96]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr MODULUS expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [97]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr DIVIDE expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [98]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr MINUS expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [99]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr AND expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [100]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= MINUS expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [101]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= ID LSQBRACE (*) expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [119]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [102]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= (*) expr_list COMMA expr , {RPAREN COMMA }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= (*) , {RPAREN COMMA }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= (*) expr , {RPAREN COMMA }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= ID LPAREN (*) expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on expr_list to state [117]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [86]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [103]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= ID ASSIGN (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [116]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [104]: {
  [dispatch_expr ::= ID DOT (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= ID DOT (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= ID DOT (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= ID DOT (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= ID DOT (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on ID to state [105]

-------------------
lalr_state [105]: {
  [var_expr ::= ID DOT ID (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= ID DOT ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= ID DOT ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= ID DOT ID (*) ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= ID DOT ID (*) LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on ASSIGN to state [108]
transition on LPAREN to state [107]
transition on LSQBRACE to state [106]

-------------------
lalr_state [106]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [array_assign_expr ::= ID DOT ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= ID DOT ID LSQBRACE (*) expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [112]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [107]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= (*) expr_list COMMA expr , {RPAREN COMMA }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= ID DOT ID LPAREN (*) expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= (*) , {RPAREN COMMA }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr_list ::= (*) expr , {RPAREN COMMA }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on expr_list to state [110]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [86]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [108]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= ID DOT ID ASSIGN (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [109]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [109]: {
  [assign_expr ::= ID DOT ID ASSIGN expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [110]: {
  [expr_list ::= expr_list (*) COMMA expr , {RPAREN COMMA }]
  [dispatch_expr ::= ID DOT ID LPAREN expr_list (*) RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on RPAREN to state [111]
transition on COMMA to state [88]

-------------------
lalr_state [111]: {
  [dispatch_expr ::= ID DOT ID LPAREN expr_list RPAREN (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [112]: {
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= ID DOT ID LSQBRACE expr (*) RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= ID DOT ID LSQBRACE expr (*) RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RSQBRACE to state [113]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on AND to state [61]
transition on MINUS to state [62]

-------------------
lalr_state [113]: {
  [array_expr ::= ID DOT ID LSQBRACE expr RSQBRACE (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE (*) ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on ASSIGN to state [114]

-------------------
lalr_state [114]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE ASSIGN (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [115]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [115]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [116]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= ID ASSIGN expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [117]: {
  [expr_list ::= expr_list (*) COMMA expr , {RPAREN COMMA }]
  [dispatch_expr ::= ID LPAREN expr_list (*) RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on RPAREN to state [118]
transition on COMMA to state [88]

-------------------
lalr_state [118]: {
  [dispatch_expr ::= ID LPAREN expr_list RPAREN (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [119]: {
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= ID LSQBRACE expr (*) RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= ID LSQBRACE expr (*) RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RSQBRACE to state [120]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on AND to state [61]
transition on MINUS to state [62]

-------------------
lalr_state [120]: {
  [array_assign_expr ::= ID LSQBRACE expr RSQBRACE (*) ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= ID LSQBRACE expr RSQBRACE (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on ASSIGN to state [121]

-------------------
lalr_state [121]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= ID LSQBRACE expr RSQBRACE ASSIGN (*) expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [122]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [122]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_assign_expr ::= ID LSQBRACE expr RSQBRACE ASSIGN expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [123]: {
  [unary_decr_expr ::= var_expr DECR (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [124]: {
  [unary_incr_expr ::= var_expr INCR (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [125]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= LPAREN expr (*) RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RPAREN to state [137]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [126]: {
  [dispatch_expr ::= ID (*) LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= ID (*) DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= ID (*) DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [cast_expr ::= LPAREN ID (*) LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= ID (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= ID (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [assign_expr ::= ID (*) ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= LPAREN ID (*) RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_assign_expr ::= ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on DOT to state [104]
transition on ASSIGN to state [103]
transition on LPAREN to state [102]
transition on LSQBRACE to state [128]
transition on RPAREN to state [127]

-------------------
lalr_state [127]: {
  [cast_expr ::= LPAREN ID RPAREN (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LPAREN to state [134]

-------------------
lalr_state [128]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= ID LSQBRACE (*) expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [cast_expr ::= LPAREN ID LSQBRACE (*) RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on RSQBRACE to state [129]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [119]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [129]: {
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE (*) RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on RPAREN to state [130]

-------------------
lalr_state [130]: {
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LPAREN to state [131]

-------------------
lalr_state [131]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN (*) expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [132]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [132]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr (*) RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RPAREN to state [133]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [133]: {
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [134]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= LPAREN ID RPAREN LPAREN (*) expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [135]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [135]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= LPAREN ID RPAREN LPAREN expr (*) RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RPAREN to state [136]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [136]: {
  [cast_expr ::= LPAREN ID RPAREN LPAREN expr RPAREN (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [137]: {
  [expr ::= LPAREN expr RPAREN (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [138]: {
  [var_expr ::= ID (*) DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [var_expr ::= ID (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on DOT to state [142]
transition on LSQBRACE to state [141]

-------------------
lalr_state [139]: {
  [unary_decr_expr ::= DECR var_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [140]: {
  [unary_decr_expr ::= DECR array_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [141]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= ID LSQBRACE (*) expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [147]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [142]: {
  [var_expr ::= ID DOT (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= ID DOT (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on ID to state [143]

-------------------
lalr_state [143]: {
  [var_expr ::= ID DOT ID (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= ID DOT ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LSQBRACE to state [144]

-------------------
lalr_state [144]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= ID DOT ID LSQBRACE (*) expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [145]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [145]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= ID DOT ID LSQBRACE expr (*) RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RSQBRACE to state [146]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [146]: {
  [array_expr ::= ID DOT ID LSQBRACE expr RSQBRACE (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [147]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= ID LSQBRACE expr (*) RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RSQBRACE to state [148]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [148]: {
  [array_expr ::= ID LSQBRACE expr RSQBRACE (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [149]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [unary_not_expr ::= NOT expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [150]: {
  [field ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [151]: {
  [unary_incr_expr ::= INCR var_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [152]: {
  [unary_incr_expr ::= INCR array_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN RSQBRACE SEMI COMMA DOT }]
}

-------------------
lalr_state [153]: {
  [formal ::= ID (*) ID , {RPAREN COMMA }]
  [formal ::= ID (*) LSQBRACE RSQBRACE ID , {RPAREN COMMA }]
}
transition on LSQBRACE to state [251]
transition on ID to state [250]

-------------------
lalr_state [154]: {
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list (*) RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [formal_list ::= formal_list (*) COMMA formal , {RPAREN COMMA }]
}
transition on RPAREN to state [157]
transition on COMMA to state [156]

-------------------
lalr_state [155]: {
  [formal_list ::= formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [156]: {
  [formal ::= (*) ID ID , {RPAREN COMMA }]
  [formal ::= (*) ID LSQBRACE RSQBRACE ID , {RPAREN COMMA }]
  [formal_list ::= formal_list COMMA (*) formal , {RPAREN COMMA }]
}
transition on formal to state [249]
transition on ID to state [153]

-------------------
lalr_state [157]: {
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN (*) LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on LBRACE to state [158]

-------------------
lalr_state [158]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE (*) stmt_list RBRACE , {RBRACE ID }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) stmt_list stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [183]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on stmt_list to state [176]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [159]: {
  [expr_stmt ::= unary_incr_expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= unary_incr_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
}
transition on SEMI to state [248]

-------------------
lalr_state [160]: {
  [stmt ::= for_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [161]: {
  [expr_stmt ::= new_expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= new_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
}
transition on SEMI to state [247]

-------------------
lalr_state [162]: {
  [unary_expr ::= unary_decr_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= unary_decr_expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on SEMI to state [246]

-------------------
lalr_state [163]: {
  [for_stmt ::= FOR (*) LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR (*) LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LPAREN to state [216]

-------------------
lalr_state [164]: {
  [stmt ::= break_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [165]: {
  [expr ::= assign_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= assign_expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on SEMI to state [215]

-------------------
lalr_state [166]: {
  [expr ::= dispatch_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= dispatch_expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on SEMI to state [214]

-------------------
lalr_state [167]: {
  [stmt ::= return_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [168]: {
  [if_stmt ::= IF (*) LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [if_stmt ::= IF (*) LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LPAREN to state [208]

-------------------
lalr_state [169]: {
  [decl_stmt ::= ID (*) LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= ID (*) LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= ID (*) DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [assign_expr ::= ID (*) DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= ID (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [var_expr ::= ID (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [assign_expr ::= ID (*) ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [decl_stmt ::= ID (*) ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [array_assign_expr ::= ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on DOT to state [104]
transition on ASSIGN to state [103]
transition on LPAREN to state [102]
transition on LSQBRACE to state [199]
transition on ID to state [198]

-------------------
lalr_state [170]: {
  [stmt ::= decl_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [171]: {
  [stmt ::= block_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [172]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= RETURN (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= RETURN (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on SEMI to state [196]
transition on unary_decr_expr to state [29]
transition on expr to state [195]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [173]: {
  [stmt ::= expr_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [174]: {
  [break_stmt ::= BREAK (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on SEMI to state [194]

-------------------
lalr_state [175]: {
  [stmt ::= while_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [176]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list (*) RBRACE , {RBRACE ID }]
  [return_stmt ::= (*) RETURN SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= stmt_list (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [192]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on RBRACE to state [193]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [177]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= LBRACE (*) stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) stmt_list stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [183]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on stmt_list to state [190]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [178]: {
  [while_stmt ::= WHILE (*) LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LPAREN to state [186]

-------------------
lalr_state [179]: {
  [expr_stmt ::= new_array_expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= new_array_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
}
transition on SEMI to state [185]

-------------------
lalr_state [180]: {
  [expr_stmt ::= array_assign_expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= array_assign_expr (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
}
transition on SEMI to state [184]

-------------------
lalr_state [181]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [182]: {
  [stmt ::= if_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [183]: {
  [stmt_list ::= stmt (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [184]: {
  [expr_stmt ::= array_assign_expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [185]: {
  [expr_stmt ::= new_array_expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [186]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [while_stmt ::= WHILE LPAREN (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [187]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [187]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [while_stmt ::= WHILE LPAREN expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RPAREN to state [188]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [188]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [while_stmt ::= WHILE LPAREN expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [189]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [189]: {
  [while_stmt ::= WHILE LPAREN expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [190]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= LBRACE stmt_list (*) RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= stmt_list (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [192]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on RBRACE to state [191]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [191]: {
  [block_stmt ::= LBRACE stmt_list RBRACE (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [192]: {
  [stmt_list ::= stmt_list stmt (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [193]: {
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE (*) , {RBRACE ID }]
}

-------------------
lalr_state [194]: {
  [break_stmt ::= BREAK SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [195]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= RETURN expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on SEMI to state [197]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [196]: {
  [return_stmt ::= RETURN SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [197]: {
  [return_stmt ::= RETURN expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [198]: {
  [decl_stmt ::= ID ID (*) ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ASSIGN to state [205]

-------------------
lalr_state [199]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= ID LSQBRACE (*) expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [decl_stmt ::= ID LSQBRACE (*) RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RSQBRACE DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on RSQBRACE to state [200]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [119]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [200]: {
  [decl_stmt ::= ID LSQBRACE RSQBRACE (*) ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ID to state [201]

-------------------
lalr_state [201]: {
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID (*) ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ASSIGN to state [202]

-------------------
lalr_state [202]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [203]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [203]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on SEMI to state [204]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [204]: {
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [205]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [decl_stmt ::= ID ID ASSIGN (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [206]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [206]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [decl_stmt ::= ID ID ASSIGN expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on SEMI to state [207]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [207]: {
  [decl_stmt ::= ID ID ASSIGN expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [208]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [if_stmt ::= IF LPAREN (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [if_stmt ::= IF LPAREN (*) expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [209]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [209]: {
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [if_stmt ::= IF LPAREN expr (*) RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [if_stmt ::= IF LPAREN expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RPAREN to state [210]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on AND to state [61]
transition on MINUS to state [62]

-------------------
lalr_state [210]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [if_stmt ::= IF LPAREN expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [if_stmt ::= IF LPAREN expr RPAREN (*) stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [211]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [211]: {
  [if_stmt ::= IF LPAREN expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [if_stmt ::= IF LPAREN expr RPAREN stmt (*) ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on ELSE to state [212]

-------------------
lalr_state [212]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [if_stmt ::= IF LPAREN expr RPAREN stmt ELSE (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [213]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [213]: {
  [if_stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [214]: {
  [expr_stmt ::= dispatch_expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [215]: {
  [expr_stmt ::= assign_expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [216]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN (*) SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on SEMI to state [218]
transition on unary_decr_expr to state [29]
transition on expr to state [217]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [217]: {
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on SEMI to state [232]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on AND to state [61]
transition on MINUS to state [62]

-------------------
lalr_state [218]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI (*) expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI (*) expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on SEMI to state [220]
transition on unary_decr_expr to state [29]
transition on expr to state [219]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [219]: {
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI expr (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN SEMI expr (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on SEMI to state [226]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on AND to state [61]
transition on MINUS to state [62]

-------------------
lalr_state [220]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN SEMI SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN SEMI SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on RPAREN to state [222]
transition on expr to state [221]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [221]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN SEMI SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RPAREN to state [224]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [222]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN SEMI SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [223]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [223]: {
  [for_stmt ::= FOR LPAREN SEMI SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [224]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN SEMI SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [225]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [225]: {
  [for_stmt ::= FOR LPAREN SEMI SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [226]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on RPAREN to state [228]
transition on unary_decr_expr to state [29]
transition on expr to state [227]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [227]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RPAREN to state [230]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [228]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [229]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [229]: {
  [for_stmt ::= FOR LPAREN SEMI expr SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [230]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [231]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [231]: {
  [for_stmt ::= FOR LPAREN SEMI expr SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [232]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on SEMI to state [234]
transition on unary_decr_expr to state [29]
transition on expr to state [233]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [233]: {
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on SEMI to state [240]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on AND to state [61]
transition on MINUS to state [62]

-------------------
lalr_state [234]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on RPAREN to state [236]
transition on unary_decr_expr to state [29]
transition on expr to state [235]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [235]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RPAREN to state [238]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [236]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [237]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [237]: {
  [for_stmt ::= FOR LPAREN expr SEMI SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [238]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [239]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [239]: {
  [for_stmt ::= FOR LPAREN expr SEMI SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [240]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on RPAREN to state [242]
transition on expr to state [241]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [241]: {
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ RPAREN DOT }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on RPAREN to state [244]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [242]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [243]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [243]: {
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [244]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [245]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [245]: {
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [246]: {
  [expr_stmt ::= unary_decr_expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [247]: {
  [expr_stmt ::= new_expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [248]: {
  [expr_stmt ::= unary_incr_expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}

-------------------
lalr_state [249]: {
  [formal_list ::= formal_list COMMA formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [250]: {
  [formal ::= ID ID (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [251]: {
  [formal ::= ID LSQBRACE (*) RSQBRACE ID , {RPAREN COMMA }]
}
transition on RSQBRACE to state [252]

-------------------
lalr_state [252]: {
  [formal ::= ID LSQBRACE RSQBRACE (*) ID , {RPAREN COMMA }]
}
transition on ID to state [253]

-------------------
lalr_state [253]: {
  [formal ::= ID LSQBRACE RSQBRACE ID (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [254]: {
  [field ::= ID ID SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [255]: {
  [formal_list ::= (*) formal_list COMMA formal , {RPAREN COMMA }]
  [formal ::= (*) ID ID , {RPAREN COMMA }]
  [formal_list ::= (*) formal , {RPAREN COMMA }]
  [formal ::= (*) ID LSQBRACE RSQBRACE ID , {RPAREN COMMA }]
  [method ::= ID ID LPAREN (*) formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [formal_list ::= (*) , {RPAREN COMMA }]
}
transition on formal to state [155]
transition on formal_list to state [259]
transition on ID to state [153]

-------------------
lalr_state [256]: {
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [field ::= ID ID ASSIGN (*) expr SEMI , {RBRACE ID }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT }]
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
}
transition on binary_expr to state [53]
transition on binary_logic_expr to state [52]
transition on const_expr to state [51]
transition on array_expr to state [50]
transition on binary_arith_expr to state [49]
transition on NEW to state [48]
transition on dispatch_expr to state [47]
transition on unary_not_expr to state [46]
transition on unary_neg_expr to state [45]
transition on MINUS to state [44]
transition on new_array_expr to state [43]
transition on unary_incr_expr to state [42]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on INT_CONST to state [39]
transition on ID to state [38]
transition on var_expr to state [37]
transition on array_assign_expr to state [36]
transition on LPAREN to state [35]
transition on BOOLEAN_CONST to state [34]
transition on DECR to state [33]
transition on new_expr to state [32]
transition on NOT to state [31]
transition on instance_of_expr to state [30]
transition on unary_decr_expr to state [29]
transition on expr to state [257]
transition on assign_expr to state [27]
transition on cast_expr to state [26]
transition on INCR to state [25]
transition on STRING_CONST to state [24]

-------------------
lalr_state [257]: {
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [instance_of_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [field ::= ID ID ASSIGN expr (*) SEMI , {RBRACE ID }]
}
transition on LEQ to state [76]
transition on OR to state [75]
transition on LT to state [74]
transition on GEQ to state [73]
transition on NE to state [72]
transition on TIMES to state [71]
transition on GT to state [69]
transition on DOT to state [68]
transition on INSTANCEOF to state [67]
transition on PLUS to state [66]
transition on EQ to state [65]
transition on SEMI to state [258]
transition on MODULUS to state [64]
transition on DIVIDE to state [63]
transition on MINUS to state [62]
transition on AND to state [61]

-------------------
lalr_state [258]: {
  [field ::= ID ID ASSIGN expr SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [259]: {
  [method ::= ID ID LPAREN formal_list (*) RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [formal_list ::= formal_list (*) COMMA formal , {RPAREN COMMA }]
}
transition on RPAREN to state [260]
transition on COMMA to state [156]

-------------------
lalr_state [260]: {
  [method ::= ID ID LPAREN formal_list RPAREN (*) LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on LBRACE to state [261]

-------------------
lalr_state [261]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [method ::= ID ID LPAREN formal_list RPAREN LBRACE (*) stmt_list RBRACE , {RBRACE ID }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= (*) stmt_list stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [183]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on stmt_list to state [262]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [262]: {
  [unary_incr_expr ::= (*) INCR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_incr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) array_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) unary_decr_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [method ::= ID ID LPAREN formal_list RPAREN LBRACE stmt_list (*) RBRACE , {RBRACE ID }]
  [unary_decr_expr ::= (*) DECR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [new_array_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [return_stmt ::= (*) RETURN SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) var_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) new_array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) new_array_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) DECR array_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) instance_of_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) dispatch_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [instance_of_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) return_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_decr_expr ::= (*) array_expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [array_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt_list ::= stmt_list (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) INCR var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [unary_incr_expr ::= (*) var_expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr_stmt ::= (*) array_assign_expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [array_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR DOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ DOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ SEMI DOT }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST }]
}
transition on stmt to state [192]
transition on unary_neg_expr to state [45]
transition on STRING_CONST to state [24]
transition on BOOLEAN_CONST to state [34]
transition on if_stmt to state [182]
transition on expr to state [181]
transition on RBRACE to state [263]
transition on array_assign_expr to state [180]
transition on new_array_expr to state [179]
transition on WHILE to state [178]
transition on cast_expr to state [26]
transition on binary_logic_expr to state [52]
transition on LBRACE to state [177]
transition on unary_not_expr to state [46]
transition on binary_expr to state [53]
transition on while_stmt to state [175]
transition on BREAK to state [174]
transition on NEW to state [48]
transition on expr_stmt to state [173]
transition on INT_CONST to state [39]
transition on RETURN to state [172]
transition on block_stmt to state [171]
transition on binary_arith_expr to state [49]
transition on decl_stmt to state [170]
transition on ID to state [169]
transition on IF to state [168]
transition on instance_of_expr to state [30]
transition on const_expr to state [51]
transition on return_stmt to state [167]
transition on binary_comp_expr to state [41]
transition on unary_expr to state [40]
transition on NOT to state [31]
transition on dispatch_expr to state [166]
transition on assign_expr to state [165]
transition on break_stmt to state [164]
transition on MINUS to state [44]
transition on FOR to state [163]
transition on INCR to state [25]
transition on unary_decr_expr to state [162]
transition on DECR to state [33]
transition on LPAREN to state [35]
transition on array_expr to state [50]
transition on var_expr to state [37]
transition on new_expr to state [161]
transition on for_stmt to state [160]
transition on unary_incr_expr to state [159]

-------------------
lalr_state [263]: {
  [method ::= ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE (*) , {RBRACE ID }]
}

-------------------
lalr_state [264]: {
  [field ::= (*) ID ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member_list ::= member_list (*) member , {RBRACE ID }]
  [class ::= CLASS ID LBRACE member_list (*) RBRACE , {EOF CLASS }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= (*) ID ID SEMI , {RBRACE ID }]
  [member ::= (*) field , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member ::= (*) method , {RBRACE ID }]
}
transition on member to state [16]
transition on method to state [13]
transition on field to state [12]
transition on RBRACE to state [265]
transition on ID to state [10]

-------------------
lalr_state [265]: {
  [class ::= CLASS ID LBRACE member_list RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [266]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
lalr_state [267]: {
  [class_list ::= class_list class (*) , {EOF CLASS }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 3:SHIFT(to state 4)]
From state #1
 [term 0:REDUCE(with prod 0)] [term 3:SHIFT(to state 4)]
From state #2
 [term 0:SHIFT(to state 266)]
From state #3
 [term 0:REDUCE(with prod 2)] [term 3:REDUCE(with prod 2)]
From state #4
 [term 39:SHIFT(to state 5)]
From state #5
 [term 4:SHIFT(to state 7)] [term 32:SHIFT(to state 6)]
From state #6
 [term 33:REDUCE(with prod 6)] [term 39:SHIFT(to state 10)]
From state #7
 [term 39:SHIFT(to state 8)]
From state #8
 [term 32:SHIFT(to state 9)]
From state #9
 [term 33:REDUCE(with prod 6)] [term 39:SHIFT(to state 10)]
From state #10
 [term 34:SHIFT(to state 18)] [term 39:SHIFT(to state 17)]
From state #11
 [term 33:SHIFT(to state 15)] [term 39:SHIFT(to state 10)]
From state #12
 [term 33:REDUCE(with prod 10)] [term 39:REDUCE(with prod 10)]
From state #13
 [term 33:REDUCE(with prod 9)] [term 39:REDUCE(with prod 9)]
From state #14
 [term 33:REDUCE(with prod 7)] [term 39:REDUCE(with prod 7)]
From state #15
 [term 0:REDUCE(with prod 5)] [term 3:REDUCE(with prod 5)]
From state #16
 [term 33:REDUCE(with prod 8)] [term 39:REDUCE(with prod 8)]
From state #17
 [term 27:SHIFT(to state 256)] [term 30:SHIFT(to state 255)]
 [term 36:SHIFT(to state 254)]
From state #18
 [term 35:SHIFT(to state 19)]
From state #19
 [term 39:SHIFT(to state 20)]
From state #20
 [term 27:SHIFT(to state 23)] [term 30:SHIFT(to state 22)]
 [term 36:SHIFT(to state 21)]
From state #21
 [term 33:REDUCE(with prod 15)] [term 39:REDUCE(with prod 15)]
From state #22
 [term 31:REDUCE(with prod 17)] [term 37:REDUCE(with prod 17)]
 [term 39:SHIFT(to state 153)]
From state #23
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #24
 [term 12:REDUCE(with prod 95)] [term 13:REDUCE(with prod 95)]
 [term 14:REDUCE(with prod 95)] [term 15:REDUCE(with prod 95)]
 [term 16:REDUCE(with prod 95)] [term 17:REDUCE(with prod 95)]
 [term 19:REDUCE(with prod 95)] [term 20:REDUCE(with prod 95)]
 [term 21:REDUCE(with prod 95)] [term 22:REDUCE(with prod 95)]
 [term 23:REDUCE(with prod 95)] [term 24:REDUCE(with prod 95)]
 [term 25:REDUCE(with prod 95)] [term 26:REDUCE(with prod 95)]
 [term 31:REDUCE(with prod 95)] [term 35:REDUCE(with prod 95)]
 [term 36:REDUCE(with prod 95)] [term 37:REDUCE(with prod 95)]
 [term 38:REDUCE(with prod 95)]
From state #25
 [term 39:SHIFT(to state 138)]
From state #26
 [term 12:REDUCE(with prod 66)] [term 13:REDUCE(with prod 66)]
 [term 14:REDUCE(with prod 66)] [term 15:REDUCE(with prod 66)]
 [term 16:REDUCE(with prod 66)] [term 17:REDUCE(with prod 66)]
 [term 19:REDUCE(with prod 66)] [term 20:REDUCE(with prod 66)]
 [term 21:REDUCE(with prod 66)] [term 22:REDUCE(with prod 66)]
 [term 23:REDUCE(with prod 66)] [term 24:REDUCE(with prod 66)]
 [term 25:REDUCE(with prod 66)] [term 26:REDUCE(with prod 66)]
 [term 31:REDUCE(with prod 66)] [term 35:REDUCE(with prod 66)]
 [term 36:REDUCE(with prod 66)] [term 37:REDUCE(with prod 66)]
 [term 38:REDUCE(with prod 66)]
From state #27
 [term 12:REDUCE(with prod 60)] [term 13:REDUCE(with prod 60)]
 [term 14:REDUCE(with prod 60)] [term 15:REDUCE(with prod 60)]
 [term 16:REDUCE(with prod 60)] [term 17:REDUCE(with prod 60)]
 [term 19:REDUCE(with prod 60)] [term 20:REDUCE(with prod 60)]
 [term 21:REDUCE(with prod 60)] [term 22:REDUCE(with prod 60)]
 [term 23:REDUCE(with prod 60)] [term 24:REDUCE(with prod 60)]
 [term 25:REDUCE(with prod 60)] [term 26:REDUCE(with prod 60)]
 [term 31:REDUCE(with prod 60)] [term 35:REDUCE(with prod 60)]
 [term 36:REDUCE(with prod 60)] [term 37:REDUCE(with prod 60)]
 [term 38:REDUCE(with prod 60)]
From state #28
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 36:SHIFT(to state 150)] [term 38:SHIFT(to state 68)]
From state #29
 [term 12:REDUCE(with prod 92)] [term 13:REDUCE(with prod 92)]
 [term 14:REDUCE(with prod 92)] [term 15:REDUCE(with prod 92)]
 [term 16:REDUCE(with prod 92)] [term 17:REDUCE(with prod 92)]
 [term 19:REDUCE(with prod 92)] [term 20:REDUCE(with prod 92)]
 [term 21:REDUCE(with prod 92)] [term 22:REDUCE(with prod 92)]
 [term 23:REDUCE(with prod 92)] [term 24:REDUCE(with prod 92)]
 [term 25:REDUCE(with prod 92)] [term 26:REDUCE(with prod 92)]
 [term 31:REDUCE(with prod 92)] [term 35:REDUCE(with prod 92)]
 [term 36:REDUCE(with prod 92)] [term 37:REDUCE(with prod 92)]
 [term 38:REDUCE(with prod 92)]
From state #30
 [term 12:REDUCE(with prod 65)] [term 13:REDUCE(with prod 65)]
 [term 14:REDUCE(with prod 65)] [term 15:REDUCE(with prod 65)]
 [term 16:REDUCE(with prod 65)] [term 17:REDUCE(with prod 65)]
 [term 19:REDUCE(with prod 65)] [term 20:REDUCE(with prod 65)]
 [term 21:REDUCE(with prod 65)] [term 22:REDUCE(with prod 65)]
 [term 23:REDUCE(with prod 65)] [term 24:REDUCE(with prod 65)]
 [term 25:REDUCE(with prod 65)] [term 26:REDUCE(with prod 65)]
 [term 31:REDUCE(with prod 65)] [term 35:REDUCE(with prod 65)]
 [term 36:REDUCE(with prod 65)] [term 37:REDUCE(with prod 65)]
 [term 38:REDUCE(with prod 65)]
From state #31
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #32
 [term 12:REDUCE(with prod 63)] [term 13:REDUCE(with prod 63)]
 [term 14:REDUCE(with prod 63)] [term 15:REDUCE(with prod 63)]
 [term 16:REDUCE(with prod 63)] [term 17:REDUCE(with prod 63)]
 [term 19:REDUCE(with prod 63)] [term 20:REDUCE(with prod 63)]
 [term 21:REDUCE(with prod 63)] [term 22:REDUCE(with prod 63)]
 [term 23:REDUCE(with prod 63)] [term 24:REDUCE(with prod 63)]
 [term 25:REDUCE(with prod 63)] [term 26:REDUCE(with prod 63)]
 [term 31:REDUCE(with prod 63)] [term 35:REDUCE(with prod 63)]
 [term 36:REDUCE(with prod 63)] [term 37:REDUCE(with prod 63)]
 [term 38:REDUCE(with prod 63)]
From state #33
 [term 39:SHIFT(to state 138)]
From state #34
 [term 12:REDUCE(with prod 94)] [term 13:REDUCE(with prod 94)]
 [term 14:REDUCE(with prod 94)] [term 15:REDUCE(with prod 94)]
 [term 16:REDUCE(with prod 94)] [term 17:REDUCE(with prod 94)]
 [term 19:REDUCE(with prod 94)] [term 20:REDUCE(with prod 94)]
 [term 21:REDUCE(with prod 94)] [term 22:REDUCE(with prod 94)]
 [term 23:REDUCE(with prod 94)] [term 24:REDUCE(with prod 94)]
 [term 25:REDUCE(with prod 94)] [term 26:REDUCE(with prod 94)]
 [term 31:REDUCE(with prod 94)] [term 35:REDUCE(with prod 94)]
 [term 36:REDUCE(with prod 94)] [term 37:REDUCE(with prod 94)]
 [term 38:REDUCE(with prod 94)]
From state #35
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 126)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #36
 [term 12:REDUCE(with prod 61)] [term 13:REDUCE(with prod 61)]
 [term 14:REDUCE(with prod 61)] [term 15:REDUCE(with prod 61)]
 [term 16:REDUCE(with prod 61)] [term 17:REDUCE(with prod 61)]
 [term 19:REDUCE(with prod 61)] [term 20:REDUCE(with prod 61)]
 [term 21:REDUCE(with prod 61)] [term 22:REDUCE(with prod 61)]
 [term 23:REDUCE(with prod 61)] [term 24:REDUCE(with prod 61)]
 [term 25:REDUCE(with prod 61)] [term 26:REDUCE(with prod 61)]
 [term 31:REDUCE(with prod 61)] [term 35:REDUCE(with prod 61)]
 [term 36:REDUCE(with prod 61)] [term 37:REDUCE(with prod 61)]
 [term 38:REDUCE(with prod 61)]
From state #37
 [term 12:REDUCE(with prod 70)] [term 13:REDUCE(with prod 70)]
 [term 14:REDUCE(with prod 70)] [term 15:REDUCE(with prod 70)]
 [term 16:REDUCE(with prod 70)] [term 17:REDUCE(with prod 70)]
 [term 19:REDUCE(with prod 70)] [term 20:REDUCE(with prod 70)]
 [term 21:REDUCE(with prod 70)] [term 22:REDUCE(with prod 70)]
 [term 23:REDUCE(with prod 70)] [term 24:REDUCE(with prod 70)]
 [term 25:REDUCE(with prod 70)] [term 26:REDUCE(with prod 70)]
 [term 28:SHIFT(to state 124)] [term 29:SHIFT(to state 123)]
 [term 31:REDUCE(with prod 70)] [term 35:REDUCE(with prod 70)]
 [term 36:REDUCE(with prod 70)] [term 37:REDUCE(with prod 70)]
 [term 38:REDUCE(with prod 70)]
From state #38
 [term 12:REDUCE(with prod 119)] [term 13:REDUCE(with prod 119)]
 [term 14:REDUCE(with prod 119)] [term 15:REDUCE(with prod 119)]
 [term 16:REDUCE(with prod 119)] [term 17:REDUCE(with prod 119)]
 [term 19:REDUCE(with prod 119)] [term 20:REDUCE(with prod 119)]
 [term 21:REDUCE(with prod 119)] [term 22:REDUCE(with prod 119)]
 [term 23:REDUCE(with prod 119)] [term 24:REDUCE(with prod 119)]
 [term 25:REDUCE(with prod 119)] [term 26:REDUCE(with prod 119)]
 [term 27:SHIFT(to state 103)] [term 28:REDUCE(with prod 119)]
 [term 29:REDUCE(with prod 119)] [term 30:SHIFT(to state 102)]
 [term 31:REDUCE(with prod 119)] [term 34:SHIFT(to state 101)]
 [term 35:REDUCE(with prod 119)] [term 36:REDUCE(with prod 119)]
 [term 37:REDUCE(with prod 119)] [term 38:SHIFT(to state 104)]
From state #39
 [term 12:REDUCE(with prod 93)] [term 13:REDUCE(with prod 93)]
 [term 14:REDUCE(with prod 93)] [term 15:REDUCE(with prod 93)]
 [term 16:REDUCE(with prod 93)] [term 17:REDUCE(with prod 93)]
 [term 19:REDUCE(with prod 93)] [term 20:REDUCE(with prod 93)]
 [term 21:REDUCE(with prod 93)] [term 22:REDUCE(with prod 93)]
 [term 23:REDUCE(with prod 93)] [term 24:REDUCE(with prod 93)]
 [term 25:REDUCE(with prod 93)] [term 26:REDUCE(with prod 93)]
 [term 31:REDUCE(with prod 93)] [term 35:REDUCE(with prod 93)]
 [term 36:REDUCE(with prod 93)] [term 37:REDUCE(with prod 93)]
 [term 38:REDUCE(with prod 93)]
From state #40
 [term 12:REDUCE(with prod 68)] [term 13:REDUCE(with prod 68)]
 [term 14:REDUCE(with prod 68)] [term 15:REDUCE(with prod 68)]
 [term 16:REDUCE(with prod 68)] [term 17:REDUCE(with prod 68)]
 [term 19:REDUCE(with prod 68)] [term 20:REDUCE(with prod 68)]
 [term 21:REDUCE(with prod 68)] [term 22:REDUCE(with prod 68)]
 [term 23:REDUCE(with prod 68)] [term 24:REDUCE(with prod 68)]
 [term 25:REDUCE(with prod 68)] [term 26:REDUCE(with prod 68)]
 [term 31:REDUCE(with prod 68)] [term 35:REDUCE(with prod 68)]
 [term 36:REDUCE(with prod 68)] [term 37:REDUCE(with prod 68)]
 [term 38:REDUCE(with prod 68)]
From state #41
 [term 12:REDUCE(with prod 87)] [term 13:REDUCE(with prod 87)]
 [term 14:REDUCE(with prod 87)] [term 15:REDUCE(with prod 87)]
 [term 16:REDUCE(with prod 87)] [term 17:REDUCE(with prod 87)]
 [term 19:REDUCE(with prod 87)] [term 20:REDUCE(with prod 87)]
 [term 21:REDUCE(with prod 87)] [term 22:REDUCE(with prod 87)]
 [term 23:REDUCE(with prod 87)] [term 24:REDUCE(with prod 87)]
 [term 25:REDUCE(with prod 87)] [term 26:REDUCE(with prod 87)]
 [term 31:REDUCE(with prod 87)] [term 35:REDUCE(with prod 87)]
 [term 36:REDUCE(with prod 87)] [term 37:REDUCE(with prod 87)]
 [term 38:REDUCE(with prod 87)]
From state #42
 [term 12:REDUCE(with prod 91)] [term 13:REDUCE(with prod 91)]
 [term 14:REDUCE(with prod 91)] [term 15:REDUCE(with prod 91)]
 [term 16:REDUCE(with prod 91)] [term 17:REDUCE(with prod 91)]
 [term 19:REDUCE(with prod 91)] [term 20:REDUCE(with prod 91)]
 [term 21:REDUCE(with prod 91)] [term 22:REDUCE(with prod 91)]
 [term 23:REDUCE(with prod 91)] [term 24:REDUCE(with prod 91)]
 [term 25:REDUCE(with prod 91)] [term 26:REDUCE(with prod 91)]
 [term 31:REDUCE(with prod 91)] [term 35:REDUCE(with prod 91)]
 [term 36:REDUCE(with prod 91)] [term 37:REDUCE(with prod 91)]
 [term 38:REDUCE(with prod 91)]
From state #43
 [term 12:REDUCE(with prod 64)] [term 13:REDUCE(with prod 64)]
 [term 14:REDUCE(with prod 64)] [term 15:REDUCE(with prod 64)]
 [term 16:REDUCE(with prod 64)] [term 17:REDUCE(with prod 64)]
 [term 19:REDUCE(with prod 64)] [term 20:REDUCE(with prod 64)]
 [term 21:REDUCE(with prod 64)] [term 22:REDUCE(with prod 64)]
 [term 23:REDUCE(with prod 64)] [term 24:REDUCE(with prod 64)]
 [term 25:REDUCE(with prod 64)] [term 26:REDUCE(with prod 64)]
 [term 31:REDUCE(with prod 64)] [term 35:REDUCE(with prod 64)]
 [term 36:REDUCE(with prod 64)] [term 37:REDUCE(with prod 64)]
 [term 38:REDUCE(with prod 64)]
From state #44
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #45
 [term 12:REDUCE(with prod 89)] [term 13:REDUCE(with prod 89)]
 [term 14:REDUCE(with prod 89)] [term 15:REDUCE(with prod 89)]
 [term 16:REDUCE(with prod 89)] [term 17:REDUCE(with prod 89)]
 [term 19:REDUCE(with prod 89)] [term 20:REDUCE(with prod 89)]
 [term 21:REDUCE(with prod 89)] [term 22:REDUCE(with prod 89)]
 [term 23:REDUCE(with prod 89)] [term 24:REDUCE(with prod 89)]
 [term 25:REDUCE(with prod 89)] [term 26:REDUCE(with prod 89)]
 [term 31:REDUCE(with prod 89)] [term 35:REDUCE(with prod 89)]
 [term 36:REDUCE(with prod 89)] [term 37:REDUCE(with prod 89)]
 [term 38:REDUCE(with prod 89)]
From state #46
 [term 12:REDUCE(with prod 90)] [term 13:REDUCE(with prod 90)]
 [term 14:REDUCE(with prod 90)] [term 15:REDUCE(with prod 90)]
 [term 16:REDUCE(with prod 90)] [term 17:REDUCE(with prod 90)]
 [term 19:REDUCE(with prod 90)] [term 20:REDUCE(with prod 90)]
 [term 21:REDUCE(with prod 90)] [term 22:REDUCE(with prod 90)]
 [term 23:REDUCE(with prod 90)] [term 24:REDUCE(with prod 90)]
 [term 25:REDUCE(with prod 90)] [term 26:REDUCE(with prod 90)]
 [term 31:REDUCE(with prod 90)] [term 35:REDUCE(with prod 90)]
 [term 36:REDUCE(with prod 90)] [term 37:REDUCE(with prod 90)]
 [term 38:REDUCE(with prod 90)]
From state #47
 [term 12:REDUCE(with prod 62)] [term 13:REDUCE(with prod 62)]
 [term 14:REDUCE(with prod 62)] [term 15:REDUCE(with prod 62)]
 [term 16:REDUCE(with prod 62)] [term 17:REDUCE(with prod 62)]
 [term 19:REDUCE(with prod 62)] [term 20:REDUCE(with prod 62)]
 [term 21:REDUCE(with prod 62)] [term 22:REDUCE(with prod 62)]
 [term 23:REDUCE(with prod 62)] [term 24:REDUCE(with prod 62)]
 [term 25:REDUCE(with prod 62)] [term 26:REDUCE(with prod 62)]
 [term 31:REDUCE(with prod 62)] [term 35:REDUCE(with prod 62)]
 [term 36:REDUCE(with prod 62)] [term 37:REDUCE(with prod 62)]
 [term 38:REDUCE(with prod 62)]
From state #48
 [term 39:SHIFT(to state 56)]
From state #49
 [term 12:REDUCE(with prod 86)] [term 13:REDUCE(with prod 86)]
 [term 14:REDUCE(with prod 86)] [term 15:REDUCE(with prod 86)]
 [term 16:REDUCE(with prod 86)] [term 17:REDUCE(with prod 86)]
 [term 19:REDUCE(with prod 86)] [term 20:REDUCE(with prod 86)]
 [term 21:REDUCE(with prod 86)] [term 22:REDUCE(with prod 86)]
 [term 23:REDUCE(with prod 86)] [term 24:REDUCE(with prod 86)]
 [term 25:REDUCE(with prod 86)] [term 26:REDUCE(with prod 86)]
 [term 31:REDUCE(with prod 86)] [term 35:REDUCE(with prod 86)]
 [term 36:REDUCE(with prod 86)] [term 37:REDUCE(with prod 86)]
 [term 38:REDUCE(with prod 86)]
From state #50
 [term 12:REDUCE(with prod 72)] [term 13:REDUCE(with prod 72)]
 [term 14:REDUCE(with prod 72)] [term 15:REDUCE(with prod 72)]
 [term 16:REDUCE(with prod 72)] [term 17:REDUCE(with prod 72)]
 [term 19:REDUCE(with prod 72)] [term 20:REDUCE(with prod 72)]
 [term 21:REDUCE(with prod 72)] [term 22:REDUCE(with prod 72)]
 [term 23:REDUCE(with prod 72)] [term 24:REDUCE(with prod 72)]
 [term 25:REDUCE(with prod 72)] [term 26:REDUCE(with prod 72)]
 [term 28:SHIFT(to state 55)] [term 29:SHIFT(to state 54)]
 [term 31:REDUCE(with prod 72)] [term 35:REDUCE(with prod 72)]
 [term 36:REDUCE(with prod 72)] [term 37:REDUCE(with prod 72)]
 [term 38:REDUCE(with prod 72)]
From state #51
 [term 12:REDUCE(with prod 69)] [term 13:REDUCE(with prod 69)]
 [term 14:REDUCE(with prod 69)] [term 15:REDUCE(with prod 69)]
 [term 16:REDUCE(with prod 69)] [term 17:REDUCE(with prod 69)]
 [term 19:REDUCE(with prod 69)] [term 20:REDUCE(with prod 69)]
 [term 21:REDUCE(with prod 69)] [term 22:REDUCE(with prod 69)]
 [term 23:REDUCE(with prod 69)] [term 24:REDUCE(with prod 69)]
 [term 25:REDUCE(with prod 69)] [term 26:REDUCE(with prod 69)]
 [term 31:REDUCE(with prod 69)] [term 35:REDUCE(with prod 69)]
 [term 36:REDUCE(with prod 69)] [term 37:REDUCE(with prod 69)]
 [term 38:REDUCE(with prod 69)]
From state #52
 [term 12:REDUCE(with prod 88)] [term 13:REDUCE(with prod 88)]
 [term 14:REDUCE(with prod 88)] [term 15:REDUCE(with prod 88)]
 [term 16:REDUCE(with prod 88)] [term 17:REDUCE(with prod 88)]
 [term 19:REDUCE(with prod 88)] [term 20:REDUCE(with prod 88)]
 [term 21:REDUCE(with prod 88)] [term 22:REDUCE(with prod 88)]
 [term 23:REDUCE(with prod 88)] [term 24:REDUCE(with prod 88)]
 [term 25:REDUCE(with prod 88)] [term 26:REDUCE(with prod 88)]
 [term 31:REDUCE(with prod 88)] [term 35:REDUCE(with prod 88)]
 [term 36:REDUCE(with prod 88)] [term 37:REDUCE(with prod 88)]
 [term 38:REDUCE(with prod 88)]
From state #53
 [term 12:REDUCE(with prod 67)] [term 13:REDUCE(with prod 67)]
 [term 14:REDUCE(with prod 67)] [term 15:REDUCE(with prod 67)]
 [term 16:REDUCE(with prod 67)] [term 17:REDUCE(with prod 67)]
 [term 19:REDUCE(with prod 67)] [term 20:REDUCE(with prod 67)]
 [term 21:REDUCE(with prod 67)] [term 22:REDUCE(with prod 67)]
 [term 23:REDUCE(with prod 67)] [term 24:REDUCE(with prod 67)]
 [term 25:REDUCE(with prod 67)] [term 26:REDUCE(with prod 67)]
 [term 31:REDUCE(with prod 67)] [term 35:REDUCE(with prod 67)]
 [term 36:REDUCE(with prod 67)] [term 37:REDUCE(with prod 67)]
 [term 38:REDUCE(with prod 67)]
From state #54
 [term 12:REDUCE(with prod 118)] [term 13:REDUCE(with prod 118)]
 [term 14:REDUCE(with prod 118)] [term 15:REDUCE(with prod 118)]
 [term 16:REDUCE(with prod 118)] [term 17:REDUCE(with prod 118)]
 [term 19:REDUCE(with prod 118)] [term 20:REDUCE(with prod 118)]
 [term 21:REDUCE(with prod 118)] [term 22:REDUCE(with prod 118)]
 [term 23:REDUCE(with prod 118)] [term 24:REDUCE(with prod 118)]
 [term 25:REDUCE(with prod 118)] [term 26:REDUCE(with prod 118)]
 [term 31:REDUCE(with prod 118)] [term 35:REDUCE(with prod 118)]
 [term 36:REDUCE(with prod 118)] [term 37:REDUCE(with prod 118)]
 [term 38:REDUCE(with prod 118)]
From state #55
 [term 12:REDUCE(with prod 114)] [term 13:REDUCE(with prod 114)]
 [term 14:REDUCE(with prod 114)] [term 15:REDUCE(with prod 114)]
 [term 16:REDUCE(with prod 114)] [term 17:REDUCE(with prod 114)]
 [term 19:REDUCE(with prod 114)] [term 20:REDUCE(with prod 114)]
 [term 21:REDUCE(with prod 114)] [term 22:REDUCE(with prod 114)]
 [term 23:REDUCE(with prod 114)] [term 24:REDUCE(with prod 114)]
 [term 25:REDUCE(with prod 114)] [term 26:REDUCE(with prod 114)]
 [term 31:REDUCE(with prod 114)] [term 35:REDUCE(with prod 114)]
 [term 36:REDUCE(with prod 114)] [term 37:REDUCE(with prod 114)]
 [term 38:REDUCE(with prod 114)]
From state #56
 [term 30:SHIFT(to state 58)] [term 34:SHIFT(to state 57)]
From state #57
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #58
 [term 31:SHIFT(to state 59)]
From state #59
 [term 12:REDUCE(with prod 80)] [term 13:REDUCE(with prod 80)]
 [term 14:REDUCE(with prod 80)] [term 15:REDUCE(with prod 80)]
 [term 16:REDUCE(with prod 80)] [term 17:REDUCE(with prod 80)]
 [term 19:REDUCE(with prod 80)] [term 20:REDUCE(with prod 80)]
 [term 21:REDUCE(with prod 80)] [term 22:REDUCE(with prod 80)]
 [term 23:REDUCE(with prod 80)] [term 24:REDUCE(with prod 80)]
 [term 25:REDUCE(with prod 80)] [term 26:REDUCE(with prod 80)]
 [term 31:REDUCE(with prod 80)] [term 35:REDUCE(with prod 80)]
 [term 36:REDUCE(with prod 80)] [term 37:REDUCE(with prod 80)]
 [term 38:REDUCE(with prod 80)]
From state #60
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 35:SHIFT(to state 70)] [term 38:SHIFT(to state 68)]
From state #61
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #62
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #63
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #64
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #65
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #66
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #67
 [term 39:SHIFT(to state 91)]
From state #68
 [term 39:SHIFT(to state 84)]
From state #69
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #70
 [term 12:REDUCE(with prod 81)] [term 13:REDUCE(with prod 81)]
 [term 14:REDUCE(with prod 81)] [term 15:REDUCE(with prod 81)]
 [term 16:REDUCE(with prod 81)] [term 17:REDUCE(with prod 81)]
 [term 19:REDUCE(with prod 81)] [term 20:REDUCE(with prod 81)]
 [term 21:REDUCE(with prod 81)] [term 22:REDUCE(with prod 81)]
 [term 23:REDUCE(with prod 81)] [term 24:REDUCE(with prod 81)]
 [term 25:REDUCE(with prod 81)] [term 26:REDUCE(with prod 81)]
 [term 31:REDUCE(with prod 81)] [term 35:REDUCE(with prod 81)]
 [term 36:REDUCE(with prod 81)] [term 37:REDUCE(with prod 81)]
 [term 38:REDUCE(with prod 81)]
From state #71
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #72
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #73
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #74
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #75
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #76
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #77
 [term 12:REDUCE(with prod 104)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:REDUCE(with prod 104)] [term 20:REDUCE(with prod 104)]
 [term 21:REDUCE(with prod 104)] [term 22:REDUCE(with prod 104)]
 [term 23:REDUCE(with prod 104)] [term 24:REDUCE(with prod 104)]
 [term 25:REDUCE(with prod 104)] [term 26:REDUCE(with prod 104)]
 [term 31:REDUCE(with prod 104)] [term 35:REDUCE(with prod 104)]
 [term 36:REDUCE(with prod 104)] [term 37:REDUCE(with prod 104)]
 [term 38:REDUCE(with prod 104)]
From state #78
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:REDUCE(with prod 108)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:REDUCE(with prod 108)] [term 35:REDUCE(with prod 108)]
 [term 36:REDUCE(with prod 108)] [term 37:REDUCE(with prod 108)]
 [term 38:REDUCE(with prod 108)]
From state #79
 [term 12:REDUCE(with prod 103)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:REDUCE(with prod 103)] [term 20:REDUCE(with prod 103)]
 [term 21:REDUCE(with prod 103)] [term 22:REDUCE(with prod 103)]
 [term 23:REDUCE(with prod 103)] [term 24:REDUCE(with prod 103)]
 [term 25:REDUCE(with prod 103)] [term 26:REDUCE(with prod 103)]
 [term 31:REDUCE(with prod 103)] [term 35:REDUCE(with prod 103)]
 [term 36:REDUCE(with prod 103)] [term 37:REDUCE(with prod 103)]
 [term 38:REDUCE(with prod 103)]
From state #80
 [term 12:REDUCE(with prod 106)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:REDUCE(with prod 106)] [term 20:REDUCE(with prod 106)]
 [term 21:REDUCE(with prod 106)] [term 22:REDUCE(with prod 106)]
 [term 23:REDUCE(with prod 106)] [term 24:REDUCE(with prod 106)]
 [term 25:REDUCE(with prod 106)] [term 26:REDUCE(with prod 106)]
 [term 31:REDUCE(with prod 106)] [term 35:REDUCE(with prod 106)]
 [term 36:REDUCE(with prod 106)] [term 37:REDUCE(with prod 106)]
 [term 38:REDUCE(with prod 106)]
From state #81
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:REDUCE(with prod 102)] [term 20:REDUCE(with prod 102)]
 [term 21:REDUCE(with prod 102)] [term 22:REDUCE(with prod 102)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:REDUCE(with prod 102)] [term 35:REDUCE(with prod 102)]
 [term 36:REDUCE(with prod 102)] [term 37:REDUCE(with prod 102)]
 [term 38:REDUCE(with prod 102)]
From state #82
 [term 12:REDUCE(with prod 98)] [term 13:REDUCE(with prod 98)]
 [term 14:REDUCE(with prod 98)] [term 15:REDUCE(with prod 98)]
 [term 16:REDUCE(with prod 98)] [term 17:REDUCE(with prod 98)]
 [term 19:REDUCE(with prod 98)] [term 20:REDUCE(with prod 98)]
 [term 21:REDUCE(with prod 98)] [term 22:REDUCE(with prod 98)]
 [term 23:REDUCE(with prod 98)] [term 24:REDUCE(with prod 98)]
 [term 25:REDUCE(with prod 98)] [term 26:REDUCE(with prod 98)]
 [term 31:REDUCE(with prod 98)] [term 35:REDUCE(with prod 98)]
 [term 36:REDUCE(with prod 98)] [term 37:REDUCE(with prod 98)]
 [term 38:REDUCE(with prod 98)]
From state #83
 [term 12:REDUCE(with prod 105)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:REDUCE(with prod 105)] [term 20:REDUCE(with prod 105)]
 [term 21:REDUCE(with prod 105)] [term 22:REDUCE(with prod 105)]
 [term 23:REDUCE(with prod 105)] [term 24:REDUCE(with prod 105)]
 [term 25:REDUCE(with prod 105)] [term 26:REDUCE(with prod 105)]
 [term 31:REDUCE(with prod 105)] [term 35:REDUCE(with prod 105)]
 [term 36:REDUCE(with prod 105)] [term 37:REDUCE(with prod 105)]
 [term 38:REDUCE(with prod 105)]
From state #84
 [term 30:SHIFT(to state 85)]
From state #85
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 31:REDUCE(with prod 57)] [term 37:REDUCE(with prod 57)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #86
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:REDUCE(with prod 58)] [term 37:REDUCE(with prod 58)]
 [term 38:SHIFT(to state 68)]
From state #87
 [term 31:SHIFT(to state 89)] [term 37:SHIFT(to state 88)]
From state #88
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #89
 [term 12:REDUCE(with prod 78)] [term 13:REDUCE(with prod 78)]
 [term 14:REDUCE(with prod 78)] [term 15:REDUCE(with prod 78)]
 [term 16:REDUCE(with prod 78)] [term 17:REDUCE(with prod 78)]
 [term 19:REDUCE(with prod 78)] [term 20:REDUCE(with prod 78)]
 [term 21:REDUCE(with prod 78)] [term 22:REDUCE(with prod 78)]
 [term 23:REDUCE(with prod 78)] [term 24:REDUCE(with prod 78)]
 [term 25:REDUCE(with prod 78)] [term 26:REDUCE(with prod 78)]
 [term 31:REDUCE(with prod 78)] [term 35:REDUCE(with prod 78)]
 [term 36:REDUCE(with prod 78)] [term 37:REDUCE(with prod 78)]
 [term 38:REDUCE(with prod 78)]
From state #90
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:REDUCE(with prod 59)] [term 37:REDUCE(with prod 59)]
 [term 38:SHIFT(to state 68)]
From state #91
 [term 12:REDUCE(with prod 82)] [term 13:REDUCE(with prod 82)]
 [term 14:REDUCE(with prod 82)] [term 15:REDUCE(with prod 82)]
 [term 16:REDUCE(with prod 82)] [term 17:REDUCE(with prod 82)]
 [term 19:REDUCE(with prod 82)] [term 20:REDUCE(with prod 82)]
 [term 21:REDUCE(with prod 82)] [term 22:REDUCE(with prod 82)]
 [term 23:REDUCE(with prod 82)] [term 24:REDUCE(with prod 82)]
 [term 25:REDUCE(with prod 82)] [term 26:REDUCE(with prod 82)]
 [term 31:REDUCE(with prod 82)] [term 34:SHIFT(to state 92)]
 [term 35:REDUCE(with prod 82)] [term 36:REDUCE(with prod 82)]
 [term 37:REDUCE(with prod 82)] [term 38:REDUCE(with prod 82)]
From state #92
 [term 35:SHIFT(to state 93)]
From state #93
 [term 12:REDUCE(with prod 83)] [term 13:REDUCE(with prod 83)]
 [term 14:REDUCE(with prod 83)] [term 15:REDUCE(with prod 83)]
 [term 16:REDUCE(with prod 83)] [term 17:REDUCE(with prod 83)]
 [term 19:REDUCE(with prod 83)] [term 20:REDUCE(with prod 83)]
 [term 21:REDUCE(with prod 83)] [term 22:REDUCE(with prod 83)]
 [term 23:REDUCE(with prod 83)] [term 24:REDUCE(with prod 83)]
 [term 25:REDUCE(with prod 83)] [term 26:REDUCE(with prod 83)]
 [term 31:REDUCE(with prod 83)] [term 35:REDUCE(with prod 83)]
 [term 36:REDUCE(with prod 83)] [term 37:REDUCE(with prod 83)]
 [term 38:REDUCE(with prod 83)]
From state #94
 [term 12:REDUCE(with prod 96)] [term 13:REDUCE(with prod 96)]
 [term 14:REDUCE(with prod 96)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:REDUCE(with prod 96)] [term 20:REDUCE(with prod 96)]
 [term 21:REDUCE(with prod 96)] [term 22:REDUCE(with prod 96)]
 [term 23:REDUCE(with prod 96)] [term 24:REDUCE(with prod 96)]
 [term 25:REDUCE(with prod 96)] [term 26:REDUCE(with prod 96)]
 [term 31:REDUCE(with prod 96)] [term 35:REDUCE(with prod 96)]
 [term 36:REDUCE(with prod 96)] [term 37:REDUCE(with prod 96)]
 [term 38:REDUCE(with prod 96)]
From state #95
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:REDUCE(with prod 101)] [term 20:REDUCE(with prod 101)]
 [term 21:REDUCE(with prod 101)] [term 22:REDUCE(with prod 101)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:REDUCE(with prod 101)] [term 35:REDUCE(with prod 101)]
 [term 36:REDUCE(with prod 101)] [term 37:REDUCE(with prod 101)]
 [term 38:REDUCE(with prod 101)]
From state #96
 [term 12:REDUCE(with prod 100)] [term 13:REDUCE(with prod 100)]
 [term 14:REDUCE(with prod 100)] [term 15:REDUCE(with prod 100)]
 [term 16:REDUCE(with prod 100)] [term 17:REDUCE(with prod 100)]
 [term 19:REDUCE(with prod 100)] [term 20:REDUCE(with prod 100)]
 [term 21:REDUCE(with prod 100)] [term 22:REDUCE(with prod 100)]
 [term 23:REDUCE(with prod 100)] [term 24:REDUCE(with prod 100)]
 [term 25:REDUCE(with prod 100)] [term 26:REDUCE(with prod 100)]
 [term 31:REDUCE(with prod 100)] [term 35:REDUCE(with prod 100)]
 [term 36:REDUCE(with prod 100)] [term 37:REDUCE(with prod 100)]
 [term 38:REDUCE(with prod 100)]
From state #97
 [term 12:REDUCE(with prod 99)] [term 13:REDUCE(with prod 99)]
 [term 14:REDUCE(with prod 99)] [term 15:REDUCE(with prod 99)]
 [term 16:REDUCE(with prod 99)] [term 17:REDUCE(with prod 99)]
 [term 19:REDUCE(with prod 99)] [term 20:REDUCE(with prod 99)]
 [term 21:REDUCE(with prod 99)] [term 22:REDUCE(with prod 99)]
 [term 23:REDUCE(with prod 99)] [term 24:REDUCE(with prod 99)]
 [term 25:REDUCE(with prod 99)] [term 26:REDUCE(with prod 99)]
 [term 31:REDUCE(with prod 99)] [term 35:REDUCE(with prod 99)]
 [term 36:REDUCE(with prod 99)] [term 37:REDUCE(with prod 99)]
 [term 38:REDUCE(with prod 99)]
From state #98
 [term 12:REDUCE(with prod 97)] [term 13:REDUCE(with prod 97)]
 [term 14:REDUCE(with prod 97)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:REDUCE(with prod 97)] [term 20:REDUCE(with prod 97)]
 [term 21:REDUCE(with prod 97)] [term 22:REDUCE(with prod 97)]
 [term 23:REDUCE(with prod 97)] [term 24:REDUCE(with prod 97)]
 [term 25:REDUCE(with prod 97)] [term 26:REDUCE(with prod 97)]
 [term 31:REDUCE(with prod 97)] [term 35:REDUCE(with prod 97)]
 [term 36:REDUCE(with prod 97)] [term 37:REDUCE(with prod 97)]
 [term 38:REDUCE(with prod 97)]
From state #99
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:REDUCE(with prod 107)] [term 20:REDUCE(with prod 107)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:REDUCE(with prod 107)] [term 35:REDUCE(with prod 107)]
 [term 36:REDUCE(with prod 107)] [term 37:REDUCE(with prod 107)]
 [term 38:REDUCE(with prod 107)]
From state #100
 [term 12:REDUCE(with prod 109)] [term 13:REDUCE(with prod 109)]
 [term 14:REDUCE(with prod 109)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:REDUCE(with prod 109)] [term 20:REDUCE(with prod 109)]
 [term 21:REDUCE(with prod 109)] [term 22:REDUCE(with prod 109)]
 [term 23:REDUCE(with prod 109)] [term 24:REDUCE(with prod 109)]
 [term 25:REDUCE(with prod 109)] [term 26:REDUCE(with prod 109)]
 [term 31:REDUCE(with prod 109)] [term 35:REDUCE(with prod 109)]
 [term 36:REDUCE(with prod 109)] [term 37:REDUCE(with prod 109)]
 [term 38:REDUCE(with prod 109)]
From state #101
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #102
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 31:REDUCE(with prod 57)] [term 37:REDUCE(with prod 57)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #103
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #104
 [term 39:SHIFT(to state 105)]
From state #105
 [term 12:REDUCE(with prod 120)] [term 13:REDUCE(with prod 120)]
 [term 14:REDUCE(with prod 120)] [term 15:REDUCE(with prod 120)]
 [term 16:REDUCE(with prod 120)] [term 17:REDUCE(with prod 120)]
 [term 19:REDUCE(with prod 120)] [term 20:REDUCE(with prod 120)]
 [term 21:REDUCE(with prod 120)] [term 22:REDUCE(with prod 120)]
 [term 23:REDUCE(with prod 120)] [term 24:REDUCE(with prod 120)]
 [term 25:REDUCE(with prod 120)] [term 26:REDUCE(with prod 120)]
 [term 27:SHIFT(to state 108)] [term 28:REDUCE(with prod 120)]
 [term 29:REDUCE(with prod 120)] [term 30:SHIFT(to state 107)]
 [term 31:REDUCE(with prod 120)] [term 34:SHIFT(to state 106)]
 [term 35:REDUCE(with prod 120)] [term 36:REDUCE(with prod 120)]
 [term 37:REDUCE(with prod 120)] [term 38:REDUCE(with prod 120)]
From state #106
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #107
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 31:REDUCE(with prod 57)] [term 37:REDUCE(with prod 57)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #108
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #109
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:REDUCE(with prod 74)] [term 35:REDUCE(with prod 74)]
 [term 36:REDUCE(with prod 74)] [term 37:REDUCE(with prod 74)]
 [term 38:REDUCE(with prod 74)]
From state #110
 [term 31:SHIFT(to state 111)] [term 37:SHIFT(to state 88)]
From state #111
 [term 12:REDUCE(with prod 79)] [term 13:REDUCE(with prod 79)]
 [term 14:REDUCE(with prod 79)] [term 15:REDUCE(with prod 79)]
 [term 16:REDUCE(with prod 79)] [term 17:REDUCE(with prod 79)]
 [term 19:REDUCE(with prod 79)] [term 20:REDUCE(with prod 79)]
 [term 21:REDUCE(with prod 79)] [term 22:REDUCE(with prod 79)]
 [term 23:REDUCE(with prod 79)] [term 24:REDUCE(with prod 79)]
 [term 25:REDUCE(with prod 79)] [term 26:REDUCE(with prod 79)]
 [term 31:REDUCE(with prod 79)] [term 35:REDUCE(with prod 79)]
 [term 36:REDUCE(with prod 79)] [term 37:REDUCE(with prod 79)]
 [term 38:REDUCE(with prod 79)]
From state #112
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 35:SHIFT(to state 113)] [term 38:SHIFT(to state 68)]
From state #113
 [term 12:REDUCE(with prod 122)] [term 13:REDUCE(with prod 122)]
 [term 14:REDUCE(with prod 122)] [term 15:REDUCE(with prod 122)]
 [term 16:REDUCE(with prod 122)] [term 17:REDUCE(with prod 122)]
 [term 19:REDUCE(with prod 122)] [term 20:REDUCE(with prod 122)]
 [term 21:REDUCE(with prod 122)] [term 22:REDUCE(with prod 122)]
 [term 23:REDUCE(with prod 122)] [term 24:REDUCE(with prod 122)]
 [term 25:REDUCE(with prod 122)] [term 26:REDUCE(with prod 122)]
 [term 27:SHIFT(to state 114)] [term 28:REDUCE(with prod 122)]
 [term 29:REDUCE(with prod 122)] [term 31:REDUCE(with prod 122)]
 [term 35:REDUCE(with prod 122)] [term 36:REDUCE(with prod 122)]
 [term 37:REDUCE(with prod 122)] [term 38:REDUCE(with prod 122)]
From state #114
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #115
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:REDUCE(with prod 76)] [term 35:REDUCE(with prod 76)]
 [term 36:REDUCE(with prod 76)] [term 37:REDUCE(with prod 76)]
 [term 38:REDUCE(with prod 76)]
From state #116
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:REDUCE(with prod 73)] [term 35:REDUCE(with prod 73)]
 [term 36:REDUCE(with prod 73)] [term 37:REDUCE(with prod 73)]
 [term 38:REDUCE(with prod 73)]
From state #117
 [term 31:SHIFT(to state 118)] [term 37:SHIFT(to state 88)]
From state #118
 [term 12:REDUCE(with prod 77)] [term 13:REDUCE(with prod 77)]
 [term 14:REDUCE(with prod 77)] [term 15:REDUCE(with prod 77)]
 [term 16:REDUCE(with prod 77)] [term 17:REDUCE(with prod 77)]
 [term 19:REDUCE(with prod 77)] [term 20:REDUCE(with prod 77)]
 [term 21:REDUCE(with prod 77)] [term 22:REDUCE(with prod 77)]
 [term 23:REDUCE(with prod 77)] [term 24:REDUCE(with prod 77)]
 [term 25:REDUCE(with prod 77)] [term 26:REDUCE(with prod 77)]
 [term 31:REDUCE(with prod 77)] [term 35:REDUCE(with prod 77)]
 [term 36:REDUCE(with prod 77)] [term 37:REDUCE(with prod 77)]
 [term 38:REDUCE(with prod 77)]
From state #119
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 35:SHIFT(to state 120)] [term 38:SHIFT(to state 68)]
From state #120
 [term 12:REDUCE(with prod 121)] [term 13:REDUCE(with prod 121)]
 [term 14:REDUCE(with prod 121)] [term 15:REDUCE(with prod 121)]
 [term 16:REDUCE(with prod 121)] [term 17:REDUCE(with prod 121)]
 [term 19:REDUCE(with prod 121)] [term 20:REDUCE(with prod 121)]
 [term 21:REDUCE(with prod 121)] [term 22:REDUCE(with prod 121)]
 [term 23:REDUCE(with prod 121)] [term 24:REDUCE(with prod 121)]
 [term 25:REDUCE(with prod 121)] [term 26:REDUCE(with prod 121)]
 [term 27:SHIFT(to state 121)] [term 28:REDUCE(with prod 121)]
 [term 29:REDUCE(with prod 121)] [term 31:REDUCE(with prod 121)]
 [term 35:REDUCE(with prod 121)] [term 36:REDUCE(with prod 121)]
 [term 37:REDUCE(with prod 121)] [term 38:REDUCE(with prod 121)]
From state #121
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #122
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:REDUCE(with prod 75)] [term 35:REDUCE(with prod 75)]
 [term 36:REDUCE(with prod 75)] [term 37:REDUCE(with prod 75)]
 [term 38:REDUCE(with prod 75)]
From state #123
 [term 12:REDUCE(with prod 116)] [term 13:REDUCE(with prod 116)]
 [term 14:REDUCE(with prod 116)] [term 15:REDUCE(with prod 116)]
 [term 16:REDUCE(with prod 116)] [term 17:REDUCE(with prod 116)]
 [term 19:REDUCE(with prod 116)] [term 20:REDUCE(with prod 116)]
 [term 21:REDUCE(with prod 116)] [term 22:REDUCE(with prod 116)]
 [term 23:REDUCE(with prod 116)] [term 24:REDUCE(with prod 116)]
 [term 25:REDUCE(with prod 116)] [term 26:REDUCE(with prod 116)]
 [term 31:REDUCE(with prod 116)] [term 35:REDUCE(with prod 116)]
 [term 36:REDUCE(with prod 116)] [term 37:REDUCE(with prod 116)]
 [term 38:REDUCE(with prod 116)]
From state #124
 [term 12:REDUCE(with prod 112)] [term 13:REDUCE(with prod 112)]
 [term 14:REDUCE(with prod 112)] [term 15:REDUCE(with prod 112)]
 [term 16:REDUCE(with prod 112)] [term 17:REDUCE(with prod 112)]
 [term 19:REDUCE(with prod 112)] [term 20:REDUCE(with prod 112)]
 [term 21:REDUCE(with prod 112)] [term 22:REDUCE(with prod 112)]
 [term 23:REDUCE(with prod 112)] [term 24:REDUCE(with prod 112)]
 [term 25:REDUCE(with prod 112)] [term 26:REDUCE(with prod 112)]
 [term 31:REDUCE(with prod 112)] [term 35:REDUCE(with prod 112)]
 [term 36:REDUCE(with prod 112)] [term 37:REDUCE(with prod 112)]
 [term 38:REDUCE(with prod 112)]
From state #125
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:SHIFT(to state 137)] [term 38:SHIFT(to state 68)]
From state #126
 [term 12:REDUCE(with prod 119)] [term 13:REDUCE(with prod 119)]
 [term 14:REDUCE(with prod 119)] [term 15:REDUCE(with prod 119)]
 [term 16:REDUCE(with prod 119)] [term 17:REDUCE(with prod 119)]
 [term 19:REDUCE(with prod 119)] [term 20:REDUCE(with prod 119)]
 [term 21:REDUCE(with prod 119)] [term 22:REDUCE(with prod 119)]
 [term 23:REDUCE(with prod 119)] [term 24:REDUCE(with prod 119)]
 [term 25:REDUCE(with prod 119)] [term 26:REDUCE(with prod 119)]
 [term 27:SHIFT(to state 103)] [term 28:REDUCE(with prod 119)]
 [term 29:REDUCE(with prod 119)] [term 30:SHIFT(to state 102)]
 [term 31:SHIFT(to state 127)] [term 34:SHIFT(to state 128)]
 [term 38:SHIFT(to state 104)]
From state #127
 [term 30:SHIFT(to state 134)]
From state #128
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 35:SHIFT(to state 129)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #129
 [term 31:SHIFT(to state 130)]
From state #130
 [term 30:SHIFT(to state 131)]
From state #131
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #132
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:SHIFT(to state 133)] [term 38:SHIFT(to state 68)]
From state #133
 [term 12:REDUCE(with prod 85)] [term 13:REDUCE(with prod 85)]
 [term 14:REDUCE(with prod 85)] [term 15:REDUCE(with prod 85)]
 [term 16:REDUCE(with prod 85)] [term 17:REDUCE(with prod 85)]
 [term 19:REDUCE(with prod 85)] [term 20:REDUCE(with prod 85)]
 [term 21:REDUCE(with prod 85)] [term 22:REDUCE(with prod 85)]
 [term 23:REDUCE(with prod 85)] [term 24:REDUCE(with prod 85)]
 [term 25:REDUCE(with prod 85)] [term 26:REDUCE(with prod 85)]
 [term 31:REDUCE(with prod 85)] [term 35:REDUCE(with prod 85)]
 [term 36:REDUCE(with prod 85)] [term 37:REDUCE(with prod 85)]
 [term 38:REDUCE(with prod 85)]
From state #134
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #135
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:SHIFT(to state 136)] [term 38:SHIFT(to state 68)]
From state #136
 [term 12:REDUCE(with prod 84)] [term 13:REDUCE(with prod 84)]
 [term 14:REDUCE(with prod 84)] [term 15:REDUCE(with prod 84)]
 [term 16:REDUCE(with prod 84)] [term 17:REDUCE(with prod 84)]
 [term 19:REDUCE(with prod 84)] [term 20:REDUCE(with prod 84)]
 [term 21:REDUCE(with prod 84)] [term 22:REDUCE(with prod 84)]
 [term 23:REDUCE(with prod 84)] [term 24:REDUCE(with prod 84)]
 [term 25:REDUCE(with prod 84)] [term 26:REDUCE(with prod 84)]
 [term 31:REDUCE(with prod 84)] [term 35:REDUCE(with prod 84)]
 [term 36:REDUCE(with prod 84)] [term 37:REDUCE(with prod 84)]
 [term 38:REDUCE(with prod 84)]
From state #137
 [term 12:REDUCE(with prod 71)] [term 13:REDUCE(with prod 71)]
 [term 14:REDUCE(with prod 71)] [term 15:REDUCE(with prod 71)]
 [term 16:REDUCE(with prod 71)] [term 17:REDUCE(with prod 71)]
 [term 19:REDUCE(with prod 71)] [term 20:REDUCE(with prod 71)]
 [term 21:REDUCE(with prod 71)] [term 22:REDUCE(with prod 71)]
 [term 23:REDUCE(with prod 71)] [term 24:REDUCE(with prod 71)]
 [term 25:REDUCE(with prod 71)] [term 26:REDUCE(with prod 71)]
 [term 31:REDUCE(with prod 71)] [term 35:REDUCE(with prod 71)]
 [term 36:REDUCE(with prod 71)] [term 37:REDUCE(with prod 71)]
 [term 38:REDUCE(with prod 71)]
From state #138
 [term 12:REDUCE(with prod 119)] [term 13:REDUCE(with prod 119)]
 [term 14:REDUCE(with prod 119)] [term 15:REDUCE(with prod 119)]
 [term 16:REDUCE(with prod 119)] [term 17:REDUCE(with prod 119)]
 [term 19:REDUCE(with prod 119)] [term 20:REDUCE(with prod 119)]
 [term 21:REDUCE(with prod 119)] [term 22:REDUCE(with prod 119)]
 [term 23:REDUCE(with prod 119)] [term 24:REDUCE(with prod 119)]
 [term 25:REDUCE(with prod 119)] [term 26:REDUCE(with prod 119)]
 [term 31:REDUCE(with prod 119)] [term 34:SHIFT(to state 141)]
 [term 35:REDUCE(with prod 119)] [term 36:REDUCE(with prod 119)]
 [term 37:REDUCE(with prod 119)] [term 38:SHIFT(to state 142)]
From state #139
 [term 12:REDUCE(with prod 115)] [term 13:REDUCE(with prod 115)]
 [term 14:REDUCE(with prod 115)] [term 15:REDUCE(with prod 115)]
 [term 16:REDUCE(with prod 115)] [term 17:REDUCE(with prod 115)]
 [term 19:REDUCE(with prod 115)] [term 20:REDUCE(with prod 115)]
 [term 21:REDUCE(with prod 115)] [term 22:REDUCE(with prod 115)]
 [term 23:REDUCE(with prod 115)] [term 24:REDUCE(with prod 115)]
 [term 25:REDUCE(with prod 115)] [term 26:REDUCE(with prod 115)]
 [term 31:REDUCE(with prod 115)] [term 35:REDUCE(with prod 115)]
 [term 36:REDUCE(with prod 115)] [term 37:REDUCE(with prod 115)]
 [term 38:REDUCE(with prod 115)]
From state #140
 [term 12:REDUCE(with prod 117)] [term 13:REDUCE(with prod 117)]
 [term 14:REDUCE(with prod 117)] [term 15:REDUCE(with prod 117)]
 [term 16:REDUCE(with prod 117)] [term 17:REDUCE(with prod 117)]
 [term 19:REDUCE(with prod 117)] [term 20:REDUCE(with prod 117)]
 [term 21:REDUCE(with prod 117)] [term 22:REDUCE(with prod 117)]
 [term 23:REDUCE(with prod 117)] [term 24:REDUCE(with prod 117)]
 [term 25:REDUCE(with prod 117)] [term 26:REDUCE(with prod 117)]
 [term 31:REDUCE(with prod 117)] [term 35:REDUCE(with prod 117)]
 [term 36:REDUCE(with prod 117)] [term 37:REDUCE(with prod 117)]
 [term 38:REDUCE(with prod 117)]
From state #141
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #142
 [term 39:SHIFT(to state 143)]
From state #143
 [term 12:REDUCE(with prod 120)] [term 13:REDUCE(with prod 120)]
 [term 14:REDUCE(with prod 120)] [term 15:REDUCE(with prod 120)]
 [term 16:REDUCE(with prod 120)] [term 17:REDUCE(with prod 120)]
 [term 19:REDUCE(with prod 120)] [term 20:REDUCE(with prod 120)]
 [term 21:REDUCE(with prod 120)] [term 22:REDUCE(with prod 120)]
 [term 23:REDUCE(with prod 120)] [term 24:REDUCE(with prod 120)]
 [term 25:REDUCE(with prod 120)] [term 26:REDUCE(with prod 120)]
 [term 31:REDUCE(with prod 120)] [term 34:SHIFT(to state 144)]
 [term 35:REDUCE(with prod 120)] [term 36:REDUCE(with prod 120)]
 [term 37:REDUCE(with prod 120)] [term 38:REDUCE(with prod 120)]
From state #144
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #145
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 35:SHIFT(to state 146)] [term 38:SHIFT(to state 68)]
From state #146
 [term 12:REDUCE(with prod 122)] [term 13:REDUCE(with prod 122)]
 [term 14:REDUCE(with prod 122)] [term 15:REDUCE(with prod 122)]
 [term 16:REDUCE(with prod 122)] [term 17:REDUCE(with prod 122)]
 [term 19:REDUCE(with prod 122)] [term 20:REDUCE(with prod 122)]
 [term 21:REDUCE(with prod 122)] [term 22:REDUCE(with prod 122)]
 [term 23:REDUCE(with prod 122)] [term 24:REDUCE(with prod 122)]
 [term 25:REDUCE(with prod 122)] [term 26:REDUCE(with prod 122)]
 [term 31:REDUCE(with prod 122)] [term 35:REDUCE(with prod 122)]
 [term 36:REDUCE(with prod 122)] [term 37:REDUCE(with prod 122)]
 [term 38:REDUCE(with prod 122)]
From state #147
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 35:SHIFT(to state 148)] [term 38:SHIFT(to state 68)]
From state #148
 [term 12:REDUCE(with prod 121)] [term 13:REDUCE(with prod 121)]
 [term 14:REDUCE(with prod 121)] [term 15:REDUCE(with prod 121)]
 [term 16:REDUCE(with prod 121)] [term 17:REDUCE(with prod 121)]
 [term 19:REDUCE(with prod 121)] [term 20:REDUCE(with prod 121)]
 [term 21:REDUCE(with prod 121)] [term 22:REDUCE(with prod 121)]
 [term 23:REDUCE(with prod 121)] [term 24:REDUCE(with prod 121)]
 [term 25:REDUCE(with prod 121)] [term 26:REDUCE(with prod 121)]
 [term 31:REDUCE(with prod 121)] [term 35:REDUCE(with prod 121)]
 [term 36:REDUCE(with prod 121)] [term 37:REDUCE(with prod 121)]
 [term 38:REDUCE(with prod 121)]
From state #149
 [term 12:REDUCE(with prod 110)] [term 13:REDUCE(with prod 110)]
 [term 14:REDUCE(with prod 110)] [term 15:REDUCE(with prod 110)]
 [term 16:REDUCE(with prod 110)] [term 17:REDUCE(with prod 110)]
 [term 19:REDUCE(with prod 110)] [term 20:REDUCE(with prod 110)]
 [term 21:REDUCE(with prod 110)] [term 22:REDUCE(with prod 110)]
 [term 23:REDUCE(with prod 110)] [term 24:REDUCE(with prod 110)]
 [term 25:REDUCE(with prod 110)] [term 26:REDUCE(with prod 110)]
 [term 31:REDUCE(with prod 110)] [term 35:REDUCE(with prod 110)]
 [term 36:REDUCE(with prod 110)] [term 37:REDUCE(with prod 110)]
 [term 38:REDUCE(with prod 110)]
From state #150
 [term 33:REDUCE(with prod 16)] [term 39:REDUCE(with prod 16)]
From state #151
 [term 12:REDUCE(with prod 111)] [term 13:REDUCE(with prod 111)]
 [term 14:REDUCE(with prod 111)] [term 15:REDUCE(with prod 111)]
 [term 16:REDUCE(with prod 111)] [term 17:REDUCE(with prod 111)]
 [term 19:REDUCE(with prod 111)] [term 20:REDUCE(with prod 111)]
 [term 21:REDUCE(with prod 111)] [term 22:REDUCE(with prod 111)]
 [term 23:REDUCE(with prod 111)] [term 24:REDUCE(with prod 111)]
 [term 25:REDUCE(with prod 111)] [term 26:REDUCE(with prod 111)]
 [term 31:REDUCE(with prod 111)] [term 35:REDUCE(with prod 111)]
 [term 36:REDUCE(with prod 111)] [term 37:REDUCE(with prod 111)]
 [term 38:REDUCE(with prod 111)]
From state #152
 [term 12:REDUCE(with prod 113)] [term 13:REDUCE(with prod 113)]
 [term 14:REDUCE(with prod 113)] [term 15:REDUCE(with prod 113)]
 [term 16:REDUCE(with prod 113)] [term 17:REDUCE(with prod 113)]
 [term 19:REDUCE(with prod 113)] [term 20:REDUCE(with prod 113)]
 [term 21:REDUCE(with prod 113)] [term 22:REDUCE(with prod 113)]
 [term 23:REDUCE(with prod 113)] [term 24:REDUCE(with prod 113)]
 [term 25:REDUCE(with prod 113)] [term 26:REDUCE(with prod 113)]
 [term 31:REDUCE(with prod 113)] [term 35:REDUCE(with prod 113)]
 [term 36:REDUCE(with prod 113)] [term 37:REDUCE(with prod 113)]
 [term 38:REDUCE(with prod 113)]
From state #153
 [term 34:SHIFT(to state 251)] [term 39:SHIFT(to state 250)]
From state #154
 [term 31:SHIFT(to state 157)] [term 37:SHIFT(to state 156)]
From state #155
 [term 31:REDUCE(with prod 18)] [term 37:REDUCE(with prod 18)]
From state #156
 [term 39:SHIFT(to state 153)]
From state #157
 [term 32:SHIFT(to state 158)]
From state #158
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 33:REDUCE(with prod 22)] [term 39:SHIFT(to state 169)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #159
 [term 12:REDUCE(with prod 91)] [term 13:REDUCE(with prod 91)]
 [term 14:REDUCE(with prod 91)] [term 15:REDUCE(with prod 91)]
 [term 16:REDUCE(with prod 91)] [term 17:REDUCE(with prod 91)]
 [term 19:REDUCE(with prod 91)] [term 20:REDUCE(with prod 91)]
 [term 21:REDUCE(with prod 91)] [term 22:REDUCE(with prod 91)]
 [term 23:REDUCE(with prod 91)] [term 24:REDUCE(with prod 91)]
 [term 25:REDUCE(with prod 91)] [term 26:REDUCE(with prod 91)]
 [term 36:SHIFT(to state 248)] [term 38:REDUCE(with prod 91)]
From state #160
 [term 5:REDUCE(with prod 29)] [term 6:REDUCE(with prod 29)]
 [term 7:REDUCE(with prod 29)] [term 8:REDUCE(with prod 29)]
 [term 9:REDUCE(with prod 29)] [term 10:REDUCE(with prod 29)]
 [term 11:REDUCE(with prod 29)] [term 14:REDUCE(with prod 29)]
 [term 18:REDUCE(with prod 29)] [term 28:REDUCE(with prod 29)]
 [term 29:REDUCE(with prod 29)] [term 30:REDUCE(with prod 29)]
 [term 32:REDUCE(with prod 29)] [term 33:REDUCE(with prod 29)]
 [term 39:REDUCE(with prod 29)] [term 40:REDUCE(with prod 29)]
 [term 41:REDUCE(with prod 29)] [term 42:REDUCE(with prod 29)]
From state #161
 [term 12:REDUCE(with prod 63)] [term 13:REDUCE(with prod 63)]
 [term 14:REDUCE(with prod 63)] [term 15:REDUCE(with prod 63)]
 [term 16:REDUCE(with prod 63)] [term 17:REDUCE(with prod 63)]
 [term 19:REDUCE(with prod 63)] [term 20:REDUCE(with prod 63)]
 [term 21:REDUCE(with prod 63)] [term 22:REDUCE(with prod 63)]
 [term 23:REDUCE(with prod 63)] [term 24:REDUCE(with prod 63)]
 [term 25:REDUCE(with prod 63)] [term 26:REDUCE(with prod 63)]
 [term 36:SHIFT(to state 247)] [term 38:REDUCE(with prod 63)]
From state #162
 [term 12:REDUCE(with prod 92)] [term 13:REDUCE(with prod 92)]
 [term 14:REDUCE(with prod 92)] [term 15:REDUCE(with prod 92)]
 [term 16:REDUCE(with prod 92)] [term 17:REDUCE(with prod 92)]
 [term 19:REDUCE(with prod 92)] [term 20:REDUCE(with prod 92)]
 [term 21:REDUCE(with prod 92)] [term 22:REDUCE(with prod 92)]
 [term 23:REDUCE(with prod 92)] [term 24:REDUCE(with prod 92)]
 [term 25:REDUCE(with prod 92)] [term 26:REDUCE(with prod 92)]
 [term 36:SHIFT(to state 246)] [term 38:REDUCE(with prod 92)]
From state #163
 [term 30:SHIFT(to state 216)]
From state #164
 [term 5:REDUCE(with prod 30)] [term 6:REDUCE(with prod 30)]
 [term 7:REDUCE(with prod 30)] [term 8:REDUCE(with prod 30)]
 [term 9:REDUCE(with prod 30)] [term 10:REDUCE(with prod 30)]
 [term 11:REDUCE(with prod 30)] [term 14:REDUCE(with prod 30)]
 [term 18:REDUCE(with prod 30)] [term 28:REDUCE(with prod 30)]
 [term 29:REDUCE(with prod 30)] [term 30:REDUCE(with prod 30)]
 [term 32:REDUCE(with prod 30)] [term 33:REDUCE(with prod 30)]
 [term 39:REDUCE(with prod 30)] [term 40:REDUCE(with prod 30)]
 [term 41:REDUCE(with prod 30)] [term 42:REDUCE(with prod 30)]
From state #165
 [term 12:REDUCE(with prod 60)] [term 13:REDUCE(with prod 60)]
 [term 14:REDUCE(with prod 60)] [term 15:REDUCE(with prod 60)]
 [term 16:REDUCE(with prod 60)] [term 17:REDUCE(with prod 60)]
 [term 19:REDUCE(with prod 60)] [term 20:REDUCE(with prod 60)]
 [term 21:REDUCE(with prod 60)] [term 22:REDUCE(with prod 60)]
 [term 23:REDUCE(with prod 60)] [term 24:REDUCE(with prod 60)]
 [term 25:REDUCE(with prod 60)] [term 26:REDUCE(with prod 60)]
 [term 36:SHIFT(to state 215)] [term 38:REDUCE(with prod 60)]
From state #166
 [term 12:REDUCE(with prod 62)] [term 13:REDUCE(with prod 62)]
 [term 14:REDUCE(with prod 62)] [term 15:REDUCE(with prod 62)]
 [term 16:REDUCE(with prod 62)] [term 17:REDUCE(with prod 62)]
 [term 19:REDUCE(with prod 62)] [term 20:REDUCE(with prod 62)]
 [term 21:REDUCE(with prod 62)] [term 22:REDUCE(with prod 62)]
 [term 23:REDUCE(with prod 62)] [term 24:REDUCE(with prod 62)]
 [term 25:REDUCE(with prod 62)] [term 26:REDUCE(with prod 62)]
 [term 36:SHIFT(to state 214)] [term 38:REDUCE(with prod 62)]
From state #167
 [term 5:REDUCE(with prod 31)] [term 6:REDUCE(with prod 31)]
 [term 7:REDUCE(with prod 31)] [term 8:REDUCE(with prod 31)]
 [term 9:REDUCE(with prod 31)] [term 10:REDUCE(with prod 31)]
 [term 11:REDUCE(with prod 31)] [term 14:REDUCE(with prod 31)]
 [term 18:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 30:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 33:REDUCE(with prod 31)]
 [term 39:REDUCE(with prod 31)] [term 40:REDUCE(with prod 31)]
 [term 41:REDUCE(with prod 31)] [term 42:REDUCE(with prod 31)]
From state #168
 [term 30:SHIFT(to state 208)]
From state #169
 [term 12:REDUCE(with prod 119)] [term 13:REDUCE(with prod 119)]
 [term 14:REDUCE(with prod 119)] [term 15:REDUCE(with prod 119)]
 [term 16:REDUCE(with prod 119)] [term 17:REDUCE(with prod 119)]
 [term 19:REDUCE(with prod 119)] [term 20:REDUCE(with prod 119)]
 [term 21:REDUCE(with prod 119)] [term 22:REDUCE(with prod 119)]
 [term 23:REDUCE(with prod 119)] [term 24:REDUCE(with prod 119)]
 [term 25:REDUCE(with prod 119)] [term 26:REDUCE(with prod 119)]
 [term 27:SHIFT(to state 103)] [term 28:REDUCE(with prod 119)]
 [term 29:REDUCE(with prod 119)] [term 30:SHIFT(to state 102)]
 [term 34:SHIFT(to state 199)] [term 38:SHIFT(to state 104)]
 [term 39:SHIFT(to state 198)]
From state #170
 [term 5:REDUCE(with prod 26)] [term 6:REDUCE(with prod 26)]
 [term 7:REDUCE(with prod 26)] [term 8:REDUCE(with prod 26)]
 [term 9:REDUCE(with prod 26)] [term 10:REDUCE(with prod 26)]
 [term 11:REDUCE(with prod 26)] [term 14:REDUCE(with prod 26)]
 [term 18:REDUCE(with prod 26)] [term 28:REDUCE(with prod 26)]
 [term 29:REDUCE(with prod 26)] [term 30:REDUCE(with prod 26)]
 [term 32:REDUCE(with prod 26)] [term 33:REDUCE(with prod 26)]
 [term 39:REDUCE(with prod 26)] [term 40:REDUCE(with prod 26)]
 [term 41:REDUCE(with prod 26)] [term 42:REDUCE(with prod 26)]
From state #171
 [term 5:REDUCE(with prod 32)] [term 6:REDUCE(with prod 32)]
 [term 7:REDUCE(with prod 32)] [term 8:REDUCE(with prod 32)]
 [term 9:REDUCE(with prod 32)] [term 10:REDUCE(with prod 32)]
 [term 11:REDUCE(with prod 32)] [term 14:REDUCE(with prod 32)]
 [term 18:REDUCE(with prod 32)] [term 28:REDUCE(with prod 32)]
 [term 29:REDUCE(with prod 32)] [term 30:REDUCE(with prod 32)]
 [term 32:REDUCE(with prod 32)] [term 33:REDUCE(with prod 32)]
 [term 39:REDUCE(with prod 32)] [term 40:REDUCE(with prod 32)]
 [term 41:REDUCE(with prod 32)] [term 42:REDUCE(with prod 32)]
From state #172
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 36:SHIFT(to state 196)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #173
 [term 5:REDUCE(with prod 25)] [term 6:REDUCE(with prod 25)]
 [term 7:REDUCE(with prod 25)] [term 8:REDUCE(with prod 25)]
 [term 9:REDUCE(with prod 25)] [term 10:REDUCE(with prod 25)]
 [term 11:REDUCE(with prod 25)] [term 14:REDUCE(with prod 25)]
 [term 18:REDUCE(with prod 25)] [term 28:REDUCE(with prod 25)]
 [term 29:REDUCE(with prod 25)] [term 30:REDUCE(with prod 25)]
 [term 32:REDUCE(with prod 25)] [term 33:REDUCE(with prod 25)]
 [term 39:REDUCE(with prod 25)] [term 40:REDUCE(with prod 25)]
 [term 41:REDUCE(with prod 25)] [term 42:REDUCE(with prod 25)]
From state #174
 [term 36:SHIFT(to state 194)]
From state #175
 [term 5:REDUCE(with prod 28)] [term 6:REDUCE(with prod 28)]
 [term 7:REDUCE(with prod 28)] [term 8:REDUCE(with prod 28)]
 [term 9:REDUCE(with prod 28)] [term 10:REDUCE(with prod 28)]
 [term 11:REDUCE(with prod 28)] [term 14:REDUCE(with prod 28)]
 [term 18:REDUCE(with prod 28)] [term 28:REDUCE(with prod 28)]
 [term 29:REDUCE(with prod 28)] [term 30:REDUCE(with prod 28)]
 [term 32:REDUCE(with prod 28)] [term 33:REDUCE(with prod 28)]
 [term 39:REDUCE(with prod 28)] [term 40:REDUCE(with prod 28)]
 [term 41:REDUCE(with prod 28)] [term 42:REDUCE(with prod 28)]
From state #176
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 33:SHIFT(to state 193)] [term 39:SHIFT(to state 169)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #177
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 33:REDUCE(with prod 22)] [term 39:SHIFT(to state 169)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #178
 [term 30:SHIFT(to state 186)]
From state #179
 [term 12:REDUCE(with prod 64)] [term 13:REDUCE(with prod 64)]
 [term 14:REDUCE(with prod 64)] [term 15:REDUCE(with prod 64)]
 [term 16:REDUCE(with prod 64)] [term 17:REDUCE(with prod 64)]
 [term 19:REDUCE(with prod 64)] [term 20:REDUCE(with prod 64)]
 [term 21:REDUCE(with prod 64)] [term 22:REDUCE(with prod 64)]
 [term 23:REDUCE(with prod 64)] [term 24:REDUCE(with prod 64)]
 [term 25:REDUCE(with prod 64)] [term 26:REDUCE(with prod 64)]
 [term 36:SHIFT(to state 185)] [term 38:REDUCE(with prod 64)]
From state #180
 [term 12:REDUCE(with prod 61)] [term 13:REDUCE(with prod 61)]
 [term 14:REDUCE(with prod 61)] [term 15:REDUCE(with prod 61)]
 [term 16:REDUCE(with prod 61)] [term 17:REDUCE(with prod 61)]
 [term 19:REDUCE(with prod 61)] [term 20:REDUCE(with prod 61)]
 [term 21:REDUCE(with prod 61)] [term 22:REDUCE(with prod 61)]
 [term 23:REDUCE(with prod 61)] [term 24:REDUCE(with prod 61)]
 [term 25:REDUCE(with prod 61)] [term 26:REDUCE(with prod 61)]
 [term 36:SHIFT(to state 184)] [term 38:REDUCE(with prod 61)]
From state #181
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 38:SHIFT(to state 68)]
From state #182
 [term 5:REDUCE(with prod 27)] [term 6:REDUCE(with prod 27)]
 [term 7:REDUCE(with prod 27)] [term 8:REDUCE(with prod 27)]
 [term 9:REDUCE(with prod 27)] [term 10:REDUCE(with prod 27)]
 [term 11:REDUCE(with prod 27)] [term 14:REDUCE(with prod 27)]
 [term 18:REDUCE(with prod 27)] [term 28:REDUCE(with prod 27)]
 [term 29:REDUCE(with prod 27)] [term 30:REDUCE(with prod 27)]
 [term 32:REDUCE(with prod 27)] [term 33:REDUCE(with prod 27)]
 [term 39:REDUCE(with prod 27)] [term 40:REDUCE(with prod 27)]
 [term 41:REDUCE(with prod 27)] [term 42:REDUCE(with prod 27)]
From state #183
 [term 5:REDUCE(with prod 23)] [term 7:REDUCE(with prod 23)]
 [term 8:REDUCE(with prod 23)] [term 9:REDUCE(with prod 23)]
 [term 10:REDUCE(with prod 23)] [term 11:REDUCE(with prod 23)]
 [term 14:REDUCE(with prod 23)] [term 18:REDUCE(with prod 23)]
 [term 28:REDUCE(with prod 23)] [term 29:REDUCE(with prod 23)]
 [term 30:REDUCE(with prod 23)] [term 32:REDUCE(with prod 23)]
 [term 33:REDUCE(with prod 23)] [term 39:REDUCE(with prod 23)]
 [term 40:REDUCE(with prod 23)] [term 41:REDUCE(with prod 23)]
 [term 42:REDUCE(with prod 23)]
From state #184
 [term 5:REDUCE(with prod 34)] [term 6:REDUCE(with prod 34)]
 [term 7:REDUCE(with prod 34)] [term 8:REDUCE(with prod 34)]
 [term 9:REDUCE(with prod 34)] [term 10:REDUCE(with prod 34)]
 [term 11:REDUCE(with prod 34)] [term 14:REDUCE(with prod 34)]
 [term 18:REDUCE(with prod 34)] [term 28:REDUCE(with prod 34)]
 [term 29:REDUCE(with prod 34)] [term 30:REDUCE(with prod 34)]
 [term 32:REDUCE(with prod 34)] [term 33:REDUCE(with prod 34)]
 [term 39:REDUCE(with prod 34)] [term 40:REDUCE(with prod 34)]
 [term 41:REDUCE(with prod 34)] [term 42:REDUCE(with prod 34)]
From state #185
 [term 5:REDUCE(with prod 38)] [term 6:REDUCE(with prod 38)]
 [term 7:REDUCE(with prod 38)] [term 8:REDUCE(with prod 38)]
 [term 9:REDUCE(with prod 38)] [term 10:REDUCE(with prod 38)]
 [term 11:REDUCE(with prod 38)] [term 14:REDUCE(with prod 38)]
 [term 18:REDUCE(with prod 38)] [term 28:REDUCE(with prod 38)]
 [term 29:REDUCE(with prod 38)] [term 30:REDUCE(with prod 38)]
 [term 32:REDUCE(with prod 38)] [term 33:REDUCE(with prod 38)]
 [term 39:REDUCE(with prod 38)] [term 40:REDUCE(with prod 38)]
 [term 41:REDUCE(with prod 38)] [term 42:REDUCE(with prod 38)]
From state #186
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #187
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:SHIFT(to state 188)] [term 38:SHIFT(to state 68)]
From state #188
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 39:SHIFT(to state 169)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #189
 [term 5:REDUCE(with prod 44)] [term 6:REDUCE(with prod 44)]
 [term 7:REDUCE(with prod 44)] [term 8:REDUCE(with prod 44)]
 [term 9:REDUCE(with prod 44)] [term 10:REDUCE(with prod 44)]
 [term 11:REDUCE(with prod 44)] [term 14:REDUCE(with prod 44)]
 [term 18:REDUCE(with prod 44)] [term 28:REDUCE(with prod 44)]
 [term 29:REDUCE(with prod 44)] [term 30:REDUCE(with prod 44)]
 [term 32:REDUCE(with prod 44)] [term 33:REDUCE(with prod 44)]
 [term 39:REDUCE(with prod 44)] [term 40:REDUCE(with prod 44)]
 [term 41:REDUCE(with prod 44)] [term 42:REDUCE(with prod 44)]
From state #190
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 33:SHIFT(to state 191)] [term 39:SHIFT(to state 169)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #191
 [term 5:REDUCE(with prod 56)] [term 6:REDUCE(with prod 56)]
 [term 7:REDUCE(with prod 56)] [term 8:REDUCE(with prod 56)]
 [term 9:REDUCE(with prod 56)] [term 10:REDUCE(with prod 56)]
 [term 11:REDUCE(with prod 56)] [term 14:REDUCE(with prod 56)]
 [term 18:REDUCE(with prod 56)] [term 28:REDUCE(with prod 56)]
 [term 29:REDUCE(with prod 56)] [term 30:REDUCE(with prod 56)]
 [term 32:REDUCE(with prod 56)] [term 33:REDUCE(with prod 56)]
 [term 39:REDUCE(with prod 56)] [term 40:REDUCE(with prod 56)]
 [term 41:REDUCE(with prod 56)] [term 42:REDUCE(with prod 56)]
From state #192
 [term 5:REDUCE(with prod 24)] [term 7:REDUCE(with prod 24)]
 [term 8:REDUCE(with prod 24)] [term 9:REDUCE(with prod 24)]
 [term 10:REDUCE(with prod 24)] [term 11:REDUCE(with prod 24)]
 [term 14:REDUCE(with prod 24)] [term 18:REDUCE(with prod 24)]
 [term 28:REDUCE(with prod 24)] [term 29:REDUCE(with prod 24)]
 [term 30:REDUCE(with prod 24)] [term 32:REDUCE(with prod 24)]
 [term 33:REDUCE(with prod 24)] [term 39:REDUCE(with prod 24)]
 [term 40:REDUCE(with prod 24)] [term 41:REDUCE(with prod 24)]
 [term 42:REDUCE(with prod 24)]
From state #193
 [term 33:REDUCE(with prod 12)] [term 39:REDUCE(with prod 12)]
From state #194
 [term 5:REDUCE(with prod 53)] [term 6:REDUCE(with prod 53)]
 [term 7:REDUCE(with prod 53)] [term 8:REDUCE(with prod 53)]
 [term 9:REDUCE(with prod 53)] [term 10:REDUCE(with prod 53)]
 [term 11:REDUCE(with prod 53)] [term 14:REDUCE(with prod 53)]
 [term 18:REDUCE(with prod 53)] [term 28:REDUCE(with prod 53)]
 [term 29:REDUCE(with prod 53)] [term 30:REDUCE(with prod 53)]
 [term 32:REDUCE(with prod 53)] [term 33:REDUCE(with prod 53)]
 [term 39:REDUCE(with prod 53)] [term 40:REDUCE(with prod 53)]
 [term 41:REDUCE(with prod 53)] [term 42:REDUCE(with prod 53)]
From state #195
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 36:SHIFT(to state 197)] [term 38:SHIFT(to state 68)]
From state #196
 [term 5:REDUCE(with prod 55)] [term 6:REDUCE(with prod 55)]
 [term 7:REDUCE(with prod 55)] [term 8:REDUCE(with prod 55)]
 [term 9:REDUCE(with prod 55)] [term 10:REDUCE(with prod 55)]
 [term 11:REDUCE(with prod 55)] [term 14:REDUCE(with prod 55)]
 [term 18:REDUCE(with prod 55)] [term 28:REDUCE(with prod 55)]
 [term 29:REDUCE(with prod 55)] [term 30:REDUCE(with prod 55)]
 [term 32:REDUCE(with prod 55)] [term 33:REDUCE(with prod 55)]
 [term 39:REDUCE(with prod 55)] [term 40:REDUCE(with prod 55)]
 [term 41:REDUCE(with prod 55)] [term 42:REDUCE(with prod 55)]
From state #197
 [term 5:REDUCE(with prod 54)] [term 6:REDUCE(with prod 54)]
 [term 7:REDUCE(with prod 54)] [term 8:REDUCE(with prod 54)]
 [term 9:REDUCE(with prod 54)] [term 10:REDUCE(with prod 54)]
 [term 11:REDUCE(with prod 54)] [term 14:REDUCE(with prod 54)]
 [term 18:REDUCE(with prod 54)] [term 28:REDUCE(with prod 54)]
 [term 29:REDUCE(with prod 54)] [term 30:REDUCE(with prod 54)]
 [term 32:REDUCE(with prod 54)] [term 33:REDUCE(with prod 54)]
 [term 39:REDUCE(with prod 54)] [term 40:REDUCE(with prod 54)]
 [term 41:REDUCE(with prod 54)] [term 42:REDUCE(with prod 54)]
From state #198
 [term 27:SHIFT(to state 205)]
From state #199
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 35:SHIFT(to state 200)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #200
 [term 39:SHIFT(to state 201)]
From state #201
 [term 27:SHIFT(to state 202)]
From state #202
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #203
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 36:SHIFT(to state 204)] [term 38:SHIFT(to state 68)]
From state #204
 [term 5:REDUCE(with prod 40)] [term 6:REDUCE(with prod 40)]
 [term 7:REDUCE(with prod 40)] [term 8:REDUCE(with prod 40)]
 [term 9:REDUCE(with prod 40)] [term 10:REDUCE(with prod 40)]
 [term 11:REDUCE(with prod 40)] [term 14:REDUCE(with prod 40)]
 [term 18:REDUCE(with prod 40)] [term 28:REDUCE(with prod 40)]
 [term 29:REDUCE(with prod 40)] [term 30:REDUCE(with prod 40)]
 [term 32:REDUCE(with prod 40)] [term 33:REDUCE(with prod 40)]
 [term 39:REDUCE(with prod 40)] [term 40:REDUCE(with prod 40)]
 [term 41:REDUCE(with prod 40)] [term 42:REDUCE(with prod 40)]
From state #205
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #206
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 36:SHIFT(to state 207)] [term 38:SHIFT(to state 68)]
From state #207
 [term 5:REDUCE(with prod 41)] [term 6:REDUCE(with prod 41)]
 [term 7:REDUCE(with prod 41)] [term 8:REDUCE(with prod 41)]
 [term 9:REDUCE(with prod 41)] [term 10:REDUCE(with prod 41)]
 [term 11:REDUCE(with prod 41)] [term 14:REDUCE(with prod 41)]
 [term 18:REDUCE(with prod 41)] [term 28:REDUCE(with prod 41)]
 [term 29:REDUCE(with prod 41)] [term 30:REDUCE(with prod 41)]
 [term 32:REDUCE(with prod 41)] [term 33:REDUCE(with prod 41)]
 [term 39:REDUCE(with prod 41)] [term 40:REDUCE(with prod 41)]
 [term 41:REDUCE(with prod 41)] [term 42:REDUCE(with prod 41)]
From state #208
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #209
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:SHIFT(to state 210)] [term 38:SHIFT(to state 68)]
From state #210
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 39:SHIFT(to state 169)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #211
 [term 5:REDUCE(with prod 42)] [term 6:SHIFT(to state 212)]
 [term 7:REDUCE(with prod 42)] [term 8:REDUCE(with prod 42)]
 [term 9:REDUCE(with prod 42)] [term 10:REDUCE(with prod 42)]
 [term 11:REDUCE(with prod 42)] [term 14:REDUCE(with prod 42)]
 [term 18:REDUCE(with prod 42)] [term 28:REDUCE(with prod 42)]
 [term 29:REDUCE(with prod 42)] [term 30:REDUCE(with prod 42)]
 [term 32:REDUCE(with prod 42)] [term 33:REDUCE(with prod 42)]
 [term 39:REDUCE(with prod 42)] [term 40:REDUCE(with prod 42)]
 [term 41:REDUCE(with prod 42)] [term 42:REDUCE(with prod 42)]
From state #212
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 39:SHIFT(to state 169)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #213
 [term 5:REDUCE(with prod 43)] [term 6:REDUCE(with prod 43)]
 [term 7:REDUCE(with prod 43)] [term 8:REDUCE(with prod 43)]
 [term 9:REDUCE(with prod 43)] [term 10:REDUCE(with prod 43)]
 [term 11:REDUCE(with prod 43)] [term 14:REDUCE(with prod 43)]
 [term 18:REDUCE(with prod 43)] [term 28:REDUCE(with prod 43)]
 [term 29:REDUCE(with prod 43)] [term 30:REDUCE(with prod 43)]
 [term 32:REDUCE(with prod 43)] [term 33:REDUCE(with prod 43)]
 [term 39:REDUCE(with prod 43)] [term 40:REDUCE(with prod 43)]
 [term 41:REDUCE(with prod 43)] [term 42:REDUCE(with prod 43)]
From state #214
 [term 5:REDUCE(with prod 39)] [term 6:REDUCE(with prod 39)]
 [term 7:REDUCE(with prod 39)] [term 8:REDUCE(with prod 39)]
 [term 9:REDUCE(with prod 39)] [term 10:REDUCE(with prod 39)]
 [term 11:REDUCE(with prod 39)] [term 14:REDUCE(with prod 39)]
 [term 18:REDUCE(with prod 39)] [term 28:REDUCE(with prod 39)]
 [term 29:REDUCE(with prod 39)] [term 30:REDUCE(with prod 39)]
 [term 32:REDUCE(with prod 39)] [term 33:REDUCE(with prod 39)]
 [term 39:REDUCE(with prod 39)] [term 40:REDUCE(with prod 39)]
 [term 41:REDUCE(with prod 39)] [term 42:REDUCE(with prod 39)]
From state #215
 [term 5:REDUCE(with prod 33)] [term 6:REDUCE(with prod 33)]
 [term 7:REDUCE(with prod 33)] [term 8:REDUCE(with prod 33)]
 [term 9:REDUCE(with prod 33)] [term 10:REDUCE(with prod 33)]
 [term 11:REDUCE(with prod 33)] [term 14:REDUCE(with prod 33)]
 [term 18:REDUCE(with prod 33)] [term 28:REDUCE(with prod 33)]
 [term 29:REDUCE(with prod 33)] [term 30:REDUCE(with prod 33)]
 [term 32:REDUCE(with prod 33)] [term 33:REDUCE(with prod 33)]
 [term 39:REDUCE(with prod 33)] [term 40:REDUCE(with prod 33)]
 [term 41:REDUCE(with prod 33)] [term 42:REDUCE(with prod 33)]
From state #216
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 36:SHIFT(to state 218)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #217
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 36:SHIFT(to state 232)] [term 38:SHIFT(to state 68)]
From state #218
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 36:SHIFT(to state 220)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #219
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 36:SHIFT(to state 226)] [term 38:SHIFT(to state 68)]
From state #220
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 31:SHIFT(to state 222)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #221
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:SHIFT(to state 224)] [term 38:SHIFT(to state 68)]
From state #222
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 39:SHIFT(to state 169)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #223
 [term 5:REDUCE(with prod 45)] [term 6:REDUCE(with prod 45)]
 [term 7:REDUCE(with prod 45)] [term 8:REDUCE(with prod 45)]
 [term 9:REDUCE(with prod 45)] [term 10:REDUCE(with prod 45)]
 [term 11:REDUCE(with prod 45)] [term 14:REDUCE(with prod 45)]
 [term 18:REDUCE(with prod 45)] [term 28:REDUCE(with prod 45)]
 [term 29:REDUCE(with prod 45)] [term 30:REDUCE(with prod 45)]
 [term 32:REDUCE(with prod 45)] [term 33:REDUCE(with prod 45)]
 [term 39:REDUCE(with prod 45)] [term 40:REDUCE(with prod 45)]
 [term 41:REDUCE(with prod 45)] [term 42:REDUCE(with prod 45)]
From state #224
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 39:SHIFT(to state 169)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #225
 [term 5:REDUCE(with prod 49)] [term 6:REDUCE(with prod 49)]
 [term 7:REDUCE(with prod 49)] [term 8:REDUCE(with prod 49)]
 [term 9:REDUCE(with prod 49)] [term 10:REDUCE(with prod 49)]
 [term 11:REDUCE(with prod 49)] [term 14:REDUCE(with prod 49)]
 [term 18:REDUCE(with prod 49)] [term 28:REDUCE(with prod 49)]
 [term 29:REDUCE(with prod 49)] [term 30:REDUCE(with prod 49)]
 [term 32:REDUCE(with prod 49)] [term 33:REDUCE(with prod 49)]
 [term 39:REDUCE(with prod 49)] [term 40:REDUCE(with prod 49)]
 [term 41:REDUCE(with prod 49)] [term 42:REDUCE(with prod 49)]
From state #226
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 31:SHIFT(to state 228)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #227
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:SHIFT(to state 230)] [term 38:SHIFT(to state 68)]
From state #228
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 39:SHIFT(to state 169)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #229
 [term 5:REDUCE(with prod 47)] [term 6:REDUCE(with prod 47)]
 [term 7:REDUCE(with prod 47)] [term 8:REDUCE(with prod 47)]
 [term 9:REDUCE(with prod 47)] [term 10:REDUCE(with prod 47)]
 [term 11:REDUCE(with prod 47)] [term 14:REDUCE(with prod 47)]
 [term 18:REDUCE(with prod 47)] [term 28:REDUCE(with prod 47)]
 [term 29:REDUCE(with prod 47)] [term 30:REDUCE(with prod 47)]
 [term 32:REDUCE(with prod 47)] [term 33:REDUCE(with prod 47)]
 [term 39:REDUCE(with prod 47)] [term 40:REDUCE(with prod 47)]
 [term 41:REDUCE(with prod 47)] [term 42:REDUCE(with prod 47)]
From state #230
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 39:SHIFT(to state 169)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #231
 [term 5:REDUCE(with prod 51)] [term 6:REDUCE(with prod 51)]
 [term 7:REDUCE(with prod 51)] [term 8:REDUCE(with prod 51)]
 [term 9:REDUCE(with prod 51)] [term 10:REDUCE(with prod 51)]
 [term 11:REDUCE(with prod 51)] [term 14:REDUCE(with prod 51)]
 [term 18:REDUCE(with prod 51)] [term 28:REDUCE(with prod 51)]
 [term 29:REDUCE(with prod 51)] [term 30:REDUCE(with prod 51)]
 [term 32:REDUCE(with prod 51)] [term 33:REDUCE(with prod 51)]
 [term 39:REDUCE(with prod 51)] [term 40:REDUCE(with prod 51)]
 [term 41:REDUCE(with prod 51)] [term 42:REDUCE(with prod 51)]
From state #232
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 36:SHIFT(to state 234)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #233
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 36:SHIFT(to state 240)] [term 38:SHIFT(to state 68)]
From state #234
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 31:SHIFT(to state 236)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #235
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:SHIFT(to state 238)] [term 38:SHIFT(to state 68)]
From state #236
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 39:SHIFT(to state 169)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #237
 [term 5:REDUCE(with prod 46)] [term 6:REDUCE(with prod 46)]
 [term 7:REDUCE(with prod 46)] [term 8:REDUCE(with prod 46)]
 [term 9:REDUCE(with prod 46)] [term 10:REDUCE(with prod 46)]
 [term 11:REDUCE(with prod 46)] [term 14:REDUCE(with prod 46)]
 [term 18:REDUCE(with prod 46)] [term 28:REDUCE(with prod 46)]
 [term 29:REDUCE(with prod 46)] [term 30:REDUCE(with prod 46)]
 [term 32:REDUCE(with prod 46)] [term 33:REDUCE(with prod 46)]
 [term 39:REDUCE(with prod 46)] [term 40:REDUCE(with prod 46)]
 [term 41:REDUCE(with prod 46)] [term 42:REDUCE(with prod 46)]
From state #238
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 39:SHIFT(to state 169)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #239
 [term 5:REDUCE(with prod 50)] [term 6:REDUCE(with prod 50)]
 [term 7:REDUCE(with prod 50)] [term 8:REDUCE(with prod 50)]
 [term 9:REDUCE(with prod 50)] [term 10:REDUCE(with prod 50)]
 [term 11:REDUCE(with prod 50)] [term 14:REDUCE(with prod 50)]
 [term 18:REDUCE(with prod 50)] [term 28:REDUCE(with prod 50)]
 [term 29:REDUCE(with prod 50)] [term 30:REDUCE(with prod 50)]
 [term 32:REDUCE(with prod 50)] [term 33:REDUCE(with prod 50)]
 [term 39:REDUCE(with prod 50)] [term 40:REDUCE(with prod 50)]
 [term 41:REDUCE(with prod 50)] [term 42:REDUCE(with prod 50)]
From state #240
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 31:SHIFT(to state 242)] [term 39:SHIFT(to state 38)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #241
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 31:SHIFT(to state 244)] [term 38:SHIFT(to state 68)]
From state #242
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 39:SHIFT(to state 169)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #243
 [term 5:REDUCE(with prod 48)] [term 6:REDUCE(with prod 48)]
 [term 7:REDUCE(with prod 48)] [term 8:REDUCE(with prod 48)]
 [term 9:REDUCE(with prod 48)] [term 10:REDUCE(with prod 48)]
 [term 11:REDUCE(with prod 48)] [term 14:REDUCE(with prod 48)]
 [term 18:REDUCE(with prod 48)] [term 28:REDUCE(with prod 48)]
 [term 29:REDUCE(with prod 48)] [term 30:REDUCE(with prod 48)]
 [term 32:REDUCE(with prod 48)] [term 33:REDUCE(with prod 48)]
 [term 39:REDUCE(with prod 48)] [term 40:REDUCE(with prod 48)]
 [term 41:REDUCE(with prod 48)] [term 42:REDUCE(with prod 48)]
From state #244
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 39:SHIFT(to state 169)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #245
 [term 5:REDUCE(with prod 52)] [term 6:REDUCE(with prod 52)]
 [term 7:REDUCE(with prod 52)] [term 8:REDUCE(with prod 52)]
 [term 9:REDUCE(with prod 52)] [term 10:REDUCE(with prod 52)]
 [term 11:REDUCE(with prod 52)] [term 14:REDUCE(with prod 52)]
 [term 18:REDUCE(with prod 52)] [term 28:REDUCE(with prod 52)]
 [term 29:REDUCE(with prod 52)] [term 30:REDUCE(with prod 52)]
 [term 32:REDUCE(with prod 52)] [term 33:REDUCE(with prod 52)]
 [term 39:REDUCE(with prod 52)] [term 40:REDUCE(with prod 52)]
 [term 41:REDUCE(with prod 52)] [term 42:REDUCE(with prod 52)]
From state #246
 [term 5:REDUCE(with prod 36)] [term 6:REDUCE(with prod 36)]
 [term 7:REDUCE(with prod 36)] [term 8:REDUCE(with prod 36)]
 [term 9:REDUCE(with prod 36)] [term 10:REDUCE(with prod 36)]
 [term 11:REDUCE(with prod 36)] [term 14:REDUCE(with prod 36)]
 [term 18:REDUCE(with prod 36)] [term 28:REDUCE(with prod 36)]
 [term 29:REDUCE(with prod 36)] [term 30:REDUCE(with prod 36)]
 [term 32:REDUCE(with prod 36)] [term 33:REDUCE(with prod 36)]
 [term 39:REDUCE(with prod 36)] [term 40:REDUCE(with prod 36)]
 [term 41:REDUCE(with prod 36)] [term 42:REDUCE(with prod 36)]
From state #247
 [term 5:REDUCE(with prod 37)] [term 6:REDUCE(with prod 37)]
 [term 7:REDUCE(with prod 37)] [term 8:REDUCE(with prod 37)]
 [term 9:REDUCE(with prod 37)] [term 10:REDUCE(with prod 37)]
 [term 11:REDUCE(with prod 37)] [term 14:REDUCE(with prod 37)]
 [term 18:REDUCE(with prod 37)] [term 28:REDUCE(with prod 37)]
 [term 29:REDUCE(with prod 37)] [term 30:REDUCE(with prod 37)]
 [term 32:REDUCE(with prod 37)] [term 33:REDUCE(with prod 37)]
 [term 39:REDUCE(with prod 37)] [term 40:REDUCE(with prod 37)]
 [term 41:REDUCE(with prod 37)] [term 42:REDUCE(with prod 37)]
From state #248
 [term 5:REDUCE(with prod 35)] [term 6:REDUCE(with prod 35)]
 [term 7:REDUCE(with prod 35)] [term 8:REDUCE(with prod 35)]
 [term 9:REDUCE(with prod 35)] [term 10:REDUCE(with prod 35)]
 [term 11:REDUCE(with prod 35)] [term 14:REDUCE(with prod 35)]
 [term 18:REDUCE(with prod 35)] [term 28:REDUCE(with prod 35)]
 [term 29:REDUCE(with prod 35)] [term 30:REDUCE(with prod 35)]
 [term 32:REDUCE(with prod 35)] [term 33:REDUCE(with prod 35)]
 [term 39:REDUCE(with prod 35)] [term 40:REDUCE(with prod 35)]
 [term 41:REDUCE(with prod 35)] [term 42:REDUCE(with prod 35)]
From state #249
 [term 31:REDUCE(with prod 19)] [term 37:REDUCE(with prod 19)]
From state #250
 [term 31:REDUCE(with prod 21)] [term 37:REDUCE(with prod 21)]
From state #251
 [term 35:SHIFT(to state 252)]
From state #252
 [term 39:SHIFT(to state 253)]
From state #253
 [term 31:REDUCE(with prod 20)] [term 37:REDUCE(with prod 20)]
From state #254
 [term 33:REDUCE(with prod 13)] [term 39:REDUCE(with prod 13)]
From state #255
 [term 31:REDUCE(with prod 17)] [term 37:REDUCE(with prod 17)]
 [term 39:SHIFT(to state 153)]
From state #256
 [term 10:SHIFT(to state 48)] [term 14:SHIFT(to state 44)]
 [term 18:SHIFT(to state 31)] [term 28:SHIFT(to state 25)]
 [term 29:SHIFT(to state 33)] [term 30:SHIFT(to state 35)]
 [term 39:SHIFT(to state 38)] [term 40:SHIFT(to state 39)]
 [term 41:SHIFT(to state 34)] [term 42:SHIFT(to state 24)]
From state #257
 [term 12:SHIFT(to state 67)] [term 13:SHIFT(to state 66)]
 [term 14:SHIFT(to state 62)] [term 15:SHIFT(to state 71)]
 [term 16:SHIFT(to state 63)] [term 17:SHIFT(to state 64)]
 [term 19:SHIFT(to state 61)] [term 20:SHIFT(to state 75)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
 [term 23:SHIFT(to state 74)] [term 24:SHIFT(to state 76)]
 [term 25:SHIFT(to state 69)] [term 26:SHIFT(to state 73)]
 [term 36:SHIFT(to state 258)] [term 38:SHIFT(to state 68)]
From state #258
 [term 33:REDUCE(with prod 14)] [term 39:REDUCE(with prod 14)]
From state #259
 [term 31:SHIFT(to state 260)] [term 37:SHIFT(to state 156)]
From state #260
 [term 32:SHIFT(to state 261)]
From state #261
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 33:REDUCE(with prod 22)] [term 39:SHIFT(to state 169)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #262
 [term 5:SHIFT(to state 168)] [term 7:SHIFT(to state 178)]
 [term 8:SHIFT(to state 163)] [term 9:SHIFT(to state 174)]
 [term 10:SHIFT(to state 48)] [term 11:SHIFT(to state 172)]
 [term 14:SHIFT(to state 44)] [term 18:SHIFT(to state 31)]
 [term 28:SHIFT(to state 25)] [term 29:SHIFT(to state 33)]
 [term 30:SHIFT(to state 35)] [term 32:SHIFT(to state 177)]
 [term 33:SHIFT(to state 263)] [term 39:SHIFT(to state 169)]
 [term 40:SHIFT(to state 39)] [term 41:SHIFT(to state 34)]
 [term 42:SHIFT(to state 24)]
From state #263
 [term 33:REDUCE(with prod 11)] [term 39:REDUCE(with prod 11)]
From state #264
 [term 33:SHIFT(to state 265)] [term 39:SHIFT(to state 10)]
From state #265
 [term 0:REDUCE(with prod 4)] [term 3:REDUCE(with prod 4)]
From state #266
 [term 0:REDUCE(with prod 1)]
From state #267
 [term 0:REDUCE(with prod 3)] [term 3:REDUCE(with prod 3)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 1->state 2] [non term 2->state 1] [non term 3->state 3]
From state #1
 [non term 3->state 267]
From state #2
From state #3
From state #4
From state #5
From state #6
 [non term 4->state 264] [non term 5->state 14] [non term 6->state 13]
 [non term 7->state 12]
From state #7
From state #8
From state #9
 [non term 4->state 11] [non term 5->state 14] [non term 6->state 13]
 [non term 7->state 12]
From state #10
From state #11
 [non term 5->state 16] [non term 6->state 13] [non term 7->state 12]
From state #12
From state #13
From state #14
From state #15
From state #16
From state #17
From state #18
From state #19
From state #20
From state #21
From state #22
 [non term 8->state 154] [non term 9->state 155]
From state #23
 [non term 20->state 28] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #24
From state #25
 [non term 39->state 151] [non term 40->state 152]
From state #26
From state #27
From state #28
From state #29
From state #30
From state #31
 [non term 20->state 149] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #32
From state #33
 [non term 39->state 139] [non term 40->state 140]
From state #34
From state #35
 [non term 20->state 125] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #36
From state #37
From state #38
From state #39
From state #40
From state #41
From state #42
From state #43
From state #44
 [non term 20->state 100] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #45
From state #46
From state #47
From state #48
From state #49
From state #50
From state #51
From state #52
From state #53
From state #54
From state #55
From state #56
From state #57
 [non term 20->state 60] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #58
From state #59
From state #60
From state #61
 [non term 20->state 99] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #62
 [non term 20->state 98] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #63
 [non term 20->state 97] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #64
 [non term 20->state 96] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #65
 [non term 20->state 95] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #66
 [non term 20->state 94] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #67
From state #68
From state #69
 [non term 20->state 83] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #70
From state #71
 [non term 20->state 82] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #72
 [non term 20->state 81] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #73
 [non term 20->state 80] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #74
 [non term 20->state 79] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #75
 [non term 20->state 78] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #76
 [non term 20->state 77] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #77
From state #78
From state #79
From state #80
From state #81
From state #82
From state #83
From state #84
From state #85
 [non term 20->state 86] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 24->state 87] [non term 25->state 32]
 [non term 26->state 43] [non term 27->state 30] [non term 28->state 26]
 [non term 29->state 53] [non term 30->state 40] [non term 31->state 51]
 [non term 32->state 49] [non term 33->state 41] [non term 34->state 52]
 [non term 35->state 45] [non term 36->state 46] [non term 37->state 42]
 [non term 38->state 29] [non term 39->state 37] [non term 40->state 50]
From state #86
From state #87
From state #88
 [non term 20->state 90] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #89
From state #90
From state #91
From state #92
From state #93
From state #94
From state #95
From state #96
From state #97
From state #98
From state #99
From state #100
From state #101
 [non term 20->state 119] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #102
 [non term 20->state 86] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 24->state 117] [non term 25->state 32]
 [non term 26->state 43] [non term 27->state 30] [non term 28->state 26]
 [non term 29->state 53] [non term 30->state 40] [non term 31->state 51]
 [non term 32->state 49] [non term 33->state 41] [non term 34->state 52]
 [non term 35->state 45] [non term 36->state 46] [non term 37->state 42]
 [non term 38->state 29] [non term 39->state 37] [non term 40->state 50]
From state #103
 [non term 20->state 116] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #104
From state #105
From state #106
 [non term 20->state 112] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #107
 [non term 20->state 86] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 24->state 110] [non term 25->state 32]
 [non term 26->state 43] [non term 27->state 30] [non term 28->state 26]
 [non term 29->state 53] [non term 30->state 40] [non term 31->state 51]
 [non term 32->state 49] [non term 33->state 41] [non term 34->state 52]
 [non term 35->state 45] [non term 36->state 46] [non term 37->state 42]
 [non term 38->state 29] [non term 39->state 37] [non term 40->state 50]
From state #108
 [non term 20->state 109] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #109
From state #110
From state #111
From state #112
From state #113
From state #114
 [non term 20->state 115] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #115
From state #116
From state #117
From state #118
From state #119
From state #120
From state #121
 [non term 20->state 122] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #122
From state #123
From state #124
From state #125
From state #126
From state #127
From state #128
 [non term 20->state 119] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #129
From state #130
From state #131
 [non term 20->state 132] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #132
From state #133
From state #134
 [non term 20->state 135] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #135
From state #136
From state #137
From state #138
From state #139
From state #140
From state #141
 [non term 20->state 147] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #142
From state #143
From state #144
 [non term 20->state 145] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #145
From state #146
From state #147
From state #148
From state #149
From state #150
From state #151
From state #152
From state #153
From state #154
From state #155
From state #156
 [non term 9->state 249]
From state #157
From state #158
 [non term 10->state 176] [non term 11->state 183] [non term 12->state 173]
 [non term 13->state 170] [non term 14->state 182] [non term 15->state 175]
 [non term 16->state 160] [non term 17->state 164] [non term 18->state 167]
 [non term 19->state 171] [non term 20->state 181] [non term 21->state 165]
 [non term 22->state 180] [non term 23->state 166] [non term 25->state 161]
 [non term 26->state 179] [non term 27->state 30] [non term 28->state 26]
 [non term 29->state 53] [non term 30->state 40] [non term 31->state 51]
 [non term 32->state 49] [non term 33->state 41] [non term 34->state 52]
 [non term 35->state 45] [non term 36->state 46] [non term 37->state 159]
 [non term 38->state 162] [non term 39->state 37] [non term 40->state 50]
From state #159
From state #160
From state #161
From state #162
From state #163
From state #164
From state #165
From state #166
From state #167
From state #168
From state #169
From state #170
From state #171
From state #172
 [non term 20->state 195] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #173
From state #174
From state #175
From state #176
 [non term 11->state 192] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #177
 [non term 10->state 190] [non term 11->state 183] [non term 12->state 173]
 [non term 13->state 170] [non term 14->state 182] [non term 15->state 175]
 [non term 16->state 160] [non term 17->state 164] [non term 18->state 167]
 [non term 19->state 171] [non term 20->state 181] [non term 21->state 165]
 [non term 22->state 180] [non term 23->state 166] [non term 25->state 161]
 [non term 26->state 179] [non term 27->state 30] [non term 28->state 26]
 [non term 29->state 53] [non term 30->state 40] [non term 31->state 51]
 [non term 32->state 49] [non term 33->state 41] [non term 34->state 52]
 [non term 35->state 45] [non term 36->state 46] [non term 37->state 159]
 [non term 38->state 162] [non term 39->state 37] [non term 40->state 50]
From state #178
From state #179
From state #180
From state #181
From state #182
From state #183
From state #184
From state #185
From state #186
 [non term 20->state 187] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #187
From state #188
 [non term 11->state 189] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #189
From state #190
 [non term 11->state 192] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #191
From state #192
From state #193
From state #194
From state #195
From state #196
From state #197
From state #198
From state #199
 [non term 20->state 119] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #200
From state #201
From state #202
 [non term 20->state 203] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #203
From state #204
From state #205
 [non term 20->state 206] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #206
From state #207
From state #208
 [non term 20->state 209] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #209
From state #210
 [non term 11->state 211] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #211
From state #212
 [non term 11->state 213] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #213
From state #214
From state #215
From state #216
 [non term 20->state 217] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #217
From state #218
 [non term 20->state 219] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #219
From state #220
 [non term 20->state 221] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #221
From state #222
 [non term 11->state 223] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #223
From state #224
 [non term 11->state 225] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #225
From state #226
 [non term 20->state 227] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #227
From state #228
 [non term 11->state 229] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #229
From state #230
 [non term 11->state 231] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #231
From state #232
 [non term 20->state 233] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #233
From state #234
 [non term 20->state 235] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #235
From state #236
 [non term 11->state 237] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #237
From state #238
 [non term 11->state 239] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #239
From state #240
 [non term 20->state 241] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #241
From state #242
 [non term 11->state 243] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #243
From state #244
 [non term 11->state 245] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #245
From state #246
From state #247
From state #248
From state #249
From state #250
From state #251
From state #252
From state #253
From state #254
From state #255
 [non term 8->state 259] [non term 9->state 155]
From state #256
 [non term 20->state 257] [non term 21->state 27] [non term 22->state 36]
 [non term 23->state 47] [non term 25->state 32] [non term 26->state 43]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 42] [non term 38->state 29]
 [non term 39->state 37] [non term 40->state 50]
From state #257
From state #258
From state #259
From state #260
From state #261
 [non term 10->state 262] [non term 11->state 183] [non term 12->state 173]
 [non term 13->state 170] [non term 14->state 182] [non term 15->state 175]
 [non term 16->state 160] [non term 17->state 164] [non term 18->state 167]
 [non term 19->state 171] [non term 20->state 181] [non term 21->state 165]
 [non term 22->state 180] [non term 23->state 166] [non term 25->state 161]
 [non term 26->state 179] [non term 27->state 30] [non term 28->state 26]
 [non term 29->state 53] [non term 30->state 40] [non term 31->state 51]
 [non term 32->state 49] [non term 33->state 41] [non term 34->state 52]
 [non term 35->state 45] [non term 36->state 46] [non term 37->state 159]
 [non term 38->state 162] [non term 39->state 37] [non term 40->state 50]
From state #262
 [non term 11->state 192] [non term 12->state 173] [non term 13->state 170]
 [non term 14->state 182] [non term 15->state 175] [non term 16->state 160]
 [non term 17->state 164] [non term 18->state 167] [non term 19->state 171]
 [non term 20->state 181] [non term 21->state 165] [non term 22->state 180]
 [non term 23->state 166] [non term 25->state 161] [non term 26->state 179]
 [non term 27->state 30] [non term 28->state 26] [non term 29->state 53]
 [non term 30->state 40] [non term 31->state 51] [non term 32->state 49]
 [non term 33->state 41] [non term 34->state 52] [non term 35->state 45]
 [non term 36->state 46] [non term 37->state 159] [non term 38->state 162]
 [non term 39->state 37] [non term 40->state 50]
From state #263
From state #264
 [non term 5->state 16] [non term 6->state 13] [non term 7->state 12]
From state #265
From state #266
From state #267
-----------------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 51 warnings
  43 terminals, 41 non-terminals, and 123 productions declared, 
  producing 268 unique parse states.
  1 terminal declared but not used.
  0 non-terminal declared but not used.
  0 productions never reduced.
  50 conflicts detected (100 expected).
  Code written to "Parser.java", and "TokenIds.java".
---------------------------------------------------- (v0.10k)
